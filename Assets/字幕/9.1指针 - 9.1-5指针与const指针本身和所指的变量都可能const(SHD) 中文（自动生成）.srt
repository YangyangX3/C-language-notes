1
00:00:04,360 --> 00:00:07,790
我们知道const它是一个修饰符

2
00:00:07,790 --> 00:00:09,080
它加在变量的前面

3
00:00:09,080 --> 00:00:11,740
说这个变量不能被修改

4
00:00:13,039 --> 00:00:14,769
指针是一种变量

5
00:00:14,769 --> 00:00:16,629
在指针这种变量里面

6
00:00:16,629 --> 00:00:18,359
我们知道它有两个东西

7
00:00:18,359 --> 00:00:19,949
一个是指针本身

8
00:00:19,949 --> 00:00:23,070
一个是指针所指的那个变量

9
00:00:23,070 --> 00:00:25,260
那么在这种情况下

10
00:00:25,260 --> 00:00:27,500
当指针和const遇到一起的话

11
00:00:28,179 --> 00:00:31,589
这个指针它指向了那个变量

12
00:00:31,589 --> 00:00:33,418
指针本身可以是cost

13
00:00:33,679 --> 00:00:35,479
它所指的那个变量

14
00:00:35,479 --> 00:00:37,279
也可以是cost

15
00:00:38,060 --> 00:00:40,780
它们有什么样的区别和联系呢

16
00:00:42,280 --> 00:00:44,098
如果指针是cost

17
00:00:44,259 --> 00:00:46,719
比如我们说in the same const

18
00:00:46,719 --> 00:00:48,159
q等于and i

19
00:00:48,200 --> 00:00:49,850
那么在这种情况下

20
00:00:49,850 --> 00:00:51,979
q这个指针是const

21
00:00:51,979 --> 00:00:55,460
它的意思是说q的值不能被改变

22
00:00:55,460 --> 00:00:56,780
什么是q的值

23
00:00:56,780 --> 00:01:01,640
就是i的地址就是q指向了i

24
00:01:01,640 --> 00:01:04,189
这个事实不能被改变

25
00:01:04,189 --> 00:01:07,359
也就是q不能再指向别人了

26
00:01:07,599 --> 00:01:10,939
他们之间的这个关系是永久的

27
00:01:12,200 --> 00:01:13,959
那么在这个之后

28
00:01:13,959 --> 00:01:17,099
我们通过q去做去做一些访问

29
00:01:17,099 --> 00:01:20,040
比如说新q等于26k没问题

30
00:01:20,040 --> 00:01:23,980
因为q所指的那个int那个i不是const

31
00:01:24,359 --> 00:01:27,540
但是如果我们想要对q做点运算

32
00:01:27,540 --> 00:01:31,620
比如q加加这事我们还没说啊

33
00:01:31,620 --> 00:01:32,459
但是它是能做的

34
00:01:32,459 --> 00:01:34,560
不过加上const之后

35
00:01:34,560 --> 00:01:35,819
因为q是cost

36
00:01:35,819 --> 00:01:38,459
所以q加加是不能做的了

37
00:01:40,140 --> 00:01:44,140
如果我们在定义指针的时候说

38
00:01:44,140 --> 00:01:48,219
这个p所指的那个int不是普通的int

39
00:01:48,219 --> 00:01:49,299
是const

40
00:01:49,500 --> 00:01:51,090
那又是什么意思呢

41
00:01:51,090 --> 00:01:56,299
如果我们说p所指的那个int是个const

42
00:01:56,620 --> 00:01:58,239
他得到了i的地址

43
00:01:58,239 --> 00:01:59,620
p得到了i的地址

44
00:01:59,620 --> 00:02:03,739
ok那现在的意思是说i是一个普通的变量

45
00:02:04,459 --> 00:02:06,879
p是一个指针

46
00:02:06,879 --> 00:02:10,688
p指向了i不能变的是什么

47
00:02:10,688 --> 00:02:14,489
不能变的是说i不能变吗

48
00:02:14,489 --> 00:02:17,639
不是i依然可以去做

49
00:02:17,639 --> 00:02:20,038
辅之i等于26没问题

50
00:02:20,038 --> 00:02:22,280
i加加没问题

51
00:02:22,579 --> 00:02:23,778
p能变吗

52
00:02:23,778 --> 00:02:24,709
p可以变

53
00:02:24,709 --> 00:02:27,569
我可以以后说p如果我另外还有个变量j

54
00:02:27,569 --> 00:02:31,229
我可以说p等于and j得到j的地址也可以

55
00:02:31,229 --> 00:02:32,520
因为p不是const

56
00:02:32,520 --> 00:02:34,120
那么什么不能变

57
00:02:34,120 --> 00:02:36,759
你不能通过p去做

58
00:02:36,759 --> 00:02:38,560
辅之这件事情

59
00:02:38,560 --> 00:02:39,419
不可以

60
00:02:41,618 --> 00:02:43,539
p可以指向别人

61
00:02:44,219 --> 00:02:46,650
可以被赋予别的值

62
00:02:46,650 --> 00:02:47,969
因为i不是const

63
00:02:47,969 --> 00:02:51,810
但是你通过p去修改i就不可以

64
00:02:51,810 --> 00:02:54,699
所以我们在这个地方说

65
00:02:54,699 --> 00:02:58,819
const int cp的意思是不能通过p去做修改

66
00:02:59,479 --> 00:03:01,060
不能通过p去做修改

67
00:03:01,060 --> 00:03:03,879
但是并没有表明说有以这种方式

68
00:03:03,879 --> 00:03:06,580
我们使得i本身成为不可修改的东西

69
00:03:06,580 --> 00:03:09,280
除非那个i自己也是const

70
00:03:09,280 --> 00:03:10,680
这是两回事情

71
00:03:12,039 --> 00:03:14,699
那我们来看看这里有三种写法

72
00:03:14,699 --> 00:03:17,340
你看我们有int cp对不对

73
00:03:17,340 --> 00:03:19,259
因此这个cost可以出现的位置

74
00:03:19,259 --> 00:03:21,000
就有在最前面

75
00:03:21,000 --> 00:03:23,699
constin的新品可以有int const型

76
00:03:23,699 --> 00:03:24,840
可以有int型

77
00:03:24,840 --> 00:03:26,009
const都可以

78
00:03:26,009 --> 00:03:28,419
那各自是什么意思

79
00:03:29,158 --> 00:03:30,318
我们没有那么多意思

80
00:03:30,318 --> 00:03:31,459
我们这有两种意思

81
00:03:31,459 --> 00:03:34,098
要么他是说指针不可修改

82
00:03:34,098 --> 00:03:36,460
要么是通过指针不可修改

83
00:03:39,158 --> 00:03:41,998
所以大家不用猜了哈

84
00:03:41,998 --> 00:03:42,939
告诉大家答案

85
00:03:43,179 --> 00:03:46,299
判断哪个被const的标志是const

86
00:03:46,299 --> 00:03:47,829
在新号的前面还是后面

87
00:03:47,829 --> 00:03:49,568
如果const在信号的前面

88
00:03:49,568 --> 00:03:53,020
那么它表示说它所指的东西不能被修改

89
00:03:53,020 --> 00:03:55,419
所以这两种形式是一样的啊

90
00:03:55,419 --> 00:03:56,590
这两种形式是一样的

91
00:03:56,590 --> 00:03:58,120
如果cos在新号的后面

92
00:03:58,120 --> 00:04:00,129
那么表示说指针不能被修改

93
00:04:00,129 --> 00:04:02,349
所以标志是星号

94
00:04:02,349 --> 00:04:04,860
在新号的前面和后面是不同的

95
00:04:05,060 --> 00:04:07,460
我们总是可以把一个非const值

96
00:04:07,460 --> 00:04:08,479
转换成一个const

97
00:04:08,479 --> 00:04:11,960
比如说我们的f还是说它需要一个const的

98
00:04:11,960 --> 00:04:13,879
int的指针作为输入

99
00:04:13,879 --> 00:04:16,970
然后我们给了他一个非const没问题

100
00:04:16,970 --> 00:04:19,110
因此这句话其实是什么意思

101
00:04:19,110 --> 00:04:22,579
这句话是说f说你给我一个指针

102
00:04:22,598 --> 00:04:25,358
我保证我在我的函数内部

103
00:04:25,358 --> 00:04:27,839
不会去动这个指针所指的值

104
00:04:28,180 --> 00:04:29,560
这是一种guarantee

105
00:04:29,560 --> 00:04:30,519
对不对

106
00:04:30,519 --> 00:04:33,480
我保证不会去动那个指针所指的值

107
00:04:33,839 --> 00:04:36,180
当然如果你本来就是一个cos的东西

108
00:04:36,180 --> 00:04:38,399
你交给f也没有任何问题啊

109
00:04:38,399 --> 00:04:39,420
也没有任何问题

110
00:04:39,420 --> 00:04:42,579
那这种做法我们用来做什么呢

111
00:04:42,740 --> 00:04:46,819
如果我们要传递的参数的类型比地址还大

112
00:04:46,899 --> 00:04:49,240
当然我们现在想不出来什么比地质还大

113
00:04:49,240 --> 00:04:49,779
除了long

114
00:04:49,779 --> 00:04:50,259
除了double

115
00:04:50,259 --> 00:04:51,699
当然通常遇到long和double

116
00:04:51,699 --> 00:04:52,480
我们也不这么做

117
00:04:52,480 --> 00:04:53,519
没必要这么做

118
00:04:53,519 --> 00:04:55,319
我们后面讲到结构的时候

119
00:04:55,319 --> 00:04:57,540
我们会看到你可以自己定义结构

120
00:04:57,540 --> 00:04:59,009
那个结构里面可以很复杂

121
00:04:59,009 --> 00:05:00,579
可以有很大的东西

122
00:05:00,680 --> 00:05:04,178
那我们就会用指针的方式把它传进去

123
00:05:04,178 --> 00:05:06,699
但是呢我们又害怕传进去之后

124
00:05:06,699 --> 00:05:08,029
你在里面对这些

125
00:05:08,029 --> 00:05:09,889
我的这个外面的这个变量做修改

126
00:05:09,889 --> 00:05:12,709
因此我传一个const的结构给你

127
00:05:12,709 --> 00:05:14,699
const结构的指针给你

128
00:05:15,019 --> 00:05:18,259
其实这个做法就类似于我们传数组

129
00:05:18,259 --> 00:05:18,949
对不对

130
00:05:18,949 --> 00:05:20,079
数组很大

131
00:05:20,819 --> 00:05:21,949
速度可以很大

132
00:05:21,949 --> 00:05:22,879
1000个int

133
00:05:22,879 --> 00:05:23,899
2万个int

134
00:05:23,899 --> 00:05:26,238
那么我传整个数组进函数的时候

135
00:05:26,238 --> 00:05:27,709
我传的其实是指针

136
00:05:27,709 --> 00:05:29,788
我其实以指针的形式传进去

137
00:05:29,788 --> 00:05:32,668
那么当我们用面对自己定义的structure的时候

138
00:05:32,668 --> 00:05:33,869
我们后面会讲到结构

139
00:05:33,869 --> 00:05:35,788
我们会来再来展开讲这件事情

140
00:05:35,788 --> 00:05:38,060
这是我们常用的一种传结构的方法

141
00:05:38,439 --> 00:05:44,079
那么既然const可以出现在指针的各个地方

142
00:05:44,079 --> 00:05:46,240
那既然数组我们讲过

143
00:05:46,240 --> 00:05:49,490
它实质上可以看作是一种const的指针

144
00:05:49,490 --> 00:05:51,709
我在前面再加const什么意思

145
00:05:51,709 --> 00:05:54,759
因为数组已经是const对吧

146
00:05:54,759 --> 00:05:57,519
相当于说这个a本身已经是const

147
00:05:57,519 --> 00:05:58,838
它不能再指向别的数组了

148
00:05:58,838 --> 00:06:00,608
那么前面再加const呢

149
00:06:00,608 --> 00:06:03,338
就意味着它这个数组里头的所有的int

150
00:06:03,338 --> 00:06:03,819
都是数组

151
00:06:03,819 --> 00:06:06,168
也就是这个里面的123456

152
00:06:06,168 --> 00:06:08,809
这个里面的a0 a1 a21 直到a5 

153
00:06:08,809 --> 00:06:09,769
全都是cost

154
00:06:09,769 --> 00:06:11,019
不能再改变了

155
00:06:11,800 --> 00:06:12,540
这样的话呢

156
00:06:12,540 --> 00:06:15,120
这个数组是必须通过这种初始化的形式去

157
00:06:15,120 --> 00:06:16,019
进行赋值的

158
00:06:16,019 --> 00:06:17,459
否则你写出来之后

159
00:06:17,459 --> 00:06:18,720
就没办法再去赋它的值了

160
00:06:18,720 --> 00:06:19,420
对不对

161
00:06:19,939 --> 00:06:21,110
因此呢

162
00:06:21,110 --> 00:06:25,259
如果你要把一个数组传到一个函数里头去

163
00:06:25,439 --> 00:06:28,050
又不希望那个函数修改你的数组

164
00:06:28,050 --> 00:06:30,149
你就可以要求那个函数呢

165
00:06:30,149 --> 00:06:32,160
把它的函数原型写成

166
00:06:32,160 --> 00:06:35,720
说他接收的数组是一个const的数组

167
00:06:36,120 --> 00:06:38,100
这样的话呢在那个sum函数里头

168
00:06:38,100 --> 00:06:41,490
他就不会去对a这个数组做任何的修改

169
00:06:41,490 --> 00:06:43,939
也就不会对你的数组做任何修改了


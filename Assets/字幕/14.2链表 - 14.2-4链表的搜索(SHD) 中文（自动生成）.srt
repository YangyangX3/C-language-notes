1
00:00:05,000 --> 00:00:08,119
接下来下一件事情是我们要遍历这个list

2
00:00:08,119 --> 00:00:10,919
比如说我们在这儿都做完了

3
00:00:11,199 --> 00:00:14,259
然后我们要把已经读到的所有东西

4
00:00:14,259 --> 00:00:15,580
都输出一下

5
00:00:16,318 --> 00:00:17,478
这事要怎么做呢

6
00:00:17,478 --> 00:00:20,989
所以我们需要我们不妨写个for循环

7
00:00:20,989 --> 00:00:25,260
说我们有一个node的变量啊

8
00:00:25,260 --> 00:00:27,120
我们在这个main函数里面没有用过p

9
00:00:27,120 --> 00:00:28,109
所以现在就可以用了

10
00:00:28,109 --> 00:00:31,420
说p呢等于那个list的

11
00:00:32,259 --> 00:00:33,279
然后

12
00:00:39,500 --> 00:00:41,979
这是在列表操作当中

13
00:00:41,979 --> 00:00:44,530
非常非常常见的经典的写法

14
00:00:44,530 --> 00:00:46,039
p等于p的next

15
00:00:46,640 --> 00:00:49,359
然后结束的条件是说这个p还是存在的

16
00:00:49,359 --> 00:00:50,200
只要p还存在

17
00:00:50,200 --> 00:00:51,939
我就能够在for循环里面做事情

18
00:00:51,939 --> 00:00:53,380
比如说我要做的事情

19
00:00:53,380 --> 00:01:00,439
就是print f那个p所指的value

20
00:01:02,079 --> 00:01:06,319
但最后别忘了来个回车结束整件事情

21
00:01:08,200 --> 00:01:10,859
这就是我们叫做的便利

22
00:01:10,859 --> 00:01:14,539
在列表当中从头走到尾

23
00:01:14,539 --> 00:01:18,948
然后把列表当中的每一个节点的值拿出来

24
00:01:18,948 --> 00:01:20,459
输出给别人看

25
00:01:26,239 --> 00:01:29,799
我们怎么把这一段东西再拿出来说

26
00:01:29,799 --> 00:01:32,980
这是链表的一个函数

27
00:01:32,980 --> 00:01:34,039
功能函数

28
00:01:34,120 --> 00:01:38,000
那也许我们可以把它叫做print

29
00:01:38,959 --> 00:01:44,459
我们要给他的是那个list的指针

30
00:01:45,439 --> 00:01:47,140
然后他就可以给我们输出了

31
00:01:47,140 --> 00:01:49,009
ok我们来看看这个print函数

32
00:01:49,009 --> 00:01:50,868
把那段代码单独拿出来以后

33
00:01:50,868 --> 00:01:52,069
我们有了一个print

34
00:01:52,069 --> 00:01:54,108
我们要的是一个list的指针

35
00:01:54,108 --> 00:01:55,000
p list

36
00:01:56,900 --> 00:01:58,780
我们刚才那段抄过来

37
00:01:58,780 --> 00:02:02,739
这里唯一要改的是说这是p list的

38
00:02:04,579 --> 00:02:06,060
剩下的形式一样的

39
00:02:07,480 --> 00:02:08,819
然后同样的

40
00:02:08,819 --> 00:02:10,229
别忘了这段东西

41
00:02:10,229 --> 00:02:12,680
这是函数原型要放在这里

42
00:02:13,899 --> 00:02:16,199
所以我们我们已经有了两个函数

43
00:02:16,199 --> 00:02:18,118
一个函数用来在里面加点东西进去

44
00:02:18,118 --> 00:02:21,080
一个函数用来把整个链表输出给你

45
00:02:21,080 --> 00:02:21,439
看

46
00:02:21,439 --> 00:02:24,620
我们用了非常经典的这种p等于p的next

47
00:02:24,899 --> 00:02:26,818
我没有人说在for循环里面

48
00:02:26,818 --> 00:02:28,979
你这里必须是一个加加减减

49
00:02:28,979 --> 00:02:30,899
我们在讲for循环的就提到这件事情了

50
00:02:30,899 --> 00:02:32,060
不知道你有没有注意到

51
00:02:32,060 --> 00:02:33,439
他不一定是要做加加减减

52
00:02:33,439 --> 00:02:34,520
它可以做各种各样的运算

53
00:02:34,520 --> 00:02:35,659
这也是一种运算

54
00:02:35,659 --> 00:02:39,800
只要让那个条件变量是会变化的

55
00:02:39,800 --> 00:02:41,400
ok那就是合理的

56
00:02:42,800 --> 00:02:44,580
剩下来我们还想要做什么

57
00:02:45,239 --> 00:02:46,139
我们试试看

58
00:02:46,139 --> 00:02:48,269
如果说我们想要做这样的事情

59
00:02:48,269 --> 00:02:53,180
我们想让这个用户呢输入一个数字

60
00:02:56,319 --> 00:02:58,500
然后我们想要在这个列表当中

61
00:02:58,500 --> 00:02:59,460
找到那个数字

62
00:02:59,460 --> 00:03:01,020
如果它存在的话

63
00:03:01,020 --> 00:03:03,340
我们要把它给删除了

64
00:03:04,139 --> 00:03:05,479
我们要找到那个数字

65
00:03:05,479 --> 00:03:06,560
所以第一件事情是

66
00:03:06,560 --> 00:03:08,120
也许我们现在要做的第一件事情说啊

67
00:03:08,120 --> 00:03:09,530
我们要找到那个数字怎么找

68
00:03:09,530 --> 00:03:11,719
所以一样我们需要循环遍历

69
00:03:11,719 --> 00:03:12,379
对不对

70
00:03:13,278 --> 00:03:14,438
我们同样是这个做法

71
00:03:14,438 --> 00:03:16,299
我们先在这里把这个代码给敲完

72
00:03:16,299 --> 00:03:18,158
然后我们再想办法把它分离出去

73
00:03:18,158 --> 00:03:19,538
再看在分离的过程当中

74
00:03:19,538 --> 00:03:21,060
我们还要做些什么样的调整

75
00:03:21,060 --> 00:03:24,330
所以我们有个for循环说p等于那个list

76
00:03:24,330 --> 00:03:28,610
然后说如果这个p所指的那个value

77
00:03:28,610 --> 00:03:31,020
和这个number是相等的

78
00:03:31,259 --> 00:03:33,439
ok那就是我们找到了

79
00:03:34,039 --> 00:03:36,789
然后当然比如说我们break一下啊

80
00:03:36,789 --> 00:03:37,659
为了表示找到了

81
00:03:37,659 --> 00:03:40,718
我们可以来一个标志说啊

82
00:03:40,718 --> 00:03:41,889
找到了的话呢

83
00:03:41,889 --> 00:03:43,718
is found等于一

84
00:03:43,718 --> 00:03:45,519
然后这个for循环结束的时候

85
00:03:45,519 --> 00:03:50,639
我们可以说如果not is放了

86
00:03:50,639 --> 00:03:52,719
那我们输出一个说没找到是吧


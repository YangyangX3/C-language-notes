1
00:00:04,280 --> 00:00:06,110
我们都知道在程序里头啊

2
00:00:06,110 --> 00:00:07,910
你要想表达一个数据

3
00:00:07,910 --> 00:00:09,619
你就需要有个变量

4
00:00:10,679 --> 00:00:14,160
而每个变量呢又都必须有一个类型

5
00:00:14,199 --> 00:00:17,019
我们之前知道c语言有int double

6
00:00:17,019 --> 00:00:19,600
float char等等这些基础类型

7
00:00:19,600 --> 00:00:20,600
还有指针

8
00:00:21,320 --> 00:00:24,699
如果你想表达的数据比较复杂

9
00:00:25,960 --> 00:00:27,300
它不是一个值

10
00:00:27,620 --> 00:00:29,390
比如说你要表达日期

11
00:00:29,390 --> 00:00:31,190
它有年月日三个值

12
00:00:31,190 --> 00:00:34,058
你要表达时间它有十分秒三个值

13
00:00:36,659 --> 00:00:37,979
他可能有姓名

14
00:00:37,979 --> 00:00:39,899
学号啊等等一大堆的数据

15
00:00:40,280 --> 00:00:44,060
但是女儿希望是用一个整体去表达

16
00:00:44,060 --> 00:00:46,198
这么多集合在一起的数据

17
00:00:46,359 --> 00:00:48,880
这个时候我们就需要用到

18
00:00:48,880 --> 00:00:50,679
c语言的一种特殊的东西

19
00:00:50,679 --> 00:00:52,219
叫做结构

20
00:00:52,920 --> 00:00:56,119
一个结构就是一个复合的数据类型

21
00:00:56,119 --> 00:01:00,659
在里面可以有很多各种类型的它的成员

22
00:01:00,659 --> 00:01:04,618
然后我们用一个变量来表达那么多的数据

23
00:01:04,739 --> 00:01:07,079
比如说我们面前的这个程序

24
00:01:07,079 --> 00:01:08,700
在这个程序里面呢

25
00:01:08,700 --> 00:01:11,310
我们声明了一个结构类型

26
00:01:11,310 --> 00:01:13,679
这个结构类型叫做date

27
00:01:15,200 --> 00:01:17,379
在这我们说rap

28
00:01:17,379 --> 00:01:18,700
这是一个关键字啊

29
00:01:21,540 --> 00:01:22,859
有一对大括号啊

30
00:01:22,859 --> 00:01:27,939
这一对大括号里头是这个结构里面的成员

31
00:01:28,200 --> 00:01:32,939
我们在说每一个data的这样的一个structure里头呢

32
00:01:32,939 --> 00:01:34,719
会有一个int型的month

33
00:01:34,719 --> 00:01:36,400
会有一个int型的day

34
00:01:36,400 --> 00:01:38,560
还会有一个int型的页

35
00:01:38,920 --> 00:01:42,879
都会有这样三个它的成员变量

36
00:01:42,879 --> 00:01:43,599
也就是说

37
00:01:43,599 --> 00:01:47,179
将来每一个data里头都会有这样三个东西

38
00:01:47,939 --> 00:01:50,269
那在声明这个结构类型的时候呢

39
00:01:50,269 --> 00:01:52,650
这是一个一条c语言的语句

40
00:01:52,650 --> 00:01:56,609
所以对初学者来说很容易忘掉的一件事情

41
00:01:56,609 --> 00:01:59,060
就是在这个地方是要有封号的

42
00:01:59,500 --> 00:02:01,150
好我们先来看这件事情

43
00:02:01,150 --> 00:02:02,920
假如你忘了这个分号

44
00:02:02,920 --> 00:02:04,739
我们这个程序会怎么样

45
00:02:04,760 --> 00:02:09,139
我们现在这个程序呢是可以正常的编译啊

46
00:02:09,139 --> 00:02:10,400
然后去运行它的

47
00:02:10,400 --> 00:02:12,759
如果我把这个分号给漏了

48
00:02:15,338 --> 00:02:16,859
现在在我的编译器上

49
00:02:16,859 --> 00:02:19,739
他说啊在第九行呢有一个错误啊

50
00:02:19,739 --> 00:02:21,359
这个地方呢需要有一个分号

51
00:02:21,359 --> 00:02:23,379
在这个jar后面要有个分号

52
00:02:23,379 --> 00:02:25,360
你可以拿你的编译器试一下啊

53
00:02:25,360 --> 00:02:26,620
我记得很多年以前

54
00:02:26,620 --> 00:02:29,580
我们用的比较古老的c语言的编译器

55
00:02:29,580 --> 00:02:32,969
不会给你这么明确的一个错误提示

56
00:02:32,969 --> 00:02:36,460
那个错误会让你很摸不着头脑的呃

57
00:02:36,460 --> 00:02:38,289
你可以拿你自己的编译器看一下

58
00:02:38,289 --> 00:02:40,240
它会给出一个什么样的结果

59
00:02:40,240 --> 00:02:42,180
我们刚才看的那个代码

60
00:02:42,338 --> 00:02:43,179
如果你忘了

61
00:02:43,179 --> 00:02:44,588
我们可以回去看一下

62
00:02:44,588 --> 00:02:48,719
它把这个结构呢声明在main函数的内部

63
00:02:48,739 --> 00:02:51,199
但是实际上呢和本地变量一样

64
00:02:51,199 --> 00:02:54,528
如果你在函数内部去声明一个结构的话

65
00:02:54,528 --> 00:02:56,349
那么这个结构类型呢

66
00:02:56,349 --> 00:02:58,520
只能在这个函数内部被使用

67
00:02:58,719 --> 00:03:00,159
如果你希望你的结构

68
00:03:00,159 --> 00:03:01,870
能够被更多的地方去使用

69
00:03:01,870 --> 00:03:03,939
能够被命以外的其他函数

70
00:03:03,939 --> 00:03:06,719
也能够去用这个结构体这种类型的话

71
00:03:06,739 --> 00:03:10,099
那你需要把它放在函数的外面

72
00:03:10,239 --> 00:03:13,239
我们通常都会把结构的声明呢

73
00:03:13,239 --> 00:03:15,098
放在所有函数的外面

74
00:03:15,098 --> 00:03:17,930
让它和函数是相同地位的东西

75
00:03:17,930 --> 00:03:19,550
也就是说它不依赖于它

76
00:03:19,550 --> 00:03:21,289
不依附于任何的函数

77
00:03:21,289 --> 00:03:23,930
它是在所有的函数当中都可以使用的

78
00:03:23,930 --> 00:03:25,729
只要在这个结构体的

79
00:03:25,729 --> 00:03:28,439
这个结构类型的声明的下面

80
00:03:28,439 --> 00:03:31,099
你都可以去使用这种结构类型来做事情

81
00:03:33,599 --> 00:03:35,639
呃我们在做结构声明的时候

82
00:03:35,639 --> 00:03:40,860
其实有很多稍微有变化的这种形式啊

83
00:03:40,860 --> 00:03:43,259
这种是我们刚才看到的

84
00:03:43,259 --> 00:03:45,090
我们去声明了一个结构

85
00:03:45,090 --> 00:03:46,710
一旦声明了结构之后

86
00:03:46,710 --> 00:03:48,810
我们就可以就可以去使用这个结构

87
00:03:48,810 --> 00:03:51,210
我们要去使用这个结构的时候呢

88
00:03:51,210 --> 00:03:54,889
我们要把结构的名字前面跟上rap

89
00:03:54,889 --> 00:03:56,389
来作为一个类型的名字

90
00:03:56,389 --> 00:03:59,090
我们不能单纯拿point来作为一类型的名字

91
00:03:59,090 --> 00:04:00,680
我们必须要说rap point

92
00:04:00,680 --> 00:04:03,099
然后后面跟上变量的名字

93
00:04:03,139 --> 00:04:04,939
在我们这个代码里面也是一样

94
00:04:04,939 --> 00:04:07,209
我们声明了一个straid

95
00:04:07,209 --> 00:04:10,508
然后呢我们就在下面说定义了一个变量啊

96
00:04:10,508 --> 00:04:12,459
叫做raw data today

97
00:04:12,459 --> 00:04:15,349
所以在这一行呢我们定义了一个变量

98
00:04:15,349 --> 00:04:16,490
这个变量的名字叫做today

99
00:04:16,490 --> 00:04:19,220
而它的类型呢是是strong it

100
00:04:19,560 --> 00:04:22,199
接下来我们就可以去使用这个today

101
00:04:22,199 --> 00:04:23,459
去做一些事情了

102
00:04:23,500 --> 00:04:25,750
所以这是我们声明结构的第一种形式

103
00:04:25,750 --> 00:04:28,240
我们单纯去声明一个结构

104
00:04:28,240 --> 00:04:32,088
然后呢在下面用strong point去给出一个呃

105
00:04:32,088 --> 00:04:33,709
给出它的这个变量啊

106
00:04:33,709 --> 00:04:35,509
所以在前面上面去声明结构

107
00:04:35,509 --> 00:04:36,819
下面去定义变量

108
00:04:36,819 --> 00:04:38,470
第二种形式是这样的

109
00:04:38,470 --> 00:04:41,519
我们在后面呢没有名字了

110
00:04:41,879 --> 00:04:42,990
没有名字了

111
00:04:42,990 --> 00:04:44,610
但依然有大括号

112
00:04:44,610 --> 00:04:45,990
依然有变量

113
00:04:45,990 --> 00:04:50,579
然后呢在后面跟了两个变量的名字

114
00:04:51,538 --> 00:04:53,069
在这种情况下

115
00:04:53,069 --> 00:04:56,459
p5 和p to并不是类型的名字

116
00:04:56,459 --> 00:05:00,970
它们就是前面的这种结构类型的两个变量

117
00:05:00,970 --> 00:05:03,370
但是那个结构叫什么名字呢

118
00:05:04,389 --> 00:05:05,699
没有名字

119
00:05:08,160 --> 00:05:10,009
在某些地方我们会遇到

120
00:05:10,009 --> 00:05:11,540
代码会写成这个样子

121
00:05:11,540 --> 00:05:14,259
他只是想要两个变量

122
00:05:14,718 --> 00:05:17,178
这两个变量里面呢有x和y

123
00:05:17,178 --> 00:05:18,199
这是明确的

124
00:05:18,199 --> 00:05:19,939
可是他并不希望

125
00:05:19,939 --> 00:05:22,278
他并不想在很远的将来

126
00:05:22,278 --> 00:05:23,908
继续去使用这种类型

127
00:05:23,908 --> 00:05:25,949
所以他没有给这个类型起名字

128
00:05:25,949 --> 00:05:28,139
他只是说我要p one和p图

129
00:05:28,139 --> 00:05:31,019
当然这种做法不太常见

130
00:05:31,019 --> 00:05:32,850
可是更常见的是这样的

131
00:05:32,850 --> 00:05:35,370
我们可以在rap后面有名字

132
00:05:35,370 --> 00:05:37,470
所以我们在这儿还是声明了

133
00:05:37,470 --> 00:05:39,689
一个新的结构类型

134
00:05:39,689 --> 00:05:40,699
叫做point

135
00:05:41,339 --> 00:05:44,870
可是呢在大结尾的大括号和分号之间

136
00:05:44,870 --> 00:05:46,800
我们放了两个变量的名字

137
00:05:46,939 --> 00:05:50,720
所以这一个地方呢它同时做了两件事情

138
00:05:50,720 --> 00:05:54,038
第一件事情他在声明一个结构叫做point

139
00:05:54,038 --> 00:05:55,119
第二件事情呢

140
00:05:55,119 --> 00:05:57,579
它在定义这种结构的两个变量

141
00:05:57,579 --> 00:05:58,680
p文和p

142
00:05:59,480 --> 00:06:02,560
所以这三种形式都是我们可能会见到的

143
00:06:02,560 --> 00:06:04,240
在程序当中用来声明结构

144
00:06:04,240 --> 00:06:06,040
用来定义它的变量的形式

145
00:06:07,939 --> 00:06:10,839
一旦我们有了一个结构的变量

146
00:06:10,839 --> 00:06:12,639
比如说我们前面那个date

147
00:06:12,639 --> 00:06:14,379
那我们说stranded today today

148
00:06:14,379 --> 00:06:16,019
就是一个结构的变量

149
00:06:18,269 --> 00:06:20,430
我们在声明它的时候所声明的

150
00:06:20,430 --> 00:06:23,370
它的这个结构里面的那些成员变量

151
00:06:23,370 --> 00:06:26,048
我们就可以通过某些方式去访问它

152
00:06:26,048 --> 00:06:29,499
那因此呢我们就会认为说这个today里面呢

153
00:06:29,499 --> 00:06:33,560
其实就是由month day一这三个int组成的

154
00:06:33,560 --> 00:06:35,990
如果你有办法去看到它的内存的话

155
00:06:35,990 --> 00:06:38,839
你就会看到在它的内存里面就是有month

156
00:06:38,839 --> 00:06:41,000
有day有一页这三个int啊

157
00:06:41,000 --> 00:06:44,389
然后呢你可以想办法给它赋一些各自的值

158
00:06:44,389 --> 00:06:45,439
这是结构

159
00:06:45,439 --> 00:06:47,660
每一个结构变量都会具有这样的东西

160
00:06:47,660 --> 00:06:49,779
所以其实我们在说两件不同的事情

161
00:06:49,779 --> 00:06:52,810
我们的这一部分代码是在声明

162
00:06:52,810 --> 00:06:54,819
一种新的类型

163
00:06:54,879 --> 00:06:59,079
而我们的这个代码是在定义这种结构类型

164
00:06:59,079 --> 00:07:00,740
的一个变量

165
00:07:01,259 --> 00:07:04,579
所以结构类型和结构变量是两件事情

166
00:07:04,579 --> 00:07:06,439
我们声明了结构类型之后

167
00:07:06,439 --> 00:07:09,149
可以用这种类型去定义出很多结构变量来

168
00:07:09,149 --> 00:07:12,449
每一个结构变量都按照它所声明的那种样

169
00:07:12,449 --> 00:07:12,779
子

170
00:07:12,779 --> 00:07:13,829
里面会有month

171
00:07:13,829 --> 00:07:14,370
会有day

172
00:07:14,370 --> 00:07:15,220
会有year

173
00:07:15,360 --> 00:07:17,579
那既然这是一个变量

174
00:07:17,579 --> 00:07:19,620
我们当然首先要考虑第一件事情

175
00:07:19,620 --> 00:07:21,300
就是变量的初始化

176
00:07:21,300 --> 00:07:24,110
因为我们知道放在函数内部的变量

177
00:07:24,110 --> 00:07:25,009
我们叫做本地变量

178
00:07:25,009 --> 00:07:27,949
本地变量是没有默认的初始值的

179
00:07:27,949 --> 00:07:29,750
如果你不去给它一个初始值

180
00:07:29,750 --> 00:07:31,658
它就它这里头是乱七八糟的值

181
00:07:31,658 --> 00:07:33,999
所以我们怎么给一个结构变量赋初值呢

182
00:07:33,999 --> 00:07:34,899
如果是一个int

183
00:07:34,899 --> 00:07:35,738
我们要复数值

184
00:07:35,738 --> 00:07:37,069
就让它等于什么什么

185
00:07:37,069 --> 00:07:38,389
如果是一个数组

186
00:07:38,389 --> 00:07:41,029
我们知道你可以给数组变量赋初始值

187
00:07:41,029 --> 00:07:41,959
要用大括号

188
00:07:41,959 --> 00:07:42,889
大括号里面的

189
00:07:42,889 --> 00:07:44,990
只会依次给数组里面的每一个单元

190
00:07:44,990 --> 00:07:49,480
现在对于结构我们还是用大括号来赋初值

191
00:07:49,480 --> 00:07:51,759
当然这个时候写法呢就这样子

192
00:07:51,759 --> 00:07:53,259
我们看到在这个例子程序里面

193
00:07:53,259 --> 00:07:54,339
我们有两种方式

194
00:07:54,339 --> 00:07:57,519
一种方式是说这个today呢等于大括号

195
00:07:57,519 --> 00:07:59,009
然后里面给了三个值

196
00:07:59,009 --> 00:08:01,970
那你的编译器会知道说

197
00:08:01,970 --> 00:08:04,639
这个零七呢是要给第一个month的

198
00:08:04,639 --> 00:08:06,800
三一呢是要给第二个day的

199
00:08:06,800 --> 00:08:09,579
而2014呢是要给第三个一

200
00:08:09,620 --> 00:08:10,939
这是一种方式

201
00:08:10,939 --> 00:08:13,370
你就老老实实把所有的值都放在那儿

202
00:08:13,370 --> 00:08:14,600
就像数组一样

203
00:08:14,600 --> 00:08:15,379
对不对

204
00:08:15,379 --> 00:08:17,180
第二种方式呢是说

205
00:08:17,180 --> 00:08:20,759
我可以具体指明说哪一个是谁的

206
00:08:20,759 --> 00:08:22,860
比如说我可以说点month等于七

207
00:08:22,860 --> 00:08:24,420
于是呢month得到了七

208
00:08:24,420 --> 00:08:26,370
然后我说点12=2014

209
00:08:26,370 --> 00:08:28,379
于是一也得到了2014

210
00:08:28,379 --> 00:08:30,329
可是呢我没有给day复制

211
00:08:30,329 --> 00:08:32,178
那这个时候day会是什么呢

212
00:08:32,960 --> 00:08:35,320
你你记不记得我们在讲数组的时候提到过

213
00:08:35,320 --> 00:08:39,529
如果你给数组赋值的这个给的值的数量

214
00:08:39,529 --> 00:08:41,659
少于它的元素的个数

215
00:08:41,659 --> 00:08:43,318
剩下那些会是什么

216
00:08:43,600 --> 00:08:45,429
我们来试一下这个程序

217
00:08:45,429 --> 00:08:49,090
我们会输出today的三个值

218
00:08:49,090 --> 00:08:51,740
也会输出month的三个值

219
00:08:52,580 --> 00:08:56,379
我们看到呢他说today呢year month day

220
00:08:56,379 --> 00:08:59,029
刚好就是2014731

221
00:08:59,029 --> 00:09:02,509
而month呢因为我们只给了盲这个this month呢

222
00:09:02,509 --> 00:09:04,490
我们只给了一和month的值

223
00:09:04,490 --> 00:09:05,690
所以爷爷和months有志

224
00:09:05,690 --> 00:09:08,139
而那个day呢就是零了

225
00:09:09,919 --> 00:09:13,179
所以这件事情其实和数组的那个初始化的

226
00:09:13,179 --> 00:09:13,600
呃

227
00:09:13,600 --> 00:09:15,159
大概的想法是差不多的

228
00:09:15,159 --> 00:09:17,139
你给的值它会填进去

229
00:09:17,139 --> 00:09:18,578
你没给的值呢

230
00:09:18,679 --> 00:09:20,090
他叫天灵

231
00:09:20,090 --> 00:09:21,200
所以接下来

232
00:09:21,200 --> 00:09:22,879
我们就要来看结构里面的成员了

233
00:09:22,879 --> 00:09:26,259
我们再说我们去声明一个结构类型的时候

234
00:09:26,259 --> 00:09:27,460
那个结构类型里面

235
00:09:27,460 --> 00:09:29,289
你可以给出他的一些成员

236
00:09:29,289 --> 00:09:31,159
我们把它叫做成员变量

237
00:09:31,220 --> 00:09:32,419
从某种角度上看

238
00:09:32,419 --> 00:09:34,000
结构和数组有点像

239
00:09:34,259 --> 00:09:36,990
数组里头呢有很多的单元

240
00:09:36,990 --> 00:09:39,480
结构里头呢有很多的成员

241
00:09:39,480 --> 00:09:41,179
当然不一样的是

242
00:09:42,179 --> 00:09:45,019
数组的单元必须是相同类型的

243
00:09:45,019 --> 00:09:47,879
而结构的成员可以是不同类型的

244
00:09:47,879 --> 00:09:49,080
数组的单元

245
00:09:49,080 --> 00:09:52,950
我们用方括号加里头的index加数字

246
00:09:52,950 --> 00:09:55,659
来访问它当中的每一个单元

247
00:09:55,659 --> 00:09:57,159
当然法问出来可以做左键

248
00:09:57,159 --> 00:09:58,149
也可以做右置

249
00:09:58,149 --> 00:10:00,070
那么对于结构来说呢

250
00:10:00,070 --> 00:10:04,549
我们就是用点这个地方在这个课件里头啊

251
00:10:04,549 --> 00:10:06,289
这个这个这个小圆点

252
00:10:06,289 --> 00:10:07,070
这个period的啊

253
00:10:07,070 --> 00:10:07,970
这个非常的小了

254
00:10:07,970 --> 00:10:10,309
都可能不一定能看到这里有一个小圆点啊

255
00:10:10,309 --> 00:10:11,750
这是这是一个运算符

256
00:10:11,750 --> 00:10:13,328
小圆点也是一个运算符

257
00:10:13,328 --> 00:10:14,719
这个运算符呢

258
00:10:14,740 --> 00:10:18,250
用这个运算符和那个成员的名字

259
00:10:18,250 --> 00:10:19,120
来访问它的成员

260
00:10:19,120 --> 00:10:21,399
比如说they.today啊

261
00:10:21,399 --> 00:10:22,419
就这一点对

262
00:10:22,500 --> 00:10:25,289
那就是访问today里面的那个day

263
00:10:25,289 --> 00:10:26,460
如果我有个student

264
00:10:26,460 --> 00:10:27,360
它里面有first name

265
00:10:27,360 --> 00:10:27,720
student

266
00:10:27,720 --> 00:10:28,710
点first name

267
00:10:28,710 --> 00:10:30,509
我们前面看到过那种point

268
00:10:30,509 --> 00:10:31,889
它有可能p one

269
00:10:31,889 --> 00:10:35,269
我们可以说p问点x p n.y

270
00:10:35,269 --> 00:10:40,129
所以点是用来访问结构里头的成员的

271
00:10:40,129 --> 00:10:41,809
可是你要理解的一件事情是

272
00:10:41,809 --> 00:10:43,629
我们这个时候再说的是什么

273
00:10:43,629 --> 00:10:45,429
是一个结构的变量

274
00:10:45,429 --> 00:10:46,389
你记得我们前面再说

275
00:10:46,389 --> 00:10:48,220
我们有结构类型

276
00:10:48,220 --> 00:10:49,899
有结构变量

277
00:10:49,899 --> 00:10:52,339
结构类型是虚的

278
00:10:52,460 --> 00:10:53,809
它不是实体

279
00:10:53,809 --> 00:10:55,460
你声明了一个结构类型

280
00:10:55,460 --> 00:10:56,720
只是告诉编译器说

281
00:10:56,720 --> 00:10:59,000
所有这种结构类型的变量

282
00:10:59,000 --> 00:11:00,539
将来长得像这个样子

283
00:11:00,539 --> 00:11:02,789
但是结构类型没有东西

284
00:11:02,789 --> 00:11:04,559
所以结构类型点什么什么

285
00:11:04,559 --> 00:11:05,519
那是没有任何意义的

286
00:11:05,519 --> 00:11:09,070
出现在点的左边的一定是一个结构变量

287
00:11:09,070 --> 00:11:10,919
结构变量才是实体

288
00:11:11,019 --> 00:11:13,029
那对结果我们可以做什么运算呢

289
00:11:13,029 --> 00:11:13,779
比如说对数组

290
00:11:13,779 --> 00:11:16,210
我们知道说呃你可以去下标

291
00:11:16,210 --> 00:11:17,840
这是它的一种运算对吧

292
00:11:17,840 --> 00:11:21,019
然后呢呃整个数组变量其实是指针这事儿

293
00:11:21,019 --> 00:11:23,139
我们在指针那儿把它琢磨得很透了

294
00:11:23,139 --> 00:11:24,698
那对于结构来说呢

295
00:11:25,080 --> 00:11:27,509
你当然可以通过点名字

296
00:11:27,509 --> 00:11:28,950
来访问它的某个单元

297
00:11:28,950 --> 00:11:32,099
你也可以拿结构整体来做运算

298
00:11:32,320 --> 00:11:34,179
这个时候它表现出来的特性

299
00:11:34,179 --> 00:11:35,719
和数组完全不一样

300
00:11:36,220 --> 00:11:38,259
你可以用结构的这个变量的名字

301
00:11:38,259 --> 00:11:39,549
来访问整个结构

302
00:11:39,549 --> 00:11:41,839
对于整个结构你可以赋值

303
00:11:41,840 --> 00:11:43,279
你也可以取地址

304
00:11:43,279 --> 00:11:46,009
也可以传给函数的参数

305
00:11:46,009 --> 00:11:48,649
而且这种腐值是数组不能做的

306
00:11:48,649 --> 00:11:50,269
比如说我们可以做这个事情

307
00:11:50,269 --> 00:11:54,360
我们可以说p完等于给来个大括号50

308
00:11:54,360 --> 00:11:58,710
然后前头从这个呃类型强制转换一下

309
00:11:58,710 --> 00:12:02,100
我们知道这个point里头有x和y对不对

310
00:12:02,100 --> 00:12:03,720
所以呢我们给出了两个值

311
00:12:03,720 --> 00:12:04,860
一个是五和一个十

312
00:12:04,860 --> 00:12:06,568
然后用大括号把它括起来

313
00:12:06,568 --> 00:12:09,778
前面的加加上一个强制类型转换

314
00:12:09,778 --> 00:12:10,948
我们告诉编译器说

315
00:12:10,948 --> 00:12:15,370
我们要把这样的两个值强制转换成为

316
00:12:15,370 --> 00:12:17,980
point这种结构的一个变量

317
00:12:17,980 --> 00:12:19,779
然后把它赋给p文

318
00:12:20,059 --> 00:12:22,759
这个事情就相当于p问的x等于y p

319
00:12:22,759 --> 00:12:23,899
p文的x等于五

320
00:12:23,899 --> 00:12:25,789
p问的y等于十这种事情

321
00:12:25,789 --> 00:12:27,200
然后我们还可以做这样的事情

322
00:12:27,200 --> 00:12:28,539
说p问等于p y

323
00:12:29,059 --> 00:12:31,850
这就相当于p wx等于p two的x y

324
00:12:31,850 --> 00:12:33,958
然后p wy等于p two的y

325
00:12:34,320 --> 00:12:37,039
这个事情我们知道数组无法做的

326
00:12:37,039 --> 00:12:38,419
数组不能做这样的运算

327
00:12:38,419 --> 00:12:39,980
数组变量是const的东西

328
00:12:39,980 --> 00:12:41,659
所以你不能把另外一个数组变量

329
00:12:41,659 --> 00:12:42,750
赋给一个数组变量

330
00:12:42,750 --> 00:12:45,690
你也不能让数组变量去等于一个大括号

331
00:12:45,690 --> 00:12:46,649
括起来的那么一个东西

332
00:12:46,649 --> 00:12:47,700
初始化的时候可以做

333
00:12:47,700 --> 00:12:49,470
但是初始化做完之后

334
00:12:49,470 --> 00:12:51,629
这个数组就不能再等于另外的数组了

335
00:12:51,629 --> 00:12:53,840
可是结构可以哦

336
00:12:53,840 --> 00:12:55,100
我们来试一下这件事情

337
00:12:55,100 --> 00:12:56,570
所以呢我们这儿做的事情呢

338
00:12:56,570 --> 00:12:58,940
就是说呃我们做了一个today啊

339
00:12:58,940 --> 00:13:00,799
这是data的一个变量

340
00:13:00,799 --> 00:13:02,620
然后呢我没有初始化的

341
00:13:02,620 --> 00:13:04,899
但是呢我们在后面马上给他做了一个赋值

342
00:13:04,899 --> 00:13:05,379
啊

343
00:13:05,379 --> 00:13:05,799
啊

344
00:13:05,799 --> 00:13:06,279
这个赋值呢

345
00:13:06,279 --> 00:13:07,899
就是用了我们前面说的这个形式是吧

346
00:13:07,899 --> 00:13:10,980
一个大括号表达这个结构的所有的

347
00:13:10,980 --> 00:13:11,879
对应的所有的值

348
00:13:11,879 --> 00:13:14,958
然后呢这个类型转换成为这个stract data

349
00:13:15,399 --> 00:13:16,240
完了以后呢

350
00:13:16,240 --> 00:13:18,429
我们又做了一个strate变量day

351
00:13:18,429 --> 00:13:20,519
我们让don din d啊

352
00:13:20,519 --> 00:13:21,240
day等于today

353
00:13:21,240 --> 00:13:22,740
那做完这个事情之后呢

354
00:13:22,740 --> 00:13:24,840
我们再把这两个变量里面的值都打印出来

355
00:13:24,840 --> 00:13:27,440
显然呢他们应该是一样的啊

356
00:13:27,440 --> 00:13:28,220
他们都是一样的

357
00:13:28,220 --> 00:13:29,480
我们还可以再做一些实验

358
00:13:29,480 --> 00:13:34,200
我们知道说如果如果是数组啊

359
00:13:34,200 --> 00:13:36,990
呃我们通过指针的形式做了这样的复制

360
00:13:36,990 --> 00:13:38,759
但我们知道数组不能做这样的复制是吧

361
00:13:38,759 --> 00:13:40,470
如果比如我们传到函数里头去了

362
00:13:40,470 --> 00:13:46,889
那如果我现在说data这个这个这个呃year啊

363
00:13:46,889 --> 00:13:48,500
等于了2015

364
00:13:48,899 --> 00:13:50,370
那么现在这个时候

365
00:13:50,370 --> 00:13:52,320
day和today是不是还是一样的值呢

366
00:13:52,320 --> 00:13:53,539
我们可以来试一下

367
00:13:53,820 --> 00:13:56,340
我们看到说today呢还是20142

368
00:13:56,340 --> 00:13:57,480
da是2015

369
00:13:57,480 --> 00:14:00,899
这证明说day today是两个完全不同的东西

370
00:14:01,379 --> 00:14:03,120
它们是完全不同的

371
00:14:03,120 --> 00:14:05,289
两个结构的变量

372
00:14:05,289 --> 00:14:06,879
他们有各自自己的值

373
00:14:06,879 --> 00:14:09,129
但是在they等于today这个过程当中

374
00:14:09,129 --> 00:14:10,509
在做这一次复制的时候

375
00:14:10,509 --> 00:14:13,259
they得到了today里头所有的成员的值

376
00:14:13,279 --> 00:14:16,669
另外呢呃和数组非常不一样的地方啊

377
00:14:16,669 --> 00:14:18,529
就是结构变量的名字呢

378
00:14:18,529 --> 00:14:20,340
并不是结构变量的地址

379
00:14:20,340 --> 00:14:23,190
我们知道数组的变量名字就是数组的地址

380
00:14:23,190 --> 00:14:27,000
所以你对数组变量取不取and都一样

381
00:14:27,000 --> 00:14:29,730
它的那个结果啊都是他的那个地址

382
00:14:29,730 --> 00:14:31,230
但是对结构变量不一样

383
00:14:31,230 --> 00:14:32,610
你对结构变量要求取地址

384
00:14:32,610 --> 00:14:34,899
你必须使用and运算符啊

385
00:14:34,899 --> 00:14:36,519
我我们来试一下这个事情

386
00:14:36,580 --> 00:14:37,720
我们在这儿呢

387
00:14:37,720 --> 00:14:43,528
这个有一个指向结构的指针p data

388
00:14:43,528 --> 00:14:46,229
然后呢我们让他取了today的地址

389
00:14:46,229 --> 00:14:47,200
最后呢

390
00:14:47,200 --> 00:14:49,539
我们把这个p data呢作为一个指针

391
00:14:49,539 --> 00:14:50,500
去输出它的指针值

392
00:14:50,500 --> 00:14:52,720
我们先来看一下这个代码运行的结果呢

393
00:14:52,720 --> 00:14:54,759
他会说这个地址是一个什么什么

394
00:14:54,759 --> 00:14:55,828
什么什么好

395
00:14:55,828 --> 00:14:58,469
假如说我现在呢把这个and去掉

396
00:14:58,469 --> 00:15:00,239
那编译的时候呢

397
00:15:00,239 --> 00:15:03,220
就会说这个类型是不对的啊

398
00:15:03,220 --> 00:15:04,480
一个是strong it

399
00:15:04,480 --> 00:15:05,830
一个strong it的指针

400
00:15:05,830 --> 00:15:07,330
所以显然呢啊

401
00:15:07,330 --> 00:15:10,509
这个结构的名字并不是地址啊

402
00:15:10,509 --> 00:15:11,539
并不是地址

403
00:15:12,080 --> 00:15:14,840
我们必须要用and来取到它的地址

404
00:15:14,840 --> 00:15:16,940
才能够得到一个正确的这个地址值


1
00:00:04,459 --> 00:00:06,110
我们再来看看老朋友哈

2
00:00:06,110 --> 00:00:08,570
我们之前看过怎么做数数

3
00:00:08,570 --> 00:00:10,539
怎么判断素数的那个题目

4
00:00:10,739 --> 00:00:12,898
如果我们现在学过函数之后

5
00:00:12,898 --> 00:00:15,669
我们知道我们可以写一个is prime函数

6
00:00:15,669 --> 00:00:16,449
来判断素数

7
00:00:16,449 --> 00:00:16,929
对不对

8
00:00:16,929 --> 00:00:18,550
所以呢我们组程序可以写成这样

9
00:00:18,550 --> 00:00:20,230
我们让用户输入一个数

10
00:00:20,230 --> 00:00:21,640
然后调用expreme

11
00:00:21,679 --> 00:00:23,420
如果is prime说true

12
00:00:23,420 --> 00:00:24,440
ok那我们说它是素数

13
00:00:24,440 --> 00:00:26,160
否则呢我们说它不是素数

14
00:00:26,160 --> 00:00:27,960
那接下来我们要研究的重点是说

15
00:00:27,960 --> 00:00:29,460
那个is prime怎么做对吧

16
00:00:29,460 --> 00:00:30,839
我们知道之前我们判断数字

17
00:00:30,839 --> 00:00:31,920
好像也没用到数组吗

18
00:00:31,920 --> 00:00:33,359
为什么现在放到数组这儿呢

19
00:00:33,359 --> 00:00:34,619
要来讲这个is prime

20
00:00:34,619 --> 00:00:37,270
要来判断判断素数和素质有什么关系呢

21
00:00:37,270 --> 00:00:41,590
我们来看我们最开始做的代码是这样子的

22
00:00:41,590 --> 00:00:43,600
我们怎么去判断那个数字呢

23
00:00:43,600 --> 00:00:49,420
我们从到x减一逐一的来测试

24
00:00:49,420 --> 00:00:54,039
说这个这个数呢能不能把x给整除了

25
00:00:54,039 --> 00:00:55,179
如果可以的话

26
00:00:55,179 --> 00:00:56,659
x就不是数数

27
00:00:57,000 --> 00:00:59,369
所以呢这样子的一个代码呢

28
00:00:59,369 --> 00:01:01,530
我们知道我们循环要走多少遍呢

29
00:01:01,530 --> 00:01:02,460
对于n来说

30
00:01:02,460 --> 00:01:04,539
我们要循环n减一遍对吧

31
00:01:04,680 --> 00:01:05,819
从二开始嘛

32
00:01:05,819 --> 00:01:07,019
所以要走n n减一变

33
00:01:07,019 --> 00:01:08,519
那当然当n很大的时候

34
00:01:08,519 --> 00:01:09,900
我们就可以忽略那个减一

35
00:01:09,900 --> 00:01:13,219
所以我们就认为说这个循环要走n n变

36
00:01:13,620 --> 00:01:15,780
这是我们用来估计这个

37
00:01:15,780 --> 00:01:17,819
这个程序的效率的一种方法

38
00:01:17,819 --> 00:01:20,519
我们关键就在于它循环的次数对不对

39
00:01:20,519 --> 00:01:23,400
因为程序里头别的代码跑起来都很快

40
00:01:23,400 --> 00:01:25,409
if els那种判断跑起来都很快

41
00:01:25,409 --> 00:01:27,329
可循环是要你一遍一遍地跑的

42
00:01:27,329 --> 00:01:28,829
所以当n很大的时候

43
00:01:28,829 --> 00:01:30,289
你的循环的次数就很大

44
00:01:30,289 --> 00:01:32,088
你循环里面重复的语句就会重复

45
00:01:32,088 --> 00:01:33,530
执行的次数就会很多

46
00:01:33,530 --> 00:01:35,810
所以我们通过循环的次数

47
00:01:35,810 --> 00:01:39,019
可以用来表达这个程序的效率怎么样

48
00:01:39,019 --> 00:01:39,769
次数越多

49
00:01:39,769 --> 00:01:41,340
行程序的效率就越差

50
00:01:42,140 --> 00:01:45,950
所以有人就说我可以有另外一个方法

51
00:01:45,950 --> 00:01:48,290
因为我们发现说除了二以外

52
00:01:48,290 --> 00:01:50,140
所有的偶数都不是素数

53
00:01:50,159 --> 00:01:52,560
因此呢我们可以先来一句判断

54
00:01:52,560 --> 00:01:53,879
如果它是数

55
00:01:53,879 --> 00:01:54,689
它是偶数

56
00:01:54,689 --> 00:01:56,040
ok那我们就拿掉了

57
00:01:56,040 --> 00:01:57,439
我们就说这不是素数

58
00:01:57,439 --> 00:01:58,640
偶数我们就不算

59
00:01:58,640 --> 00:01:59,000
对不对

60
00:01:59,000 --> 00:02:00,349
这是这是第一件事情

61
00:02:00,349 --> 00:02:02,269
那如果偶数都拿掉之后

62
00:02:02,269 --> 00:02:05,248
就意味着我们接下去呢因为没有偶数了

63
00:02:05,248 --> 00:02:07,948
接下去呢我们所有的这个数是不是素数的

64
00:02:07,948 --> 00:02:08,549
判断呢

65
00:02:08,549 --> 00:02:12,319
就可以用从三开始的所有的奇数来判断

66
00:02:13,539 --> 00:02:14,759
是不是这样子

67
00:02:15,800 --> 00:02:18,759
如果他能够被某个偶数整除

68
00:02:18,759 --> 00:02:21,120
那么他自己必定也是偶数

69
00:02:23,419 --> 00:02:25,400
啊所以把我速度去掉之后

70
00:02:25,400 --> 00:02:29,280
剩下的我们可以用从三开始逐次加二

71
00:02:29,280 --> 00:02:32,219
来判断它是不是数数

72
00:02:32,219 --> 00:02:33,810
如果是这样子的话呢

73
00:02:33,810 --> 00:02:39,259
就意味着我们只要做二分之n变就可以了

74
00:02:40,359 --> 00:02:41,338
是100的时候

75
00:02:41,338 --> 00:02:43,370
我们循环只要走50遍就可以了

76
00:02:43,370 --> 00:02:44,689
and是1000的时候

77
00:02:44,689 --> 00:02:46,460
我们循环只要走500遍就可以了

78
00:02:46,460 --> 00:02:47,509
和原来相比

79
00:02:47,509 --> 00:02:50,800
我们可以减掉一半的循环时间

80
00:02:50,959 --> 00:02:52,639
这应该是一个很大的进步了

81
00:02:52,639 --> 00:02:53,118
对不对

82
00:02:54,919 --> 00:02:59,719
然后还有人说你不需要走到x减一啊

83
00:02:59,719 --> 00:03:03,979
你走到x的平方根就可以了

84
00:03:03,979 --> 00:03:04,580
好吧

85
00:03:04,580 --> 00:03:06,859
这里的数学推论啊

86
00:03:06,859 --> 00:03:08,359
为什么走到x平方根就可以

87
00:03:08,359 --> 00:03:10,218
这件事情大家去看数学书啊

88
00:03:10,218 --> 00:03:11,658
不是我们c元素能够解决的

89
00:03:11,658 --> 00:03:12,799
我们c语言告诉你说

90
00:03:12,799 --> 00:03:14,159
我们程序该怎么写是吧

91
00:03:14,159 --> 00:03:16,680
所以你不需要走到减一

92
00:03:16,680 --> 00:03:19,599
你走到它的平方根就可以了

93
00:03:19,819 --> 00:03:23,620
这个时候你只要循环x的平方根变

94
00:03:23,819 --> 00:03:25,740
和x的1/2相比

95
00:03:25,740 --> 00:03:26,729
哪个更小呢

96
00:03:26,729 --> 00:03:27,990
显然平方根更小

97
00:03:27,990 --> 00:03:31,379
100的平方根是11 百的

98
00:03:31,379 --> 00:03:33,169
1/2是50 十

99
00:03:33,169 --> 00:03:34,460
远远小于50

100
00:03:34,460 --> 00:03:36,439
所以显然这样子做下来

101
00:03:36,439 --> 00:03:38,419
我们的效率能够更高

102
00:03:38,419 --> 00:03:39,770
但这里有这个问题

103
00:03:39,770 --> 00:03:41,360
这个s qr t怎么来的

104
00:03:41,560 --> 00:03:44,439
为什么会有那么一个叫做s qr t的东西

105
00:03:44,439 --> 00:03:45,460
当然这是个函数

106
00:03:45,460 --> 00:03:46,060
我们学过函数

107
00:03:46,060 --> 00:03:47,800
我们知道这看上去就是一个函数

108
00:03:47,800 --> 00:03:49,039
因为它后面有圆括号

109
00:03:49,039 --> 00:03:50,030
还有一个变量

110
00:03:50,030 --> 00:03:50,780
它就是函数

111
00:03:50,780 --> 00:03:54,099
可是我们怎么知道这个函数是在哪儿

112
00:03:54,099 --> 00:03:55,900
我们怎么能够去用它呢

113
00:03:56,460 --> 00:03:58,159
如果你是linux用户

114
00:03:58,159 --> 00:03:59,479
你用的是macos

115
00:03:59,479 --> 00:04:00,650
你用的是linux

116
00:04:00,650 --> 00:04:02,539
最简单的方案是man

117
00:04:02,539 --> 00:04:07,139
我们可以直接输入ma q r t回车

118
00:04:07,500 --> 00:04:10,800
他会给我们找出一个叫做bsd library

119
00:04:10,800 --> 00:04:12,180
function manu的东西

120
00:04:12,180 --> 00:04:14,520
这个库函数的手册啊

121
00:04:14,520 --> 00:04:17,620
所以man的意思是menu不是男人啊

122
00:04:17,639 --> 00:04:18,660
那么然后呢

123
00:04:18,660 --> 00:04:20,879
他会说这个名字呢叫做sq r t

124
00:04:20,879 --> 00:04:22,709
它是求平方根的函数

125
00:04:22,709 --> 00:04:24,629
它需要include math dh

126
00:04:24,629 --> 00:04:25,949
所以你要用max

127
00:04:25,949 --> 00:04:27,680
你要用s k r t

128
00:04:27,680 --> 00:04:30,949
你就需要去包含这个max d h的头文件

129
00:04:30,949 --> 00:04:31,970
然后他告诉你

130
00:04:31,970 --> 00:04:34,009
s qr t的原型是什么呢

131
00:04:34,009 --> 00:04:35,569
它返回的是个double

132
00:04:35,569 --> 00:04:37,259
他要的参数也是double

133
00:04:37,300 --> 00:04:39,490
因此s qr t会给我们一个double

134
00:04:39,490 --> 00:04:40,720
然后它有个描述说

135
00:04:40,720 --> 00:04:44,500
s qr t函数呢会计算非负的x的

136
00:04:44,500 --> 00:04:46,000
非负的平方根

137
00:04:46,839 --> 00:04:49,589
然后还有一些其他的描述在这里

138
00:04:49,589 --> 00:04:52,459
所以这是我们在unix系统底下

139
00:04:52,459 --> 00:04:54,769
学习c语言的最基本的方式

140
00:04:54,769 --> 00:04:57,019
如果你想知道一个函数该怎么用

141
00:04:57,019 --> 00:04:58,560
你就去me

142
00:04:58,879 --> 00:05:01,699
如果你想知道这个函数有些什么样的输入

143
00:05:01,699 --> 00:05:02,720
有什么样的输出

144
00:05:02,720 --> 00:05:04,059
你就去面它

145
00:05:04,059 --> 00:05:06,970
那么windows用户怎么办

146
00:05:06,970 --> 00:05:08,350
你没有那个man

147
00:05:08,350 --> 00:05:10,959
那你可以用的就是打开浏览器

148
00:05:10,959 --> 00:05:15,699
然后用你喜爱的搜索引擎去搜索这个函数

149
00:05:16,098 --> 00:05:17,418
可能只有这个办法

150
00:05:17,418 --> 00:05:18,738
那s k y t已经很好了

151
00:05:18,738 --> 00:05:20,740
是不是还有没有更好的

152
00:05:21,860 --> 00:05:22,819
肯定还有

153
00:05:22,819 --> 00:05:26,360
要不然我们放在数组在这讲什么呢

154
00:05:26,360 --> 00:05:27,949
下一个方案是

155
00:05:27,949 --> 00:05:34,149
我们不需要拿比x小的这些数

156
00:05:34,149 --> 00:05:36,309
来测试x是不是素数

157
00:05:36,309 --> 00:05:39,488
我们只要拿比x小的素数

158
00:05:39,488 --> 00:05:41,699
来测试它是不是素数就可以了

159
00:05:42,480 --> 00:05:44,779
因为素数是相对比较少的数

160
00:05:44,779 --> 00:05:46,220
大多数字都不是素数

161
00:05:46,220 --> 00:05:46,790
对不对

162
00:05:46,790 --> 00:05:50,660
所以比x小的素数是比较少的数

163
00:05:50,660 --> 00:05:53,060
比它的平方根以下的数还要来得少

164
00:05:53,360 --> 00:05:55,759
但是这就有个前提

165
00:05:55,759 --> 00:05:57,079
我们需要什么

166
00:05:57,079 --> 00:06:00,589
我们需要有一张已有的素数的表

167
00:06:00,589 --> 00:06:02,000
然后根据这张表

168
00:06:02,000 --> 00:06:05,420
我们才能来判断我的这个x是不是素数

169
00:06:05,800 --> 00:06:08,740
所以这个程序呢就特别适合于什么呢

170
00:06:08,740 --> 00:06:14,180
特别适合于说我如果正在构造这么一张表

171
00:06:14,500 --> 00:06:16,959
然后我在构造这个表的过程当中

172
00:06:16,959 --> 00:06:20,290
怎么把新的数据项加到这个表里面去

173
00:06:20,290 --> 00:06:22,199
所以呢这程序是这样的

174
00:06:22,519 --> 00:06:26,160
我们构造了一个速速表

175
00:06:26,160 --> 00:06:29,819
假如说我们想要去算出前100个数字

176
00:06:29,819 --> 00:06:32,660
所以呢我们构造了一个数数表

177
00:06:32,660 --> 00:06:35,120
这个数组里面呢总共有100个元素

178
00:06:35,120 --> 00:06:37,279
每个元素都是我们要放进去的数数

179
00:06:37,279 --> 00:06:39,980
所以将来出现在这个表里面的每一个数

180
00:06:39,980 --> 00:06:42,040
有效的数都是素数

181
00:06:42,180 --> 00:06:44,160
我们让它初始化为二

182
00:06:44,160 --> 00:06:46,500
因为我们知道二是我们已知的第一个数字

183
00:06:46,500 --> 00:06:47,040
以后的

184
00:06:47,040 --> 00:06:47,819
我们可以求出来

185
00:06:47,819 --> 00:06:48,600
当然你要愿意

186
00:06:48,600 --> 00:06:49,980
你可以把开头的几个都写进去

187
00:06:49,980 --> 00:06:50,870
这没关系

188
00:06:50,870 --> 00:06:53,689
然后呢我们说现在它里面已经有一个了

189
00:06:53,689 --> 00:06:55,009
所以那个count变量等于一

190
00:06:55,009 --> 00:06:56,089
它里面已经有一个了

191
00:06:56,089 --> 00:06:57,470
当然我们根据刚才的知识

192
00:06:57,470 --> 00:07:00,279
我们知道这个problem 0会是二

193
00:07:00,279 --> 00:07:02,800
prom一以后所有的东西都会是零了

194
00:07:02,800 --> 00:07:06,819
然后我们从三开始来测试

195
00:07:06,819 --> 00:07:08,588
这个数是不是素数

196
00:07:08,588 --> 00:07:10,509
我们做的事情是说

197
00:07:10,509 --> 00:07:17,500
如果我们用is prime函数发现是一个素数的话

198
00:07:18,379 --> 00:07:23,420
我们就把i加到prime函数里头去

199
00:07:25,579 --> 00:07:29,810
ok为什么这就是把它加到prime函数里头去呢

200
00:07:29,810 --> 00:07:34,180
因为我们把它放在了count那个位置上

201
00:07:34,759 --> 00:07:36,548
count表明的是什么

202
00:07:36,548 --> 00:07:39,639
也就是说我们有那么一个数组了

203
00:07:39,639 --> 00:07:43,170
他的第一格放了一个2c n t

204
00:07:43,170 --> 00:07:46,199
我们的下标就是0123

205
00:07:46,199 --> 00:07:50,639
我们的c n t变量它的值是一而一的

206
00:07:50,639 --> 00:07:52,600
意思就是这个位置

207
00:07:53,620 --> 00:07:59,319
所以当我们在说那个prime c n t

208
00:07:59,319 --> 00:08:01,949
加加等于i的时候

209
00:08:01,949 --> 00:08:03,298
我们做的事情是什么

210
00:08:03,298 --> 00:08:06,829
我们是把i的那个值当第一次i等于三

211
00:08:06,829 --> 00:08:09,290
写到c n t所指的那个位置上去

212
00:08:09,290 --> 00:08:10,970
所以他在这儿了

213
00:08:10,970 --> 00:08:13,100
然后我们还有加加

214
00:08:13,478 --> 00:08:16,298
我们的副作用是让cnt加加

215
00:08:16,298 --> 00:08:17,649
因此cnt变成了二

216
00:08:17,649 --> 00:08:20,420
也就是说cnt指向了他

217
00:08:21,540 --> 00:08:25,319
而不再指责这里了

218
00:08:25,319 --> 00:08:28,980
因此这一行做了两件事情

219
00:08:29,339 --> 00:08:32,609
我们的c nt表达的是这个数组里面

220
00:08:32,609 --> 00:08:34,408
下一次可以写进去的位置

221
00:08:34,408 --> 00:08:37,109
这一行把这个值写到这个位置上去了

222
00:08:37,109 --> 00:08:40,078
然后把c n t移到了下一个位置上去

223
00:08:40,960 --> 00:08:43,470
这是我们常见的一种套路

224
00:08:43,470 --> 00:08:44,490
我们之前说过

225
00:08:44,490 --> 00:08:48,730
我们写学程序的时候要去学习前人的套路

226
00:08:48,730 --> 00:08:50,169
这就是一种常见的套路

227
00:08:51,190 --> 00:08:54,740
我们用这样一个变量来表达

228
00:08:54,740 --> 00:08:57,629
我们在数组当中接下去要写进去的位置

229
00:08:57,629 --> 00:08:58,830
我们把它写进去

230
00:08:58,830 --> 00:09:00,389
然后把这个指针往后移

231
00:09:00,389 --> 00:09:03,599
移为下一次他要写到下一个位置上去

232
00:09:03,820 --> 00:09:07,940
所以如果我们的is prime函数给了我们

233
00:09:07,940 --> 00:09:08,750
这个结果

234
00:09:08,750 --> 00:09:10,399
告诉我们说它是一个数数

235
00:09:10,399 --> 00:09:12,409
我们就会把它写到下一个位置上去

236
00:09:12,409 --> 00:09:15,649
然后我们再来测试下一个i

237
00:09:15,649 --> 00:09:16,759
如果它不是素数

238
00:09:16,759 --> 00:09:17,600
我们就不写进去

239
00:09:17,600 --> 00:09:19,220
我们去测试下一个i

240
00:09:19,220 --> 00:09:21,568
当然最后我们去做那个输出

241
00:09:21,568 --> 00:09:24,679
我们很想看看这个程序运行过程当中

242
00:09:25,639 --> 00:09:28,240
这个数组prime的变化

243
00:09:28,240 --> 00:09:30,259
这些变量count

244
00:09:31,539 --> 00:09:35,740
它的变化是不是如我们所想象的那样子

245
00:09:37,059 --> 00:09:39,059
要看一个程序运行过程当中的

246
00:09:39,059 --> 00:09:40,259
这些变量的变化

247
00:09:40,259 --> 00:09:42,979
当然我们之前用过的一个手段是什么

248
00:09:43,179 --> 00:09:44,110
debug

249
00:09:44,110 --> 00:09:45,820
我们在dev c家家里面

250
00:09:45,820 --> 00:09:47,019
我们可以单步跟踪

251
00:09:47,019 --> 00:09:49,068
可以查看那些变量的值

252
00:09:49,068 --> 00:09:50,778
我们还讲过另外一个技巧

253
00:09:50,778 --> 00:09:52,818
我们可以在程序适当的地方

254
00:09:52,818 --> 00:09:55,038
加入一些适当的输出语句

255
00:09:55,038 --> 00:09:58,049
然后我们可以看到这些变量是怎么变化的

256
00:09:58,049 --> 00:10:00,389
现在我们来试试看做这件事情

257
00:10:00,389 --> 00:10:03,240
在程序的循环的这个地方

258
00:10:04,559 --> 00:10:08,480
我们如果is prime判断出i是一个prime

259
00:10:08,480 --> 00:10:11,568
我们要把这个i加到prime这个数组里头去

260
00:10:11,568 --> 00:10:14,448
prime数组count这些变量都会发生变化

261
00:10:14,448 --> 00:10:17,719
所以在这儿加入一些调试输出的语句

262
00:10:17,719 --> 00:10:18,859
是比较恰当的

263
00:10:18,859 --> 00:10:20,779
那我们来加入一些东西

264
00:10:20,919 --> 00:10:23,289
我们加入了这样一个大括号

265
00:10:23,289 --> 00:10:25,480
在讲函数的时候

266
00:10:25,480 --> 00:10:27,389
我们曾经提到过这件事情

267
00:10:27,389 --> 00:10:28,649
在一个函数里面

268
00:10:28,649 --> 00:10:30,659
我们平白无故的加一对大括号

269
00:10:30,659 --> 00:10:32,850
往往目的是为了做调试

270
00:10:32,850 --> 00:10:35,509
你看这一对大括号的好处是什么呢

271
00:10:35,509 --> 00:10:37,899
在里头我可以有自己的变量i

272
00:10:38,039 --> 00:10:40,740
我的这个i和外面的i

273
00:10:40,740 --> 00:10:43,799
按照我们在函数那一部分所学到的知识

274
00:10:43,799 --> 00:10:45,240
是没有关系的

275
00:10:45,240 --> 00:10:47,419
在这里头i就是我自己的i

276
00:10:47,740 --> 00:10:49,600
在定义这个i之前

277
00:10:49,600 --> 00:10:53,799
我们还可以把外面的那个i输出

278
00:10:54,539 --> 00:10:57,169
直到遇到我自己对你那个i之前

279
00:10:57,169 --> 00:10:59,059
我的i还是外面的i

280
00:10:59,059 --> 00:11:01,779
当然只有c99 能做这个事情好

281
00:11:02,840 --> 00:11:04,899
如果你不是c99 

282
00:11:04,899 --> 00:11:06,460
我们也有办法来解决这个问题

283
00:11:06,460 --> 00:11:09,389
就是我可以在这里再加一对括号

284
00:11:09,389 --> 00:11:11,909
这样子呢这个i是外面的i

285
00:11:11,909 --> 00:11:13,110
这个i呢是我们自己定义的

286
00:11:13,110 --> 00:11:15,179
i也可以解决这个问题

287
00:11:15,779 --> 00:11:17,360
所以我们为什么在调试的时候

288
00:11:17,360 --> 00:11:18,980
要平白无故来这么一对大括号

289
00:11:18,980 --> 00:11:21,440
就是因为我们可以在里面定义自己的变量

290
00:11:21,440 --> 00:11:23,889
而不会影响到外面的那个变量

291
00:11:23,889 --> 00:11:25,450
因为我们在这个里面会改变

292
00:11:25,450 --> 00:11:26,799
这个通过这个for循环

293
00:11:26,799 --> 00:11:28,269
这个a的值是会改变的

294
00:11:28,269 --> 00:11:28,789
对不对

295
00:11:28,789 --> 00:11:31,370
那如果我们没有加入这一对大括号

296
00:11:31,370 --> 00:11:32,990
那我们的这段调试的代码

297
00:11:32,990 --> 00:11:35,789
就会影响我们的变量的这个i

298
00:11:35,789 --> 00:11:36,690
这个变量的值

299
00:11:36,690 --> 00:11:38,789
现在我们加上这段调试的代码以后

300
00:11:38,789 --> 00:11:40,080
就不会影响他了

301
00:11:40,080 --> 00:11:41,429
那么我们这段代码很简单

302
00:11:41,429 --> 00:11:42,330
就是做个for循环

303
00:11:42,330 --> 00:11:43,950
遍历一下prime数组

304
00:11:43,950 --> 00:11:46,179
把prime数组所有的值都输出了

305
00:11:46,179 --> 00:11:47,139
那在这个之前呢

306
00:11:47,139 --> 00:11:48,759
我们还会输出当前的i

307
00:11:48,759 --> 00:11:50,379
当前的count的值

308
00:11:51,399 --> 00:11:53,440
当然为了输出好看

309
00:11:53,440 --> 00:11:55,139
我们还可以再加一个东西

310
00:11:55,220 --> 00:11:58,220
我们用同样的技巧加一对大括号

311
00:11:58,220 --> 00:12:01,318
在这个while循环之前输出一个表头

312
00:12:01,318 --> 00:12:03,778
我们来看看这样运行的效果是什么

313
00:12:03,778 --> 00:12:05,818
我们要求前十个素数

314
00:12:05,818 --> 00:12:10,610
所以呢我们的c nt呢只要到十为止

315
00:12:10,610 --> 00:12:13,179
但是我们的i呢要一直走到29

316
00:12:13,379 --> 00:12:16,899
在最开始我们的这个第一行的表头

317
00:12:16,899 --> 00:12:19,629
表明的是prime number这个数组里面第零位

318
00:12:19,629 --> 00:12:23,039
第一位一直到第九位的那个元素的那个值

319
00:12:23,039 --> 00:12:25,578
那最开始的时候二是我们事先填进去的

320
00:12:25,578 --> 00:12:27,649
三呢就是当i等于三的时候

321
00:12:27,649 --> 00:12:30,799
有我们这里的这取prime count

322
00:12:30,799 --> 00:12:32,570
加等于i去填进去的

323
00:12:32,570 --> 00:12:34,299
当i等于四的时候

324
00:12:34,700 --> 00:12:36,139
因为四不是素数

325
00:12:36,139 --> 00:12:38,240
所以你看它没有往里面填东西进去

326
00:12:38,240 --> 00:12:38,990
五是素数

327
00:12:38,990 --> 00:12:40,580
所以五填在了这个位置上

328
00:12:40,580 --> 00:12:42,379
而c n t呢就已经等于三

329
00:12:42,379 --> 00:12:43,159
c n t等于三

330
00:12:43,159 --> 00:12:45,779
意味着接下去下一个找到的素素

331
00:12:45,779 --> 00:12:48,649
会填在三的那个位置上面啊

332
00:12:48,649 --> 00:12:50,029
然后六不是素数

333
00:12:50,029 --> 00:12:51,740
所以你看c nt没有走

334
00:12:52,120 --> 00:12:53,200
七是素数

335
00:12:53,200 --> 00:12:55,029
所以c n t就加一变成四了

336
00:12:55,029 --> 00:12:57,460
下一个填进去的位置是四而三

337
00:12:57,460 --> 00:13:00,860
这里呢就填进了刚刚找到的这个数数七

338
00:13:00,860 --> 00:13:02,509
所以就这么走下去

339
00:13:02,509 --> 00:13:04,279
数组这样不断的变化

340
00:13:04,279 --> 00:13:06,309
i和cnt的值不断的变化

341
00:13:06,309 --> 00:13:09,759
最后一直到把所有的数组全部填完

342
00:13:09,759 --> 00:13:10,330
填满

343
00:13:10,330 --> 00:13:12,769
把十个素数找出来为止

344
00:13:12,769 --> 00:13:15,938
我们前面看了这么多的求素数的方法

345
00:13:16,799 --> 00:13:18,019
不断的做了改进

346
00:13:18,019 --> 00:13:18,980
让他越来越快

347
00:13:18,980 --> 00:13:21,139
但是呢基本的思路都是一样的

348
00:13:21,139 --> 00:13:22,490
都是说我拿一个数出来

349
00:13:22,490 --> 00:13:26,500
然后呢想办法构造一些东西去让他做整除

350
00:13:26,500 --> 00:13:27,940
看看能不能整除

351
00:13:27,940 --> 00:13:29,559
基本的思路都是一样的

352
00:13:29,559 --> 00:13:32,649
只不过构造就是用来除它的那些数呢

353
00:13:32,649 --> 00:13:33,340
越来越少

354
00:13:33,340 --> 00:13:36,159
我们尽量的使得这个循环越来越快

355
00:13:36,159 --> 00:13:38,100
循环的次数越来越少

356
00:13:38,100 --> 00:13:39,389
但是求速速呢

357
00:13:39,389 --> 00:13:40,919
我们还有另外一个方案

358
00:13:41,240 --> 00:13:43,789
我们可以反一个方向来想这件事情

359
00:13:43,789 --> 00:13:46,370
我们不是去判断这个数是不是数数

360
00:13:46,370 --> 00:13:48,559
我们去构造出一张表来

361
00:13:48,559 --> 00:13:50,360
当这张表构造完成的时候

362
00:13:50,360 --> 00:13:53,059
这张表里面留下的全部都是素数

363
00:13:53,480 --> 00:13:54,919
怎么做这件事情呢

364
00:13:54,919 --> 00:13:56,919
我们的算法列在这

365
00:13:56,919 --> 00:13:58,960
如果我们要构造m以内的数字表

366
00:13:58,960 --> 00:14:01,179
那我们可以先令x为二

367
00:14:01,179 --> 00:14:04,419
然后呢我们就把这个x的所有的倍数

368
00:14:04,419 --> 00:14:06,039
它的两倍三倍四倍五倍

369
00:14:06,039 --> 00:14:10,350
一直到n为止的所有的倍数啊

370
00:14:10,350 --> 00:14:11,070
不是说n倍

371
00:14:11,070 --> 00:14:13,230
而且它的某个倍数到n了

372
00:14:13,230 --> 00:14:14,639
ok再不往下走了

373
00:14:14,639 --> 00:14:18,330
把这些所有的数都标记为非数数对吧

374
00:14:18,330 --> 00:14:20,759
如果的所有的倍数

375
00:14:20,759 --> 00:14:21,419
当然我们都知道

376
00:14:21,419 --> 00:14:23,379
二的所有的倍数都不是素数

377
00:14:23,379 --> 00:14:25,720
那么把这些都标记掉以后

378
00:14:25,720 --> 00:14:30,049
这张表里面剩下三下一个数值留在那儿的

379
00:14:30,049 --> 00:14:30,529
对不对

380
00:14:30,529 --> 00:14:32,120
那我们知道三是素数

381
00:14:32,120 --> 00:14:35,179
于是呢把三的所有的倍数六九

382
00:14:35,279 --> 00:14:37,799
这个12 三的所有的倍数

383
00:14:37,799 --> 00:14:40,559
全部都标记为非素数

384
00:14:40,559 --> 00:14:42,240
当然三自己要留下

385
00:14:42,259 --> 00:14:44,000
那么接下来表演还有谁呢

386
00:14:44,000 --> 00:14:46,159
所以这个做法其实是这样子的

387
00:14:46,159 --> 00:14:51,279
我们已经有2345

388
00:14:51,279 --> 00:14:57,529
678 90 11 12 13

389
00:14:57,529 --> 00:14:59,690
我们把所有的数都先列在那边

390
00:14:59,690 --> 00:15:01,730
先假设他们全都是素数

391
00:15:01,730 --> 00:15:03,850
然后以二为基准

392
00:15:03,850 --> 00:15:06,279
把二的所有的倍数全都删掉

393
00:15:09,259 --> 00:15:09,940
没有了

394
00:15:09,940 --> 00:15:11,440
这些肯定都不是素数

395
00:15:11,440 --> 00:15:13,450
那接下来下一个是三

396
00:15:13,450 --> 00:15:16,720
然后把三的所有的倍数六当然已经删掉了

397
00:15:16,720 --> 00:15:19,279
92也已经删掉了

398
00:15:19,279 --> 00:15:20,799
这些都不是素数了

399
00:15:20,799 --> 00:15:22,419
接下来四要不要用呢

400
00:15:22,419 --> 00:15:23,559
四就不需要用了

401
00:15:23,559 --> 00:15:25,990
我们看下一个没有被删掉的数15

402
00:15:25,990 --> 00:15:27,639
我们认定它是素数

403
00:15:27,639 --> 00:15:30,399
然后从它开始它的倍数十

404
00:15:30,399 --> 00:15:32,169
如果后面还有15的话删掉

405
00:15:32,169 --> 00:15:34,379
然后呢下一个是七

406
00:15:34,379 --> 00:15:36,480
那把七的倍数删掉

407
00:15:36,480 --> 00:15:37,289
下一个11

408
00:15:37,289 --> 00:15:38,460
把11的倍数删掉

409
00:15:38,460 --> 00:15:39,360
下一个是三

410
00:15:39,360 --> 00:15:40,720
把13的倍数删掉

411
00:15:40,720 --> 00:15:44,500
最后留在这个表里面的就是素素

412
00:15:45,799 --> 00:15:47,950
那么根据这个算法

413
00:15:47,950 --> 00:15:52,200
我们可以进一步的写出这样的一个伪代码

414
00:15:52,200 --> 00:15:52,719
来

415
00:15:53,039 --> 00:15:55,139
这笔算法又要再进一步了

416
00:15:55,139 --> 00:15:56,460
因为在算法里面没有说

417
00:15:56,460 --> 00:15:58,139
我们具体要怎么去构造这些东西

418
00:15:58,139 --> 00:15:59,399
具体怎么去实现它

419
00:15:59,399 --> 00:16:02,809
现在呢我们把算法又往前推进了一步

420
00:16:02,809 --> 00:16:04,190
但是还没有到代码那个级别

421
00:16:04,190 --> 00:16:05,559
所以我们把它叫做伪代码

422
00:16:05,559 --> 00:16:07,419
我们先去开辟一个数组

423
00:16:07,419 --> 00:16:08,259
叫做prime

424
00:16:08,259 --> 00:16:10,059
这个数组呢n n是多大呢

425
00:16:10,059 --> 00:16:12,940
就是我们要去求的算的是n以内的

426
00:16:12,940 --> 00:16:14,490
ok那我们就开到n为止

427
00:16:14,490 --> 00:16:16,710
然后我们初始化它所有的元素为一

428
00:16:16,710 --> 00:16:17,250
换句话

429
00:16:17,250 --> 00:16:18,149
这个这个数组呢

430
00:16:18,149 --> 00:16:21,809
其实它要表达的是它的第n个元素

431
00:16:21,809 --> 00:16:22,919
是不是数组

432
00:16:22,919 --> 00:16:24,379
是不是素数啊

433
00:16:24,379 --> 00:16:27,139
所以如果prim 3等于一

434
00:16:27,139 --> 00:16:28,460
就表明三是一个数组

435
00:16:28,460 --> 00:16:30,799
如果prim 12等于零

436
00:16:30,799 --> 00:16:32,000
就表明12不是一个数组

437
00:16:32,000 --> 00:16:33,029
所以是这个意思

438
00:16:33,029 --> 00:16:35,190
那我们还是一开始令x等于二

439
00:16:35,190 --> 00:16:37,049
然后如果x是素素的话

440
00:16:37,049 --> 00:16:39,219
那么对于i等于二

441
00:16:39,379 --> 00:16:43,759
到x乘以i小于n那个地方为止

442
00:16:43,759 --> 00:16:46,850
我们令所有的prime i乘以x都等于零

443
00:16:46,850 --> 00:16:47,450
也就是说

444
00:16:47,450 --> 00:16:49,789
把他的所有的倍数都不要记为非素数啊

445
00:16:49,789 --> 00:16:52,429
然后x加加如果还没有完呢

446
00:16:52,429 --> 00:16:54,059
我就继续重复

447
00:16:55,039 --> 00:16:56,559
所以根据这个伪代码

448
00:16:56,559 --> 00:16:59,179
我们可以写出这样的一个代码来

449
00:16:59,360 --> 00:17:00,860
我们做了一个数组啊

450
00:17:00,860 --> 00:17:01,700
is prime啊

451
00:17:01,700 --> 00:17:03,320
max number这个max number是25

452
00:17:03,320 --> 00:17:06,039
所以我们要去求25以内的数数

453
00:17:06,039 --> 00:17:06,700
然后呢

454
00:17:06,700 --> 00:17:08,019
我们先令这个数

455
00:17:08,019 --> 00:17:11,180
数组里面所有的东西都是一啊

456
00:17:11,180 --> 00:17:12,769
所有的值都是一

457
00:17:12,769 --> 00:17:13,880
接下来呢

458
00:17:13,880 --> 00:17:17,230
我们就来从二开始到x

459
00:17:17,230 --> 00:17:18,970
逐一的来构造这个东西

460
00:17:18,970 --> 00:17:22,059
如果现在这个二是prime number

461
00:17:22,059 --> 00:17:23,440
但我们知道二是prime number

462
00:17:23,440 --> 00:17:24,000
对不对

463
00:17:24,000 --> 00:17:28,829
那么我们对于他的从两倍开始

464
00:17:28,829 --> 00:17:33,160
到这个倍数乘以它小于max number为止

465
00:17:33,160 --> 00:17:36,940
把他所有的这个它的倍数啊都标记为零

466
00:17:36,940 --> 00:17:38,750
也就是都标记为非数数

467
00:17:38,750 --> 00:17:40,130
那接下来x加加

468
00:17:40,130 --> 00:17:42,529
那么如果这个时候x还是一个素数

469
00:17:42,529 --> 00:17:43,970
我们就要再去标记它

470
00:17:43,970 --> 00:17:45,740
如果它已经被标记为非素数

471
00:17:45,740 --> 00:17:46,940
那么显然它的所有的倍数

472
00:17:46,940 --> 00:17:47,960
也已经被标记过了

473
00:17:47,960 --> 00:17:49,470
所以不需要再去标记了

474
00:17:49,470 --> 00:17:50,730
这个循环做完

475
00:17:50,730 --> 00:17:53,130
我们再再来遍历这个is prime数组

476
00:17:53,130 --> 00:17:57,190
把所有是数字的这个is prime还是保留为一的

477
00:17:57,190 --> 00:17:58,779
那么说明它是一个数字

478
00:17:58,779 --> 00:18:00,039
我就把这个i给输出

479
00:18:00,039 --> 00:18:03,549
我们可以在这里面加入一些调试的输出

480
00:18:03,549 --> 00:18:07,519
来看看这里面这个is prime数组是怎么变化的

481
00:18:07,559 --> 00:18:10,140
这是我们加进来的调试的输出

482
00:18:10,140 --> 00:18:11,250
历史的做法

483
00:18:11,250 --> 00:18:13,029
一开始有一段表头

484
00:18:13,029 --> 00:18:15,700
然后在循环的每一轮

485
00:18:15,700 --> 00:18:18,849
我们来看看我们的is prime

486
00:18:18,849 --> 00:18:20,619
这个数组是怎么变化的

487
00:18:20,619 --> 00:18:22,440
我们来看它的输出结果

488
00:18:22,720 --> 00:18:26,559
我们的表头表明的是数组当中的这一个数

489
00:18:26,559 --> 00:18:26,859
啊

490
00:18:26,859 --> 00:18:27,880
是不是素数

491
00:18:27,880 --> 00:18:30,279
那么2341直到24

492
00:18:30,279 --> 00:18:31,660
当它是二的时候

493
00:18:31,660 --> 00:18:35,359
他把所有二的倍数都已经标记为零了

494
00:18:35,460 --> 00:18:36,779
当它是三的时候

495
00:18:36,779 --> 00:18:37,619
因为三是一个素数

496
00:18:37,619 --> 00:18:40,130
所以三的所有的倍数也都标记为零了

497
00:18:40,130 --> 00:18:41,269
当它是四的时候

498
00:18:41,269 --> 00:18:43,009
因为四不是素数

499
00:18:43,009 --> 00:18:44,990
所以他并没有去做标记的动作

500
00:18:44,990 --> 00:18:46,339
当它是五的时候

501
00:18:46,339 --> 00:18:47,869
那么五是一个素数

502
00:18:47,869 --> 00:18:49,279
所以五的所有的倍数

503
00:18:49,279 --> 00:18:54,269
10 15 20也都标记为零了

504
00:18:54,269 --> 00:18:55,980
六的时候六的倍数标记为零

505
00:18:55,980 --> 00:18:58,279
一直到最后到24的时候

506
00:18:58,339 --> 00:18:59,839
24单不是素数

507
00:18:59,839 --> 00:19:00,920
所以也没有做什么标记

508
00:19:00,920 --> 00:19:04,039
但是我们已经走完了所有的这个呃

509
00:19:04,039 --> 00:19:04,970
数字的检验

510
00:19:04,970 --> 00:19:07,269
因此留下来的还带着一的

511
00:19:07,269 --> 00:19:09,039
那么那些就是住宿了

512
00:19:09,079 --> 00:19:12,710
所以我们看到算法的思考方式

513
00:19:12,710 --> 00:19:14,089
不见得和人相同

514
00:19:14,089 --> 00:19:15,690
因为对于人类来说

515
00:19:15,690 --> 00:19:17,640
告诉你素数的定义是什么

516
00:19:17,640 --> 00:19:20,190
告诉你素数就是除了一以外

517
00:19:20,190 --> 00:19:23,039
只能被一和它自己整除的那个数

518
00:19:23,039 --> 00:19:26,180
那么我们去想这个数字的算法

519
00:19:26,180 --> 00:19:26,930
一定会想

520
00:19:26,930 --> 00:19:31,180
我要怎么去破这个这个这个这个题

521
00:19:31,180 --> 00:19:34,579
我要怎么去让他证明他能够被别人认出

522
00:19:34,579 --> 00:19:37,460
但是其实作为计算机来说

523
00:19:37,460 --> 00:19:39,170
也许我们还有其他的方式

524
00:19:39,170 --> 00:19:41,000
我们可以用和人不一样的方式

525
00:19:41,000 --> 00:19:42,019
去想这件事情

526
00:19:42,019 --> 00:19:46,420
我们可以从小到大来构造这么一个数字表


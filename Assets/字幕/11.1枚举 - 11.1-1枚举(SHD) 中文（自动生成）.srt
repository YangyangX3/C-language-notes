1
00:00:04,400 --> 00:00:06,740
我们之前讲过这个概念

2
00:00:06,740 --> 00:00:10,599
如果我们程序当中会出现一些数字

3
00:00:10,878 --> 00:00:13,759
我们应该尽量的用一些符号来表达

4
00:00:13,759 --> 00:00:14,689
这些数字

5
00:00:14,689 --> 00:00:18,699
而不是直接把这些数字出现在程序当中

6
00:00:19,179 --> 00:00:21,039
这样做最大的好处是什么

7
00:00:21,039 --> 00:00:22,000
就是可读性

8
00:00:22,000 --> 00:00:22,690
对不对

9
00:00:22,690 --> 00:00:26,300
别人看你的程序看到的是字母

10
00:00:26,300 --> 00:00:27,469
看到的是单词

11
00:00:27,469 --> 00:00:31,120
它很容易理解这些数字背后是什么意思

12
00:00:31,278 --> 00:00:33,319
所以我们可能会有这样一个程序

13
00:00:33,319 --> 00:00:35,418
说我们要用const int

14
00:00:35,418 --> 00:00:39,018
我们之前学过怎么样去能够做出名字来呢

15
00:00:39,018 --> 00:00:41,979
是要用const int常量的整数

16
00:00:42,240 --> 00:00:44,759
不可修改的整型的变量

17
00:00:44,759 --> 00:00:47,100
所以我们定义了有red yellow green

18
00:00:47,100 --> 00:00:48,579
我们给它每一个都有值

19
00:00:48,579 --> 00:00:49,119
然后呢

20
00:00:49,119 --> 00:00:51,219
我们在程序当中就不需要出现012了

21
00:00:51,219 --> 00:00:52,659
我们是不是kired kiss

22
00:00:52,659 --> 00:00:52,960
yellow

23
00:00:52,960 --> 00:00:53,679
kiss green

24
00:00:53,679 --> 00:00:55,719
在所有可以出现数字的地方

25
00:00:55,719 --> 00:00:57,240
都可以出现这样的符号

26
00:00:57,240 --> 00:01:00,240
这是我们之前所提到过的事情

27
00:01:00,240 --> 00:01:01,140
现在呢

28
00:01:01,140 --> 00:01:03,780
我们可以把这个事情再往前推进一步

29
00:01:03,780 --> 00:01:07,959
我们用一个更加方便的方式去定义

30
00:01:07,959 --> 00:01:10,150
这样一些罗列起来的

31
00:01:10,150 --> 00:01:12,650
可以排列起来的这样的一些名字

32
00:01:12,650 --> 00:01:14,120
我们把它叫做枚举

33
00:01:14,120 --> 00:01:16,069
我们在这儿定义了一个枚举

34
00:01:16,069 --> 00:01:17,750
叫做color这个枚举

35
00:01:17,750 --> 00:01:19,379
并且是有名字的一种量

36
00:01:19,379 --> 00:01:20,579
它里面有三个量

37
00:01:20,579 --> 00:01:22,140
red yellow和green

38
00:01:22,140 --> 00:01:23,700
当我们这样把它做出来以后

39
00:01:23,700 --> 00:01:26,370
rider事实上我们可以不去操心

40
00:01:27,579 --> 00:01:28,900
当然我们需要知道的是

41
00:01:28,900 --> 00:01:29,829
rider是零

42
00:01:29,829 --> 00:01:31,989
yellow就接下去是一green 2

43
00:01:31,989 --> 00:01:35,620
于是呢我们就可以直接使用这些名字

44
00:01:35,620 --> 00:01:37,459
red yellow和green

45
00:01:37,459 --> 00:01:41,099
这是一个更方便的方式去定义一些名字

46
00:01:41,099 --> 00:01:44,099
比用const int要来的方便一些

47
00:01:45,459 --> 00:01:49,739
所以枚举呢是一种用户定义的数据类型

48
00:01:49,739 --> 00:01:52,659
它用一个关键字叫做annual miration

49
00:01:52,659 --> 00:01:54,609
他用这样的语法来表示说

50
00:01:54,609 --> 00:01:57,879
在annual后面要跟上枚举类型的名字

51
00:01:57,879 --> 00:01:58,659
但有的时候

52
00:01:58,659 --> 00:02:00,579
我们也会把这个枚举类型的名字忽略掉

53
00:02:00,579 --> 00:02:01,420
我们后面会提到

54
00:02:01,420 --> 00:02:05,109
因为在c里面呢这个类型作为一种类型

55
00:02:05,109 --> 00:02:06,250
它不是那么的好用

56
00:02:06,250 --> 00:02:07,890
所以也许我们有的时候

57
00:02:07,890 --> 00:02:11,099
我们的目的仅仅是为了要后面的名字

58
00:02:11,118 --> 00:02:11,959
在后面

59
00:02:11,959 --> 00:02:13,579
my animal后面会有大括号

60
00:02:13,579 --> 00:02:13,878
大括号

61
00:02:13,878 --> 00:02:15,258
当然最后还有分号结尾

62
00:02:15,258 --> 00:02:16,818
因为这是一个c语言的语句

63
00:02:16,818 --> 00:02:17,319
对不对

64
00:02:17,319 --> 00:02:19,449
但一个语句它就一定是分号结尾的

65
00:02:19,449 --> 00:02:20,379
里面会有名字

66
00:02:20,379 --> 00:02:22,569
用逗号分隔会有一个一个的名字

67
00:02:22,569 --> 00:02:26,679
那我们通常要的是大括号里面的名字

68
00:02:26,679 --> 00:02:28,479
他们对我们来说就是符号

69
00:02:28,479 --> 00:02:29,240
常量

70
00:02:29,240 --> 00:02:30,819
就是常量的符号

71
00:02:30,819 --> 00:02:32,800
而它们的类型呢一定是int

72
00:02:32,800 --> 00:02:33,460
只能是int

73
00:02:33,460 --> 00:02:34,719
不可能是其他类型啊

74
00:02:34,719 --> 00:02:36,460
它们的值依次从零开始

75
00:02:36,460 --> 00:02:39,360
所以如果我们做了animal color red

76
00:02:39,360 --> 00:02:40,199
yellow green

77
00:02:41,280 --> 00:02:43,740
而yellow呢就是一green就是二

78
00:02:44,939 --> 00:02:46,379
这样我们就创建三个常量

79
00:02:46,379 --> 00:02:47,120
对不对

80
00:02:47,519 --> 00:02:50,519
当我们需要有一些可以排列起来的

81
00:02:50,519 --> 00:02:51,899
常量值的时候

82
00:02:51,899 --> 00:02:56,580
定义枚举的意义就是给这些常量一些名字

83
00:02:57,680 --> 00:03:01,819
所以当我们确定了这样一件事情之后

84
00:03:01,819 --> 00:03:05,840
事实上呢我们在这里说这是在干什么呢

85
00:03:05,840 --> 00:03:07,990
这是在声明这一行

86
00:03:07,990 --> 00:03:11,620
animal color是在声明一种新的数据类型

87
00:03:11,620 --> 00:03:14,500
这种新的数据类型叫做color

88
00:03:14,500 --> 00:03:15,659
叫做color

89
00:03:15,838 --> 00:03:16,919
有了这个之后

90
00:03:16,919 --> 00:03:19,679
我们其实可以把它当做像int float

91
00:03:19,679 --> 00:03:20,878
这样的数据类型来用

92
00:03:20,878 --> 00:03:23,968
当然用的时候你必须带上animal这个字

93
00:03:23,968 --> 00:03:28,219
你必须说f呢要的是animal的color

94
00:03:28,219 --> 00:03:31,939
是叫做color的这种枚举类型啊

95
00:03:31,939 --> 00:03:33,319
你不能把animal丢掉

96
00:03:33,319 --> 00:03:36,879
直直接说color在c语言是不行的啊

97
00:03:36,979 --> 00:03:37,939
往后走

98
00:03:37,939 --> 00:03:40,098
c加加语言支持那个事情

99
00:03:40,098 --> 00:03:40,818
但是c语言不行

100
00:03:40,818 --> 00:03:42,558
c语言你必须把animal跟在那

101
00:03:42,558 --> 00:03:42,618
哎

102
00:03:42,618 --> 00:03:43,399
你怎么f函数

103
00:03:43,399 --> 00:03:46,259
说它的参数就是animal类型的column

104
00:03:46,259 --> 00:03:47,719
然后在main里面

105
00:03:47,719 --> 00:03:48,800
你看我们定义一个变量

106
00:03:48,800 --> 00:03:51,379
说nm color的t t是一个变量

107
00:03:51,379 --> 00:03:52,639
但是我们说它不是int

108
00:03:52,639 --> 00:03:53,419
不是float

109
00:03:53,419 --> 00:03:55,199
它是nm color的变量类型

110
00:03:57,269 --> 00:04:03,319
然后我们可以把f把t的值传给f函数

111
00:04:05,259 --> 00:04:08,080
或者你can f读进来的那个值传给f函数

112
00:04:08,080 --> 00:04:13,909
但是实际上c语言内部anim枚举就是int

113
00:04:13,909 --> 00:04:17,990
所以其实每一个枚举的变量是可以当做int

114
00:04:17,990 --> 00:04:19,310
来进行输入和输出的

115
00:04:19,310 --> 00:04:20,750
你看我们直接输出

116
00:04:20,750 --> 00:04:23,408
我们直接输入都可以做

117
00:04:23,408 --> 00:04:24,788
我们前面说过呃

118
00:04:24,788 --> 00:04:27,338
在这个枚举的定义当中的

119
00:04:27,338 --> 00:04:29,588
所有的这些量都是依次递增的

120
00:04:31,088 --> 00:04:32,550
yellow是一green 2

121
00:04:32,550 --> 00:04:37,790
于是跟在最后一个那个名字后面的那个字

122
00:04:37,790 --> 00:04:42,230
它的值就是前面的技术

123
00:04:42,230 --> 00:04:45,620
你看这时候number colors就等于0123

124
00:04:45,620 --> 00:04:47,029
它就等于三而三呢

125
00:04:47,029 --> 00:04:49,199
刚好说明前面有三个东西

126
00:04:49,199 --> 00:04:50,459
所以这是一种小套路

127
00:04:50,459 --> 00:04:52,680
我们用我们在这个所有的

128
00:04:52,680 --> 00:04:55,100
我们给出有意义的名字的

129
00:04:55,100 --> 00:04:57,560
最后再放一个number of什么什么

130
00:04:57,560 --> 00:04:59,060
然后用那个来表示说

131
00:04:59,060 --> 00:05:02,839
我们这个枚举量里头到底有多少个值啊

132
00:05:02,839 --> 00:05:04,100
到底有多少个符号

133
00:05:04,100 --> 00:05:05,540
然后我们就可以用这个东西

134
00:05:05,540 --> 00:05:07,209
比如用这个东西去定义数组

135
00:05:07,209 --> 00:05:09,579
然后我们也可以用这个东西来判断说

136
00:05:09,579 --> 00:05:11,709
你现在输入的那个呃整数值

137
00:05:11,709 --> 00:05:13,199
是不是在我有效的范围内

138
00:05:13,199 --> 00:05:15,420
我们也可以用这东西来做做便利

139
00:05:15,420 --> 00:05:16,680
比如说我要做个for循环

140
00:05:16,680 --> 00:05:19,689
从零到小于这个number of colors

141
00:05:19,689 --> 00:05:21,038
这是一种啊

142
00:05:21,038 --> 00:05:23,300
在枚举当中我们常用的一种小套路

143
00:05:24,480 --> 00:05:27,019
另外呢我们在声明没质量的时候呢

144
00:05:27,019 --> 00:05:29,480
我们可以指定指我们不是一定要从零开始

145
00:05:29,480 --> 00:05:31,339
比如说我们说rider是一

146
00:05:31,399 --> 00:05:33,019
如果这样等了之后

147
00:05:34,879 --> 00:05:37,250
而他跟跟在他后面的这个yellow呢

148
00:05:37,250 --> 00:05:38,480
就是1+1

149
00:05:38,480 --> 00:05:39,360
也就是二

150
00:05:39,360 --> 00:05:41,579
但是我们还可以让它是离散的

151
00:05:41,579 --> 00:05:43,439
中间会留下很多洞的呃

152
00:05:43,439 --> 00:05:45,000
现在我们这样写的green等于五

153
00:05:46,379 --> 00:05:47,160
yellow是二

154
00:05:47,160 --> 00:05:48,250
然后green是五

155
00:05:48,250 --> 00:05:50,259
中间的三和四就跳过了啊

156
00:05:50,399 --> 00:05:51,839
所以如果我们这样去输出

157
00:05:51,839 --> 00:05:53,100
说code for green

158
00:05:53,100 --> 00:05:55,500
它就会给你看到五这个值

159
00:05:57,540 --> 00:06:02,019
但是枚举实际上只是int呃

160
00:06:02,019 --> 00:06:03,970
历史上有的版本

161
00:06:03,970 --> 00:06:06,620
但现在也许大家也能找到这样的编译器

162
00:06:06,620 --> 00:06:10,959
有的编译器可能会强迫要求你给枚举量呢

163
00:06:10,959 --> 00:06:12,850
呃给枚举的变量赋值的时候

164
00:06:12,850 --> 00:06:14,110
一定要用枚举量

165
00:06:14,110 --> 00:06:15,519
而不能用直接用整数

166
00:06:15,519 --> 00:06:16,990
如果直接用整数赋值

167
00:06:16,990 --> 00:06:18,160
你必须做啊

168
00:06:18,160 --> 00:06:19,540
这个类型转换啊

169
00:06:19,540 --> 00:06:20,620
强制类型转换

170
00:06:20,620 --> 00:06:22,899
但是现在新的编译器

171
00:06:22,899 --> 00:06:25,899
反而在这件事事情上面放松了

172
00:06:26,660 --> 00:06:29,019
我们像这个代码居然是可以做的

173
00:06:29,019 --> 00:06:30,040
我们直接给他一个零

174
00:06:30,040 --> 00:06:32,079
但我们知道卡拉现在这里是没有零的对吧

175
00:06:32,079 --> 00:06:33,100
rap是一零

176
00:06:33,100 --> 00:06:34,360
对他来说是没有意义的

177
00:06:34,360 --> 00:06:37,050
值居然这件事情是可以做的

178
00:06:37,050 --> 00:06:39,180
呃这个原因是

179
00:06:39,180 --> 00:06:42,480
因为虽然枚举类型可以当做类型来使用

180
00:06:42,480 --> 00:06:46,139
但是呢实际上呃人们很少这样用

181
00:06:46,218 --> 00:06:48,588
我们现在在c语言里面用枚举

182
00:06:48,588 --> 00:06:49,939
主要的理由是

183
00:06:49,939 --> 00:06:52,218
因为主要的这个需求是

184
00:06:52,218 --> 00:06:56,329
因为我们需要定义一些排比的这个符号量

185
00:06:56,329 --> 00:06:57,410
那么这个时候呢

186
00:06:57,410 --> 00:06:59,779
用枚举比用const int要来的方便

187
00:06:59,779 --> 00:07:02,269
因为你不需要去写一行行的const int

188
00:07:02,269 --> 00:07:03,800
下来了那些一个枚举

189
00:07:03,800 --> 00:07:06,319
那么那这些值这些这些符号

190
00:07:06,319 --> 00:07:08,259
它们对应的这些值就不存在了

191
00:07:08,279 --> 00:07:11,819
枚举比我们后面会讲的红药来的好

192
00:07:11,819 --> 00:07:13,379
因为枚举有类型

193
00:07:13,379 --> 00:07:14,399
而红是没有类型的

194
00:07:14,399 --> 00:07:15,839
这个事情我们到讲红的时候

195
00:07:15,839 --> 00:07:17,939
我们再来看呃

196
00:07:18,899 --> 00:07:22,129
几乎可以说枚举这种这种东西

197
00:07:22,129 --> 00:07:27,149
在c是一个不那么成功的东西啊

198
00:07:27,149 --> 00:07:29,160
呃在c以前的语言就有枚举了

199
00:07:29,160 --> 00:07:31,680
比如说其实在阿狗就开始出现枚举

200
00:07:31,680 --> 00:07:33,029
帕斯克也有枚举

201
00:07:33,029 --> 00:07:34,649
c以后的其他语言也有枚举

202
00:07:34,649 --> 00:07:36,600
比如说java也有枚举啊

203
00:07:37,579 --> 00:07:40,358
这个他以前那个他以后的做的都比c

204
00:07:40,358 --> 00:07:41,048
做的好

205
00:07:41,048 --> 00:07:45,120
呃但是这个毕竟它是在c语言当中

206
00:07:45,120 --> 00:07:47,759
我们能够做的一种自定义的数据类型啊

207
00:07:47,759 --> 00:07:50,850
呃我我们还是需要去了解c语言有枚举

208
00:07:50,850 --> 00:07:52,889
可是呢我们更需要知道是说

209
00:07:52,889 --> 00:07:53,879
在现实当中

210
00:07:53,879 --> 00:07:55,740
其实人们拿c语言的枚举

211
00:07:55,740 --> 00:07:58,480
主要的目的是定义符号量

212
00:07:58,480 --> 00:08:01,959
而不是呃把它当做一种枚举类型来使用


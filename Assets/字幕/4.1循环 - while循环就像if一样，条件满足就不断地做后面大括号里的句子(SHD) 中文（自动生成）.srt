1
00:00:04,480 --> 00:00:07,870
所以呃如果单纯从c语言的语法上来说

2
00:00:07,870 --> 00:00:09,849
这个娃娃循环很简单

3
00:00:09,849 --> 00:00:12,160
如果我们有一个if语句

4
00:00:12,160 --> 00:00:14,089
比如说我们说if x大于零

5
00:00:14,089 --> 00:00:14,869
在a f里面

6
00:00:14,869 --> 00:00:17,570
我们做的事情是x初等于是x加加啊

7
00:00:17,570 --> 00:00:18,399
n加加

8
00:00:18,399 --> 00:00:21,160
那我们只要把那个衣服换成另外一个关键

9
00:00:21,160 --> 00:00:21,460
字

10
00:00:21,460 --> 00:00:22,329
换成while

11
00:00:22,329 --> 00:00:23,859
它就变成循环了

12
00:00:26,280 --> 00:00:28,399
if f换成y就变成循环了

13
00:00:28,399 --> 00:00:29,969
其他一样啊

14
00:00:29,969 --> 00:00:31,379
while后面一样要有圆括号

15
00:00:31,379 --> 00:00:32,579
圆括号里面要有条件

16
00:00:32,579 --> 00:00:33,780
圆括号后面有大括号

17
00:00:33,780 --> 00:00:34,859
大括号里面有语句

18
00:00:34,859 --> 00:00:38,219
那些语句是条件成立的时候要做的事情

19
00:00:38,219 --> 00:00:40,740
不同的是衣服是一次性的

20
00:00:40,740 --> 00:00:43,530
而while是要反复不断的做的

21
00:00:43,530 --> 00:00:44,628
就这点区别

22
00:00:44,628 --> 00:00:47,029
所以你要是说学循环

23
00:00:47,029 --> 00:00:48,529
从语法的角度

24
00:00:48,529 --> 00:00:49,488
从c语言的语法的角度

25
00:00:49,488 --> 00:00:50,088
这没有什么

26
00:00:50,088 --> 00:00:50,959
这非常简单

27
00:00:50,959 --> 00:00:54,049
但是循环的花头在后面

28
00:00:54,049 --> 00:00:56,299
对于我们刚才的这个娃娃循环

29
00:00:56,299 --> 00:00:59,359
那其实呢它对应的流程图可以是这样子的

30
00:00:59,560 --> 00:01:01,179
我们从外面进来的时候

31
00:01:01,179 --> 00:01:02,840
先看条件是不是满足

32
00:01:02,840 --> 00:01:04,040
如果条件满足的

33
00:01:04,040 --> 00:01:06,140
我们就进入这个后面的大括号

34
00:01:06,140 --> 00:01:09,019
我们把while后面这个大括号起了个名字

35
00:01:09,019 --> 00:01:11,290
叫做循环体啊

36
00:01:11,290 --> 00:01:12,709
循环体嗯

37
00:01:12,709 --> 00:01:14,750
if语句我们好像没有起这种名字啊

38
00:01:14,750 --> 00:01:16,129
没有叫什么if附体啊

39
00:01:16,129 --> 00:01:17,629
如果体啊没有没有这种说法

40
00:01:17,629 --> 00:01:19,909
但循环的我们有一个名字叫循环体啊

41
00:01:19,909 --> 00:01:21,810
所以我后面带括号里面的循环体

42
00:01:21,810 --> 00:01:22,950
所以如果条件满足

43
00:01:22,950 --> 00:01:24,359
那我们就做循环体

44
00:01:24,439 --> 00:01:26,420
当循环体里面的语句做完

45
00:01:26,420 --> 00:01:27,920
比如说这里n n加加已经做完了

46
00:01:27,920 --> 00:01:29,659
到了循环体结束的地方

47
00:01:29,659 --> 00:01:31,579
那么对于while语句来说

48
00:01:31,579 --> 00:01:34,890
我们要做的事情就是要回去啊

49
00:01:34,890 --> 00:01:37,879
回到最头上去做这个条件判断的地方

50
00:01:37,879 --> 00:01:41,090
回去继续再去做一次条件判断

51
00:01:41,090 --> 00:01:43,680
那么条件如果还是满足的

52
00:01:43,680 --> 00:01:45,810
那么我们继续进入循环体再来做

53
00:01:45,810 --> 00:01:46,680
如果不满足

54
00:01:46,680 --> 00:01:49,209
我们就要离开这个循环语句

55
00:01:49,209 --> 00:01:51,239
到它后续的语句去

56
00:01:51,439 --> 00:01:53,390
所以这个叫做循环语句

57
00:01:53,390 --> 00:01:54,319
我们可以看一下

58
00:01:54,319 --> 00:01:57,448
如果我们之前的那种if判断条件判断

59
00:01:57,448 --> 00:01:59,590
那么如果条件满足

60
00:01:59,590 --> 00:02:01,180
我们做一个什么什么事情

61
00:02:01,180 --> 00:02:02,140
如果不满足

62
00:02:02,140 --> 00:02:03,219
我们就离开了

63
00:02:03,219 --> 00:02:04,239
如果条件满足

64
00:02:04,239 --> 00:02:06,759
我们做完之后也离开了

65
00:02:08,459 --> 00:02:11,250
和while的区别仅仅在于一次性

66
00:02:11,250 --> 00:02:13,919
还是要反复多次的做

67
00:02:13,919 --> 00:02:14,909
反复多次

68
00:02:14,909 --> 00:02:18,379
包括要反复多次去判断那个条件

69
00:02:20,080 --> 00:02:22,590
当然这里面非常重要的一件事情

70
00:02:22,590 --> 00:02:24,389
就是在我们的这个循环体内

71
00:02:24,389 --> 00:02:26,939
要有改变条件的机会

72
00:02:26,939 --> 00:02:30,169
否则的话这个循环会出不来

73
00:02:30,169 --> 00:02:32,120
比如说我们来试一下

74
00:02:32,379 --> 00:02:35,139
假如呢我们现在不小心做错了一件事情

75
00:02:35,139 --> 00:02:37,360
我们在这个循环里头啊

76
00:02:37,360 --> 00:02:38,319
x除等于十

77
00:02:38,319 --> 00:02:39,599
这件事情忘记做了

78
00:02:40,099 --> 00:02:41,750
忘记做了会怎么样呢

79
00:02:41,750 --> 00:02:45,439
啊我们可以来运行一下这个程序

80
00:02:45,439 --> 00:02:48,860
看我们还是来调试跟踪运行哈

81
00:02:48,860 --> 00:02:51,099
我们输入一个数352

82
00:02:53,399 --> 00:02:56,209
现在呢n等于零好

83
00:02:56,209 --> 00:02:57,438
我们开始做下一步的事情

84
00:02:57,438 --> 00:03:00,378
下一步下一步x是352

85
00:03:00,378 --> 00:03:01,038
是大于零的

86
00:03:01,038 --> 00:03:02,259
我们进了循环

87
00:03:02,419 --> 00:03:04,219
然后n n加加了

88
00:03:06,319 --> 00:03:08,319
我们继续判断x是不是大于零

89
00:03:10,718 --> 00:03:12,629
一直都是353 15

90
00:03:12,629 --> 00:03:14,069
一直都是35

91
00:03:14,069 --> 00:03:15,990
x从来也没有改变过

92
00:03:15,990 --> 00:03:17,370
while x大于零

93
00:03:17,370 --> 00:03:19,379
x大于零的条件永远是满足的

94
00:03:19,379 --> 00:03:22,050
所以我们看到它不断的在做这个循环

95
00:03:22,050 --> 00:03:23,129
不断的在做这个循环

96
00:03:23,129 --> 00:03:26,060
没有任何机会他可以离开

97
00:03:26,280 --> 00:03:28,050
所以如果循环体内

98
00:03:28,050 --> 00:03:31,060
你没有去改变那个循环判断的条件

99
00:03:31,079 --> 00:03:34,169
这个循环就会成为一种我们叫做死循环

100
00:03:34,169 --> 00:03:35,098
无限循环

101
00:03:35,098 --> 00:03:36,830
因为它出不去了啊

102
00:03:36,830 --> 00:03:38,219
他永远出不去了

103
00:03:39,039 --> 00:03:40,439
这是一个非常典型的例子

104
00:03:40,439 --> 00:03:42,539
说明这是一个非常典型的例子

105
00:03:42,539 --> 00:03:43,740
说明我们的程序

106
00:03:43,740 --> 00:03:46,879
有的时候在语法上是完全正确的

107
00:03:46,879 --> 00:03:49,009
可是它在逻辑上是错误的

108
00:03:49,009 --> 00:03:50,960
就像我们刚才的这个代码

109
00:03:51,099 --> 00:03:53,500
我们忘了在程序里面去改变x

110
00:03:53,899 --> 00:03:55,938
所以程序上语法上当日语

111
00:03:55,938 --> 00:03:57,139
他可以通过编译这样的程序

112
00:03:57,139 --> 00:03:58,038
没有任何的错误

113
00:03:58,038 --> 00:04:00,460
可是逻辑上它是不对的

114
00:04:01,259 --> 00:04:03,830
所以不能以为你的程序通过编译了

115
00:04:03,830 --> 00:04:05,139
你的程序就对了

116
00:04:05,338 --> 00:04:06,359
程序对不对

117
00:04:06,359 --> 00:04:08,699
还有其他的因素决定啊

118
00:04:08,699 --> 00:04:10,378
那顺便说像我们这样的程序

119
00:04:10,378 --> 00:04:11,300
如果写出来了

120
00:04:11,300 --> 00:04:12,620
你有一个无限的循环

121
00:04:12,620 --> 00:04:14,030
一个死循环在程序里面

122
00:04:14,030 --> 00:04:16,730
你把它交到像p a t这样的在线裁判网站

123
00:04:16,730 --> 00:04:19,540
一般来说你会得到一个错误叫做超时

124
00:04:19,939 --> 00:04:22,939
因为裁判系统要等你的程序运行结束

125
00:04:22,939 --> 00:04:24,889
才能够判断你的输出是否正确

126
00:04:24,889 --> 00:04:26,500
而你的程序一直没输出

127
00:04:26,500 --> 00:04:27,459
一直没有结果

128
00:04:27,459 --> 00:04:28,120
一直没有结束

129
00:04:28,120 --> 00:04:29,019
一直没有输出

130
00:04:29,019 --> 00:04:30,399
所以到一定的时间

131
00:04:30,399 --> 00:04:31,959
他把你咔嚓杀掉

132
00:04:31,959 --> 00:04:33,779
然后说你的程序超时了

133
00:04:33,819 --> 00:04:35,980
所以我们的while循环就是这样一种东西

134
00:04:35,980 --> 00:04:37,810
如果我们把while翻译成为当

135
00:04:37,810 --> 00:04:39,670
那么娃娃循环的意思就是说

136
00:04:39,670 --> 00:04:41,050
当条件满足的时候

137
00:04:41,050 --> 00:04:44,079
我们要不断的去重复循环体的语句

138
00:04:44,079 --> 00:04:45,189
当条件满足的时候

139
00:04:45,189 --> 00:04:46,779
我们要进入循环体去做

140
00:04:46,779 --> 00:04:47,709
循环体做完之后

141
00:04:47,709 --> 00:04:50,040
我们要回来再继续判断这个条件

142
00:04:50,120 --> 00:04:53,668
我们在循环开始之前

143
00:04:53,668 --> 00:04:55,528
在进入循环体之前

144
00:04:55,528 --> 00:04:57,509
在做第一轮循环之前

145
00:04:57,509 --> 00:04:58,889
我们先要去判断条件

146
00:04:58,889 --> 00:05:01,168
所以一个while循环是有可能存在

147
00:05:01,168 --> 00:05:01,978
一种情况

148
00:05:01,978 --> 00:05:05,620
也就是这个循环一次也没有得到执行

149
00:05:05,620 --> 00:05:08,139
如果程序运行到这个while的地方

150
00:05:08,139 --> 00:05:09,250
条件是不满足的

151
00:05:09,250 --> 00:05:11,839
那么这个循环体就一次都不会被执行

152
00:05:13,560 --> 00:05:16,129
这个圆括号里面的条件

153
00:05:16,129 --> 00:05:18,160
跟衣服那个条件是一个意思

154
00:05:18,300 --> 00:05:20,519
当你条件成立的时候

155
00:05:20,519 --> 00:05:22,379
循环要继续下去

156
00:05:22,379 --> 00:05:23,910
当你条件不成立的时候

157
00:05:23,910 --> 00:05:25,120
循环就不做了

158
00:05:25,478 --> 00:05:26,709
面对这段代码

159
00:05:26,709 --> 00:05:28,298
我们可以再想一想的事情

160
00:05:28,298 --> 00:05:30,249
是你看在我们的程序当中啊

161
00:05:30,249 --> 00:05:34,259
我们出现了两处n加加x x等于十

162
00:05:34,538 --> 00:05:38,319
在这里有一处在循环里面

163
00:05:38,319 --> 00:05:39,399
还有一次

164
00:05:39,819 --> 00:05:41,199
当然因为我们现在这个循环

165
00:05:41,199 --> 00:05:43,420
是从那一连串的衣服语句改造过来的

166
00:05:43,420 --> 00:05:45,069
所以现在长成这个样子了

167
00:05:45,069 --> 00:05:47,389
那我们能不能把这两处省略掉

168
00:05:47,389 --> 00:05:49,550
因为我们知道循环体内的语句

169
00:05:49,550 --> 00:05:50,629
反正也要做的嘛

170
00:05:50,629 --> 00:05:53,689
在循环之前做的那个n加加x除等于十

171
00:05:53,689 --> 00:05:55,040
循环体内还是要做的嘛

172
00:05:55,040 --> 00:05:58,100
我们能不能把它改成这个样子

173
00:05:59,540 --> 00:06:01,000
wow x大于零

174
00:06:01,000 --> 00:06:02,560
n加加x除以10y轴

175
00:06:02,560 --> 00:06:05,379
就不要再去做那一次n加加的事情了

176
00:06:06,160 --> 00:06:08,160
那我们把程序改成这个样子

177
00:06:08,160 --> 00:06:09,699
他到底还对不对呢

178
00:06:10,480 --> 00:06:13,139
它的运行结果是不是符合我们的预期呢

179
00:06:14,560 --> 00:06:15,420
如果有电脑

180
00:06:15,420 --> 00:06:16,259
那么当然这很简单

181
00:06:16,259 --> 00:06:17,879
我们可以直接去试一下

182
00:06:17,879 --> 00:06:18,899
试一些数据

183
00:06:18,899 --> 00:06:20,069
如果没有电脑

184
00:06:20,069 --> 00:06:21,180
怎么来做这个事情

185
00:06:21,180 --> 00:06:23,300
怎么来判断这个程序是对的还是错的

186
00:06:23,439 --> 00:06:25,870
或者说如果我现在给你这个程序了

187
00:06:25,870 --> 00:06:27,639
我让你说出这个程序是干什么的

188
00:06:27,639 --> 00:06:29,199
或者说这个程序的运行结果是什么

189
00:06:29,199 --> 00:06:30,160
比如说我告诉你

190
00:06:30,160 --> 00:06:31,089
我输入了352

191
00:06:31,089 --> 00:06:32,680
你告诉我他会输出什么

192
00:06:33,079 --> 00:06:36,019
在纸上算没有电脑的时候

193
00:06:36,019 --> 00:06:37,579
这时候你要怎么去

194
00:06:37,579 --> 00:06:40,560
能够运行出这么一个程序的结果来

195
00:06:40,560 --> 00:06:41,430
没有电脑

196
00:06:41,430 --> 00:06:43,889
所以我们可以用人脑来模拟计算机的运行

197
00:06:43,889 --> 00:06:45,759
在纸上列出所有的变量

198
00:06:45,759 --> 00:06:47,920
然后随着程序的不断的进展

199
00:06:47,920 --> 00:06:49,930
把每一个变量的变化的情况

200
00:06:49,930 --> 00:06:51,449
记在这个表格上面

201
00:06:51,449 --> 00:06:52,769
当程序运行结束的时候

202
00:06:52,769 --> 00:06:54,000
模拟运行结束的时候

203
00:06:54,000 --> 00:06:55,529
留在最下面的变量的值

204
00:06:55,529 --> 00:06:57,199
就是变量最终的结果

205
00:06:57,959 --> 00:06:59,600
我们来试一下这件事情

206
00:06:59,600 --> 00:07:02,519
所以现在呢呃面对这样的一个程序

207
00:07:02,699 --> 00:07:04,920
那我们做的事情就是呃

208
00:07:04,920 --> 00:07:07,800
我们要列出这个程序当中所有的变量啊

209
00:07:07,800 --> 00:07:10,629
然后呢一步一步的去修改这些变量的值

210
00:07:10,629 --> 00:07:12,639
让我们看到我们会有些什么样的变量呢

211
00:07:12,639 --> 00:07:15,220
我们有x我们还有n

212
00:07:16,000 --> 00:07:19,620
那么假如说我们x输入进来是352n

213
00:07:19,620 --> 00:07:21,100
一开始是等于零的

214
00:07:21,920 --> 00:07:25,149
那么接下来呢我们就运行到了这个地方

215
00:07:25,149 --> 00:07:25,870
在第九行

216
00:07:25,870 --> 00:07:27,610
我们看到说他要判断x是不是大于零

217
00:07:27,610 --> 00:07:28,689
现在x是大于零的

218
00:07:28,689 --> 00:07:30,889
于是呢我们就进入了这个循环

219
00:07:30,889 --> 00:07:31,850
那么在下一行呢

220
00:07:31,850 --> 00:07:33,769
他要做的第一件事情是让n n加加

221
00:07:33,769 --> 00:07:35,009
又是n等于一了

222
00:07:35,009 --> 00:07:36,689
接下来大家做的第二件事情上

223
00:07:36,689 --> 00:07:39,740
a让x除等于是于是x等于35

224
00:07:40,019 --> 00:07:42,939
然后循环要继续

225
00:07:43,199 --> 00:07:45,720
要回到这个第九行y的这个地方

226
00:07:45,720 --> 00:07:47,699
那么这个时候呢我们又判断x是大于零的

227
00:07:47,699 --> 00:07:49,259
现在是x大于零是满足的

228
00:07:49,259 --> 00:07:52,139
于是进去要做的事情是n加加n等于二

229
00:07:52,139 --> 00:07:54,120
然后x要求等于十

230
00:07:54,120 --> 00:07:55,158
x等于了三

231
00:07:55,158 --> 00:07:57,319
然后循环又继续回去

232
00:07:57,319 --> 00:07:59,869
因为这时x还是三是大于零的

233
00:07:59,869 --> 00:08:01,278
那么我们又进了这个循环

234
00:08:01,278 --> 00:08:04,579
于是我们让n等于n加加n得到了三

235
00:08:04,579 --> 00:08:07,339
然后这个时候x呢除等于是x

236
00:08:07,339 --> 00:08:10,560
3÷10就是零了

237
00:08:11,000 --> 00:08:13,160
然后现在我们在第12行

238
00:08:13,160 --> 00:08:15,769
我们还得要回到while的第九行去

239
00:08:15,769 --> 00:08:18,439
在第九行我们判断一下x是大于零吗

240
00:08:18,439 --> 00:08:19,689
已经不满足了

241
00:08:19,689 --> 00:08:21,069
这时候出来诶

242
00:08:21,069 --> 00:08:24,370
我们发现说m3 正好就是结果

243
00:08:24,370 --> 00:08:28,720
这个表格就是我们在纸上模拟计算机运行

244
00:08:28,720 --> 00:08:32,090
然后一步一步地把变量的变化写出来

245
00:08:32,090 --> 00:08:34,190
从中来分析程序是怎么运行的

246
00:08:34,190 --> 00:08:35,740
非常有效的方式

247
00:08:36,139 --> 00:08:38,840
但是呢往往我们就是这么一个

248
00:08:38,840 --> 00:08:40,740
352是不够的啊

249
00:08:40,740 --> 00:08:41,879
大家在做习题的时候

250
00:08:41,879 --> 00:08:44,730
也知道我们的习题是有很多组数据的

251
00:08:44,730 --> 00:08:47,610
这些数据的目的是为了全方面的检验

252
00:08:47,610 --> 00:08:48,870
你的代码是否正确

253
00:08:48,870 --> 00:08:50,309
你光是一个352

254
00:08:50,309 --> 00:08:51,399
这个是不够的

255
00:08:51,580 --> 00:08:52,899
所以我们的测试程序呢

256
00:08:52,899 --> 00:08:54,759
常常要使用一些边界的数据

257
00:08:54,759 --> 00:08:56,679
比如说有效范围两端的啊

258
00:08:56,679 --> 00:08:58,139
或者特殊的倍数啊

259
00:08:58,139 --> 00:08:59,879
啊我们试了352是个三位数

260
00:08:59,879 --> 00:09:01,620
那么要不要试试35 两位数

261
00:09:01,620 --> 00:09:02,039
对不对啊

262
00:09:02,039 --> 00:09:04,600
要不要试试3526 四位数

263
00:09:04,600 --> 00:09:05,230
对不对呀

264
00:09:05,230 --> 00:09:07,480
还有比如说一般我们都会去试试个位数

265
00:09:07,480 --> 00:09:08,169
对不对

266
00:09:08,169 --> 00:09:09,370
然后十对不对

267
00:09:09,370 --> 00:09:10,629
这是个特殊的倍数对吧

268
00:09:10,629 --> 00:09:11,599
零对不对

269
00:09:11,599 --> 00:09:12,918
当然负数可以不用管

270
00:09:12,918 --> 00:09:13,999
因为题目已经说了

271
00:09:13,999 --> 00:09:14,899
是正整数好

272
00:09:14,899 --> 00:09:15,558
我们来看一下

273
00:09:15,558 --> 00:09:17,089
对于我们这个程序程序

274
00:09:17,089 --> 00:09:18,859
如果是十它会是怎么样

275
00:09:18,859 --> 00:09:20,500
如果是个位数会怎么样

276
00:09:20,500 --> 00:09:23,559
同样的我们还是在纸上去模拟哈

277
00:09:23,559 --> 00:09:26,778
呃这个这个手段大家一定要掌握

278
00:09:26,778 --> 00:09:30,220
因为这个是很有用的程序分析的一种方法

279
00:09:30,220 --> 00:09:32,409
你不能什么东西都拿到计算机上去

280
00:09:32,409 --> 00:09:33,490
逐步的去走

281
00:09:33,490 --> 00:09:36,129
要有的时候有的程序不是那么方便

282
00:09:36,129 --> 00:09:39,009
可以在计算机上直接像我们之前那样点bug

283
00:09:39,009 --> 00:09:40,679
一一步步去跟踪的啊

284
00:09:40,679 --> 00:09:42,600
有的甚至你还是需要在纸面上

285
00:09:42,600 --> 00:09:44,220
能够去理解他的行为的

286
00:09:44,220 --> 00:09:45,740
如果我们现在试的是十

287
00:09:46,179 --> 00:09:48,899
那应该是n等于零

288
00:09:48,980 --> 00:09:50,120
到了第九行

289
00:09:50,120 --> 00:09:51,620
我们判断x是大于零的

290
00:09:51,620 --> 00:09:52,460
因此我们进了循环

291
00:09:52,460 --> 00:09:53,720
进了循环n就加一了

292
00:09:53,720 --> 00:09:54,649
等于一了

293
00:09:54,649 --> 00:09:56,840
然后x等于x除以十

294
00:09:56,840 --> 00:09:58,059
再说x等于一

295
00:09:58,100 --> 00:09:59,539
我们再回到第九行

296
00:09:59,539 --> 00:10:00,559
x大于等于一

297
00:10:00,559 --> 00:10:01,159
是大于零的

298
00:10:01,159 --> 00:10:02,059
我们又进去了

299
00:10:02,059 --> 00:10:03,019
所以n等于二

300
00:10:03,019 --> 00:10:04,779
而x就变成了零

301
00:10:04,799 --> 00:10:07,649
所以再回来就到到第九行的时候就出来了

302
00:10:07,649 --> 00:10:08,940
于是我们得到n等于二

303
00:10:08,940 --> 00:10:10,409
显然这是正确的结果

304
00:10:10,409 --> 00:10:11,879
假如我们现在x等于五

305
00:10:11,879 --> 00:10:12,659
这是个个位数

306
00:10:12,659 --> 00:10:13,889
一开始n等于零

307
00:10:13,889 --> 00:10:15,078
x大于五

308
00:10:15,078 --> 00:10:16,399
x等于五大于零

309
00:10:16,399 --> 00:10:17,538
第九局我们进去了

310
00:10:17,538 --> 00:10:18,469
n等于一了

311
00:10:18,469 --> 00:10:21,379
然后这时候x等于五

312
00:10:21,379 --> 00:10:22,339
5÷10

313
00:10:22,339 --> 00:10:24,960
我们得到了零循环

314
00:10:24,960 --> 00:10:27,009
再回到第九行的时候啊

315
00:10:27,009 --> 00:10:28,029
x大于等于零

316
00:10:28,029 --> 00:10:29,049
是不大于零的

317
00:10:29,049 --> 00:10:29,830
于是我们就出来了

318
00:10:29,830 --> 00:10:31,330
最后我们的结果n等于一

319
00:10:31,330 --> 00:10:33,220
显然这也是正确的结果

320
00:10:33,220 --> 00:10:33,850
出于好奇

321
00:10:33,850 --> 00:10:35,078
我们再试一个数

322
00:10:35,078 --> 00:10:36,639
如果x等于零

323
00:10:38,139 --> 00:10:39,369
如果x等于零

324
00:10:39,369 --> 00:10:41,919
那么n一开始是等于零的

325
00:10:41,919 --> 00:10:43,929
然后我们到了第九行的时候

326
00:10:43,929 --> 00:10:46,379
我们发现说零不大于零

327
00:10:46,379 --> 00:10:47,340
因此我们就出来了

328
00:10:47,340 --> 00:10:48,659
这个循环一次也没进去过

329
00:10:48,659 --> 00:10:49,169
对不对

330
00:10:49,169 --> 00:10:52,019
这时候我们说它的位数是零位数

331
00:10:52,100 --> 00:10:53,360
这好像有些问题

332
00:10:53,360 --> 00:10:53,960
对不对

333
00:10:53,960 --> 00:10:55,190
当然呃

334
00:10:55,190 --> 00:10:56,090
如果较真

335
00:10:56,090 --> 00:10:58,159
我们题目是说正整数

336
00:10:58,159 --> 00:11:00,620
那理论上正整数应该不包括零

337
00:11:00,620 --> 00:11:03,860
但是如果我们想要让我们的程序

338
00:11:03,860 --> 00:11:05,240
去数一下零的话

339
00:11:05,240 --> 00:11:08,120
我们现在这个代码是数不出零是几位数的

340
00:11:08,120 --> 00:11:10,019
因为零应该是一位数

341
00:11:10,240 --> 00:11:12,759
如果我们将来想要把我们这个数数的范围

342
00:11:12,759 --> 00:11:14,139
扩大到所有的整数的话

343
00:11:14,139 --> 00:11:15,539
还包括负数的话

344
00:11:15,580 --> 00:11:18,440
那么显然零也是要能够数的

345
00:11:18,440 --> 00:11:20,360
因为要数负数相对简单一点

346
00:11:20,360 --> 00:11:21,500
我们可以判断一下

347
00:11:21,500 --> 00:11:22,220
如果它小于零

348
00:11:22,220 --> 00:11:23,000
把它变成正的

349
00:11:23,000 --> 00:11:24,169
然后再来数就可以了

350
00:11:24,169 --> 00:11:25,649
可是零处理不了

351
00:11:25,649 --> 00:11:27,360
我们现在的这个写法

352
00:11:27,360 --> 00:11:28,710
处理不了零的问题

353
00:11:28,710 --> 00:11:30,929
我们之前的那个写法是不是可以呢

354
00:11:30,929 --> 00:11:35,389
如果说我们把这两句在外面也存在一下

355
00:11:35,389 --> 00:11:38,600
在外面它也有n加加和n除以十

356
00:11:38,600 --> 00:11:40,779
这时候对于零的情况来说

357
00:11:40,879 --> 00:11:42,679
因为n一开始加加了

358
00:11:42,679 --> 00:11:44,479
所以它有个一在哪

359
00:11:45,460 --> 00:11:46,679
然后循环没进去

360
00:11:46,679 --> 00:11:47,100
没关系

361
00:11:47,100 --> 00:11:48,570
他总会有个一的

362
00:11:48,570 --> 00:11:51,120
如果这是个位数

363
00:11:51,580 --> 00:11:55,659
那一开始的时候n是零

364
00:11:55,659 --> 00:11:58,120
然后然后在第九句和第十句的时候

365
00:11:58,120 --> 00:11:59,620
我们已经让n加了一

366
00:11:59,620 --> 00:12:00,519
然后x等于零了

367
00:12:00,519 --> 00:12:01,840
所以虽然循环没进去

368
00:12:01,840 --> 00:12:05,480
但是我们也是能处理好那个零的问题

369
00:12:05,480 --> 00:12:06,679
或者个位数的问题

370
00:12:06,679 --> 00:12:08,679
当然其他位数的问题也都是对的

371
00:12:10,759 --> 00:12:13,870
或者如果我们不是这么做

372
00:12:13,870 --> 00:12:14,980
我们换一个思路

373
00:12:14,980 --> 00:12:16,149
我们也可以这样说

374
00:12:16,149 --> 00:12:17,559
我们先拿到x之后

375
00:12:17,559 --> 00:12:17,980
判断一下

376
00:12:17,980 --> 00:12:20,719
如果x大于零

377
00:12:20,719 --> 00:12:23,139
我们要做这个while

378
00:12:25,559 --> 00:12:29,339
那l4 的话呢我们让n等于一

379
00:12:30,059 --> 00:12:31,940
这也是个思路对吧

380
00:12:31,940 --> 00:12:33,080
这也是个思路

381
00:12:33,080 --> 00:12:36,120
但是不管怎么说

382
00:12:36,120 --> 00:12:38,850
这个程序都需要有一些特殊的代码

383
00:12:38,850 --> 00:12:42,759
对x等于零这种情况做特殊的判断

384
00:12:42,759 --> 00:12:44,320
其实呢除了我们刚才说的

385
00:12:44,320 --> 00:12:47,500
在纸上去模拟那个变量程序的运行

386
00:12:47,500 --> 00:12:48,970
写作变量的变化之外呢

387
00:12:48,970 --> 00:12:50,529
我们还有一个做调试的手段

388
00:12:50,529 --> 00:12:53,179
就是在程序适当的地方插入print f

389
00:12:53,179 --> 00:12:56,120
让他把一些变量的值打印给我们看

390
00:12:56,120 --> 00:12:58,519
这样的我们不需要去启动那个debug

391
00:12:58,519 --> 00:13:00,139
依然呢我们可以看到程序里面

392
00:13:00,139 --> 00:13:01,460
随着循环的每一轮的进展

393
00:13:01,460 --> 00:13:02,779
的一些变量是怎么变化的

394
00:13:02,779 --> 00:13:03,980
我们来试一下这件事情

395
00:13:03,980 --> 00:13:06,440
现在呢我们在这个while循环语句里面呢

396
00:13:06,440 --> 00:13:07,970
啊插入了一句print f

397
00:13:07,970 --> 00:13:10,309
所以呢循环的每一轮他会给我输出

398
00:13:10,309 --> 00:13:12,259
说当这一轮结束的时候

399
00:13:12,259 --> 00:13:14,299
x和n的值是多少

400
00:13:14,299 --> 00:13:15,769
我们来看一下它是怎么变化的

401
00:13:15,769 --> 00:13:17,389
现在啊为了方便起见呢

402
00:13:17,389 --> 00:13:19,789
我们就设这个x4 是352

403
00:13:19,789 --> 00:13:22,120
我就不从外面输入了

404
00:13:23,580 --> 00:13:25,899
我们看到第一次的时候

405
00:13:25,899 --> 00:13:27,970
第一轮循环x等于35

406
00:13:27,970 --> 00:13:28,720
n等于一

407
00:13:28,720 --> 00:13:29,919
第二轮循环x等于三

408
00:13:29,919 --> 00:13:30,610
n等于二

409
00:13:30,610 --> 00:13:32,620
第三轮循环n x等于零

410
00:13:32,620 --> 00:13:33,399
n等于三

411
00:13:33,399 --> 00:13:36,419
最后呢结果就是那个三位数

412
00:13:36,820 --> 00:13:38,860
也就是说循环每一轮的值啊

413
00:13:38,860 --> 00:13:40,960
我们通过程序的输出就直接看到了

414
00:13:40,960 --> 00:13:42,700
而不是在debug里面看

415
00:13:42,700 --> 00:13:44,309
如果我们来看一下它

416
00:13:44,309 --> 00:13:46,519
如果对于个位数会怎么样

417
00:13:47,940 --> 00:13:49,070
各位说的时候

418
00:13:49,070 --> 00:13:50,419
第一轮进去x

419
00:13:50,419 --> 00:13:52,460
因为三除以等于是已经变成零了

420
00:13:52,460 --> 00:13:53,480
所以x是零啊

421
00:13:53,480 --> 00:13:55,070
x一于是一就出来了

422
00:13:55,070 --> 00:13:56,299
如果是零呢

423
00:13:57,600 --> 00:13:58,460
如果是零

424
00:13:58,460 --> 00:14:01,220
我们就发现根本这句话就没有被输出啊

425
00:14:01,220 --> 00:14:02,480
这句话根本就没有被输出

426
00:14:02,480 --> 00:14:03,500
没有被输出

427
00:14:03,500 --> 00:14:06,950
那就说明这个循环就没有进去过啊

428
00:14:06,950 --> 00:14:08,679
然后我们得到的是零

429
00:14:09,320 --> 00:14:12,100
所以除了你可以用这种呃

430
00:14:12,100 --> 00:14:13,659
print f输出变量的值以外

431
00:14:13,659 --> 00:14:15,639
其实我们还经常做这样的小事情

432
00:14:15,639 --> 00:14:18,198
比如说如果在这里放一句说print f

433
00:14:18,620 --> 00:14:20,399
说in loop

434
00:14:22,720 --> 00:14:24,480
就只是一个字符串啊

435
00:14:24,480 --> 00:14:25,769
没有带任何变量的值

436
00:14:25,769 --> 00:14:26,730
那目的是什么呢

437
00:14:26,730 --> 00:14:29,370
目的是为了在程序的这个输出当中呢

438
00:14:29,370 --> 00:14:31,590
可以看到我程序到这个地方了啊

439
00:14:31,590 --> 00:14:33,750
有的时候我们开玩笑呢经常会来说啊

440
00:14:33,750 --> 00:14:34,289
这里是什么呢

441
00:14:34,289 --> 00:14:36,059
这里是啊here

442
00:14:36,179 --> 00:14:37,080
然后一个here

443
00:14:37,080 --> 00:14:38,519
we go here 2 here 1

444
00:14:38,519 --> 00:14:39,899
然后here 2 here s啊

445
00:14:39,899 --> 00:14:40,500
呃

446
00:14:40,500 --> 00:14:42,600
这这这是也是我们经常用的一些调试的手

447
00:14:42,600 --> 00:14:42,720
段

448
00:14:42,720 --> 00:14:45,250
是用来表明说我程序到哪了

449
00:14:45,250 --> 00:14:46,570
我不去开debug

450
00:14:46,570 --> 00:14:47,409
因为有的时候呢

451
00:14:47,409 --> 00:14:50,519
debug不是一定能开的出来的

452
00:14:50,519 --> 00:14:52,559
特别当我们在调试一些比较复杂的

453
00:14:52,559 --> 00:14:53,669
交互的东西的时候

454
00:14:53,669 --> 00:14:55,470
那我们就采用这样的一些手段

455
00:14:55,470 --> 00:14:57,149
让他输出一些句子

456
00:14:57,149 --> 00:14:58,559
告诉我们程序运行到哪了

457
00:14:58,559 --> 00:14:59,250
程序运行的时候

458
00:14:59,250 --> 00:15:00,649
里面的变量是什么样子的

459
00:15:00,649 --> 00:15:02,809
这是一种非常常用的调试手段

460
00:15:02,809 --> 00:15:04,669
当然千万别忘了一件事情

461
00:15:04,669 --> 00:15:08,120
当你把这样的程序要提交到ppt上去

462
00:15:08,120 --> 00:15:09,200
裁判的时候

463
00:15:09,200 --> 00:15:12,340
你一定要加上注释

464
00:15:12,340 --> 00:15:14,649
把这些用来做调试的句子给注释掉

465
00:15:14,649 --> 00:15:15,899
要不然p t说你错了


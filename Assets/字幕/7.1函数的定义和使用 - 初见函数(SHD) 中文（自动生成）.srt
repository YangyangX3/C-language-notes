1
00:00:04,339 --> 00:00:06,139
还记不记得我们第四周的呃

2
00:00:06,139 --> 00:00:07,280
这道编程题啊

3
00:00:07,280 --> 00:00:10,300
我们要去求素数的和

4
00:00:10,619 --> 00:00:12,119
那么这个程序写出来

5
00:00:12,119 --> 00:00:12,960
我们是这样子的

6
00:00:12,960 --> 00:00:16,000
我们在外面有一个循环啊

7
00:00:16,000 --> 00:00:17,890
从m走到

8
00:00:17,890 --> 00:00:19,960
那么在这个循环的里面呢

9
00:00:19,960 --> 00:00:21,739
我们做了这样一件事情

10
00:00:22,099 --> 00:00:24,228
我现在高量产的这部分代码

11
00:00:24,228 --> 00:00:28,539
他做的事情是去判断我们的这个i

12
00:00:28,539 --> 00:00:30,460
就是从m找到n的那个数

13
00:00:30,460 --> 00:00:34,579
i当时的那个i它是不是素数

14
00:00:34,799 --> 00:00:36,299
如果它是素数

15
00:00:36,299 --> 00:00:38,189
那么我们下面要去做一件事情

16
00:00:38,189 --> 00:00:39,240
如果他不是素素

17
00:00:39,240 --> 00:00:40,740
那么我们就去看下一个数

18
00:00:40,740 --> 00:00:44,219
所以高亮起来的这段代码做的事情

19
00:00:44,219 --> 00:00:47,159
就是去求素数啊

20
00:00:47,159 --> 00:00:50,189
实际上我们在更早的课程里头啊

21
00:00:50,189 --> 00:00:53,549
已经给过专门怎么去求一个数

22
00:00:53,549 --> 00:00:54,990
是不是素数的代码

23
00:00:54,990 --> 00:00:57,359
也就是这里高亮的这部分代码

24
00:00:58,219 --> 00:01:00,979
这种代码现在放在这个循环里面呢

25
00:01:01,240 --> 00:01:04,930
就使得我们整个这个外面这一层循环很大

26
00:01:04,930 --> 00:01:07,950
你看这么多行都是在做那一个循环

27
00:01:07,950 --> 00:01:10,590
而实际上呢这里面的这一部分代码呢

28
00:01:10,590 --> 00:01:13,140
它的功能又非常的单纯

29
00:01:13,900 --> 00:01:15,269
在这种情况下

30
00:01:15,269 --> 00:01:16,799
我们有一个做法

31
00:01:16,799 --> 00:01:18,569
我们可以这样子来做

32
00:01:18,569 --> 00:01:22,480
我们把这一段代码取出来

33
00:01:23,299 --> 00:01:27,280
然后在前面呢我们说我们有这样一个东西

34
00:01:27,280 --> 00:01:29,140
然后把这段代码拷贝进来

35
00:01:29,140 --> 00:01:30,780
当然我们要调整一下缩进

36
00:01:30,780 --> 00:01:32,918
然后我们把这个名字给改一改

37
00:01:32,918 --> 00:01:34,478
接着在这儿呢

38
00:01:34,478 --> 00:01:36,338
我们把这段代码已经移出去了

39
00:01:36,338 --> 00:01:38,039
我们就可以把它改成说

40
00:01:40,620 --> 00:01:42,099
这是做了什么呢

41
00:01:42,840 --> 00:01:45,980
我们在上面以这样的方式

42
00:01:45,980 --> 00:01:48,899
定义了一个我们自己的函数

43
00:01:49,340 --> 00:01:51,469
我们之前不是没用过函数

44
00:01:51,469 --> 00:01:52,579
我们的第一个程序

45
00:01:52,579 --> 00:01:53,239
hello world

46
00:01:53,239 --> 00:01:54,469
我们就用print

47
00:01:54,469 --> 00:01:58,620
print f是c语言的标准库里面的一个函数

48
00:01:58,620 --> 00:02:01,650
所谓的系统给的我们可以拿来用

49
00:02:01,650 --> 00:02:04,799
现在呢我们要开始学怎么样写自己的函数

50
00:02:04,799 --> 00:02:06,459
这就是我们自己的一个函数

51
00:02:06,519 --> 00:02:08,590
有了这个函数定义了以后

52
00:02:08,590 --> 00:02:11,550
我们再组成主函数里面

53
00:02:11,550 --> 00:02:13,169
我们做的事情就比较简单

54
00:02:13,169 --> 00:02:14,899
我们做了一个简单的循环

55
00:02:14,899 --> 00:02:18,498
从i从m到n去做遍历循环的每一步

56
00:02:18,498 --> 00:02:21,318
我们都要用我们自己写的函数去告诉我们

57
00:02:21,318 --> 00:02:23,659
说这个i它是不是素数

58
00:02:24,599 --> 00:02:26,539
所以我们看到说我们的这个循环

59
00:02:26,539 --> 00:02:28,340
就变得很简洁

60
00:02:28,340 --> 00:02:30,319
没几行就好了

61
00:02:30,719 --> 00:02:33,539
而我们的这个is prime函数呢

62
00:02:33,539 --> 00:02:37,110
它又是一个可以将来用到其他地方去的

63
00:02:37,110 --> 00:02:38,849
如果将来有别的程序说啊

64
00:02:38,849 --> 00:02:40,169
也要去做输出判断

65
00:02:40,169 --> 00:02:42,240
ok我们可以把这个函数拿出来

66
00:02:42,240 --> 00:02:43,650
放到别的代码那里去

67
00:02:43,650 --> 00:02:46,330
也就是说我们从最初这么长长的

68
00:02:46,330 --> 00:02:48,210
什么都在一起的那么一个代码

69
00:02:48,210 --> 00:02:51,419
变成了从当中去抽出了那么一段

70
00:02:51,419 --> 00:02:54,659
用来判断某个i是不是素数的代码

71
00:02:54,659 --> 00:02:57,150
然后把原来的代码改造成

72
00:02:57,150 --> 00:03:00,199
要去使用我们自己写的那个函数的样子

73
00:03:00,459 --> 00:03:02,019
这就是函数

74
00:03:02,019 --> 00:03:03,659
我们可以再看一个例子

75
00:03:03,899 --> 00:03:08,008
如果现在要写一个程序去求一到十

76
00:03:08,008 --> 00:03:09,538
也就是1+2+3+4

77
00:03:09,538 --> 00:03:10,468
一直加到十

78
00:03:10,468 --> 00:03:11,519
它的和

79
00:03:11,519 --> 00:03:15,819
然后还要去求20+21+23

80
00:03:15,819 --> 00:03:16,900
加22+23

81
00:03:16,900 --> 00:03:18,580
一直加到30的和

82
00:03:18,580 --> 00:03:21,009
然后还要去求35加到45的和

83
00:03:21,009 --> 00:03:23,789
这个时候怎么去写代码

84
00:03:23,789 --> 00:03:25,469
要去算一到十的和

85
00:03:25,469 --> 00:03:27,210
很容易我们只要写个for循环就可以了

86
00:03:27,210 --> 00:03:27,990
我们来试一下

87
00:03:27,990 --> 00:03:29,849
我们很容易就可以写出这样的代码

88
00:03:29,849 --> 00:03:32,610
你也想得到我在写这个代码的过程当中

89
00:03:32,610 --> 00:03:36,319
一定用了一个最古老的技巧

90
00:03:36,319 --> 00:03:39,439
就是ctrl c ctrl v拷贝粘贴

91
00:03:39,439 --> 00:03:40,009
对不对

92
00:03:40,009 --> 00:03:41,629
我先写出了这一段

93
00:03:41,629 --> 00:03:44,620
这一段写出来以后拷贝一下

94
00:03:44,620 --> 00:03:46,000
然后粘贴一下

95
00:03:46,000 --> 00:03:46,900
得到这一段

96
00:03:46,900 --> 00:03:48,349
把当中这些数字改改

97
00:03:48,349 --> 00:03:50,030
于是就有了第二个循环

98
00:03:50,030 --> 00:03:51,469
然后再拷贝粘贴一下

99
00:03:51,469 --> 00:03:52,430
得到第三段

100
00:03:52,430 --> 00:03:54,139
最后这个程序给我们结果

101
00:03:54,139 --> 00:03:57,128
可是我们看到在我们的这个代码当中

102
00:03:57,128 --> 00:04:00,840
我们有三段几乎一模一样的代码

103
00:04:01,179 --> 00:04:03,278
本来就是拷贝粘贴出来的嘛对吧

104
00:04:03,278 --> 00:04:04,929
唯一的区别就是当中的数字

105
00:04:04,929 --> 00:04:06,990
其他的东西都是一模一样的

106
00:04:06,990 --> 00:04:11,370
这件事情在程序当中我们叫做code deprecation

107
00:04:11,370 --> 00:04:12,599
代码复制

108
00:04:13,740 --> 00:04:16,839
代码复制是程序质量不良的表现

109
00:04:16,860 --> 00:04:18,959
这说明你的代码的质量不好

110
00:04:18,959 --> 00:04:20,519
你的程序的质量不好

111
00:04:20,519 --> 00:04:21,120
为什么呢

112
00:04:21,120 --> 00:04:23,100
因为复制的代码意味着

113
00:04:23,100 --> 00:04:24,720
将来如果你要去做修改

114
00:04:24,720 --> 00:04:26,110
你要去做维护的时候

115
00:04:26,110 --> 00:04:29,050
你很可能遇到不是指维护一处的问题

116
00:04:29,050 --> 00:04:30,360
你要维护很多处

117
00:04:30,759 --> 00:04:32,889
所以这是代码质量不良的表现

118
00:04:32,889 --> 00:04:34,569
那我们可以这样来做这件事情

119
00:04:34,569 --> 00:04:37,810
就像我们前面把判断是不是素数提出来

120
00:04:37,810 --> 00:04:39,170
另外做一个函数一样

121
00:04:39,170 --> 00:04:42,420
我们可以把这里重复的这个代码提出来

122
00:04:44,519 --> 00:04:45,588
像这个样子

123
00:04:45,588 --> 00:04:47,319
我们做了一个sum函数

124
00:04:47,538 --> 00:04:48,949
做了一个sum函数

125
00:04:48,949 --> 00:04:53,779
这个函数呢可以帮我们去做这个for循环

126
00:04:54,019 --> 00:04:56,779
然后我们的主函数就变得很简单了

127
00:04:56,779 --> 00:04:57,920
我们只要调用sum

128
00:04:57,920 --> 00:05:00,850
给它121~11和十这两个数

129
00:05:00,850 --> 00:05:03,658
于是他会帮我们算出一加到十

130
00:05:03,658 --> 00:05:05,098
我们给他20 30

131
00:05:05,098 --> 00:05:07,499
这两个数它会把我们算出20加到30

132
00:05:07,499 --> 00:05:08,999
我们给他35~45套方程

133
00:05:08,999 --> 00:05:10,000
30~45

134
00:05:11,439 --> 00:05:16,019
我们拿出了重复的部分去做了一个函数

135
00:05:16,019 --> 00:05:17,279
做了一个自己的函数出来

136
00:05:17,279 --> 00:05:19,839
这个自己的函数就可以用来

137
00:05:20,579 --> 00:05:22,720
在各种地方去使用它


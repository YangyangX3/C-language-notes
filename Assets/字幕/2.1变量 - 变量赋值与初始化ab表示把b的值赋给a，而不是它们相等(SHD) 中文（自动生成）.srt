1
00:00:04,620 --> 00:00:06,330
我们继续来研究说这一行

2
00:00:06,330 --> 00:00:10,019
这一行呢我们定义了一个变量名字叫做price

3
00:00:10,019 --> 00:00:11,099
类型是int

4
00:00:11,099 --> 00:00:13,529
还有一个初始值在这一行里面

5
00:00:13,529 --> 00:00:14,970
我们看到我们出现了一个符号

6
00:00:14,970 --> 00:00:16,019
这个等号

7
00:00:16,259 --> 00:00:18,989
这个等号呢在这里做的事情

8
00:00:18,989 --> 00:00:22,120
是叫做腐殖等号

9
00:00:22,120 --> 00:00:24,039
右边的值交给了等号

10
00:00:24,039 --> 00:00:26,079
左边把右边的东西交给了左边

11
00:00:26,079 --> 00:00:27,368
这样负值啊

12
00:00:27,368 --> 00:00:29,289
那么这个price等于零呢

13
00:00:29,289 --> 00:00:31,088
如果我们抛掉开头那个int的话

14
00:00:31,088 --> 00:00:31,809
price等于零

15
00:00:31,809 --> 00:00:32,588
它是一个式子

16
00:00:32,588 --> 00:00:33,128
对不对

17
00:00:33,128 --> 00:00:35,219
这个式子表示说

18
00:00:35,219 --> 00:00:36,719
把右边的值赋给左边的变量

19
00:00:36,719 --> 00:00:37,590
右边的值是零

20
00:00:37,590 --> 00:00:39,240
左边的变量呢是price

21
00:00:39,240 --> 00:00:41,469
所以就price得到了零这个值

22
00:00:41,469 --> 00:00:44,530
因为这是在定义变量的时候做的复制

23
00:00:44,530 --> 00:00:47,579
所以呢这个时候的腐殖呢又被叫做初始化

24
00:00:47,740 --> 00:00:49,390
对c语言来说

25
00:00:49,390 --> 00:00:51,909
初始化和赋值的差异不是特别的大啊

26
00:00:51,909 --> 00:00:54,490
但是今后将来大家再去学一些其他语言

27
00:00:54,490 --> 00:00:55,210
比如说c加加

28
00:00:55,210 --> 00:00:57,219
那么这里面的差异可能会比较大

29
00:00:57,219 --> 00:01:00,560
但是在这个地方

30
00:01:00,560 --> 00:01:03,079
我们需要专关注的一件事情是什么呢

31
00:01:03,079 --> 00:01:04,980
对于程序设计来说

32
00:01:05,099 --> 00:01:09,620
等号这个腐值符号表示的是一种动作

33
00:01:09,620 --> 00:01:10,939
而在数学当中

34
00:01:10,939 --> 00:01:12,680
如果我们想要说a等于b

35
00:01:12,680 --> 00:01:15,650
那么在数学里头它的意思这是一个关系

36
00:01:15,650 --> 00:01:20,239
a和b它们的值是相等的对吧

37
00:01:20,239 --> 00:01:21,530
这表示一种关系

38
00:01:21,530 --> 00:01:23,150
而在程序设计当中

39
00:01:23,150 --> 00:01:24,579
不管哪个语言啊

40
00:01:24,599 --> 00:01:27,209
呃当然可能具体的符号会有不同

41
00:01:27,209 --> 00:01:29,400
但是如果这是做腐值的话

42
00:01:29,400 --> 00:01:30,599
这表示的是一个动作

43
00:01:30,599 --> 00:01:34,450
要把右边的值交给左边的变量

44
00:01:34,450 --> 00:01:36,079
关系是静态的

45
00:01:36,659 --> 00:01:39,090
而动作是动态的

46
00:01:39,090 --> 00:01:39,930
在数学里头

47
00:01:39,930 --> 00:01:41,189
a等于b和b等于a

48
00:01:41,189 --> 00:01:42,209
这是完全等价的

49
00:01:42,209 --> 00:01:43,650
我们学过那个叫什么交换率

50
00:01:43,650 --> 00:01:44,159
对不对

51
00:01:44,159 --> 00:01:45,629
但是在程序设计当中

52
00:01:45,629 --> 00:01:47,989
a等于b和b等于a

53
00:01:47,989 --> 00:01:50,189
是两个完全不同的动作

54
00:01:50,189 --> 00:01:51,269
正好是相反的

55
00:01:51,269 --> 00:01:52,530
一个把a的值交给b

56
00:01:52,530 --> 00:01:54,019
一个把b的值交给a

57
00:01:54,140 --> 00:01:56,719
把a的值交给b的是b等于a

58
00:01:56,719 --> 00:01:58,579
把b的值交给a的是a等于b

59
00:01:58,579 --> 00:01:59,780
你看咱们又来说要口令了

60
00:01:59,780 --> 00:02:00,539
是不是

61
00:02:02,180 --> 00:02:05,560
那么如果这个在变量定义的时候

62
00:02:05,560 --> 00:02:06,519
就发生了腐值

63
00:02:06,519 --> 00:02:08,419
那么我们这个就叫做初始化

64
00:02:08,780 --> 00:02:11,780
c语言呢没有强制要求

65
00:02:11,780 --> 00:02:14,360
所有的变量都必须在定义的时候做初始化

66
00:02:14,360 --> 00:02:17,500
但是呢所有的变量在第一次被使用之前

67
00:02:17,500 --> 00:02:19,259
应该被赋一次值

68
00:02:19,459 --> 00:02:20,598
所谓被使用

69
00:02:20,598 --> 00:02:23,899
就是这个变量出现在了腐值号的

70
00:02:23,899 --> 00:02:25,669
也就是等号的右边

71
00:02:25,669 --> 00:02:26,990
这就是在被使用对吧

72
00:02:26,990 --> 00:02:29,090
因为我们在右边的那个变量的值

73
00:02:29,090 --> 00:02:31,340
我们要给它读出来做点事情

74
00:02:31,340 --> 00:02:34,679
所以如果我们变量没有初始化

75
00:02:34,679 --> 00:02:36,838
就直接把它放到右边去用

76
00:02:36,838 --> 00:02:38,180
会出现什么呢

77
00:02:38,359 --> 00:02:40,549
我们定义一个变量int i

78
00:02:40,549 --> 00:02:43,399
但是呢我没有给他任何的初始值啊

79
00:02:43,399 --> 00:02:45,528
然后呢我们再来一个变量

80
00:02:45,528 --> 00:02:48,020
j也没有给他初始值

81
00:02:48,020 --> 00:02:50,960
不过呢结印呢会去做一次赋值

82
00:02:50,960 --> 00:02:52,129
说j等于什么呢

83
00:02:52,129 --> 00:02:54,120
i加十

84
00:02:54,359 --> 00:02:58,860
接着我们试着去输出那个结的结果

85
00:02:59,259 --> 00:03:00,819
我们看看会得到什么

86
00:03:03,099 --> 00:03:05,080
我们得到了一个非常奇怪的东西

87
00:03:05,419 --> 00:03:07,250
一个非常奇怪的树

88
00:03:07,250 --> 00:03:10,128
这个树没有任何道理的是吧

89
00:03:10,128 --> 00:03:12,829
如果我们在这i是有一个初始值等于零

90
00:03:12,829 --> 00:03:14,508
我们就不会有那么奇怪的结果

91
00:03:14,508 --> 00:03:16,218
我们会得到一个非常正常的结果

92
00:03:16,218 --> 00:03:18,580
是之所以会得到那么奇怪的结果

93
00:03:18,580 --> 00:03:20,840
是因为在内存当中

94
00:03:20,840 --> 00:03:22,219
在计算机的内存当中

95
00:03:22,219 --> 00:03:23,300
你像我的变量在哪里

96
00:03:23,300 --> 00:03:24,439
变量在内存里头

97
00:03:24,439 --> 00:03:26,240
我们说我们有个变量叫做i

98
00:03:26,240 --> 00:03:27,889
如果没有这个初始化的话

99
00:03:27,889 --> 00:03:29,629
我们说我们有个变量叫做i

100
00:03:29,629 --> 00:03:31,849
但是我们没有给他任何明确的值

101
00:03:31,849 --> 00:03:35,919
那么他正好在内存当中在什么地方

102
00:03:35,919 --> 00:03:39,930
那个地方原本有一些什么样的值在里头

103
00:03:39,930 --> 00:03:41,610
那他就是那个值了

104
00:03:41,610 --> 00:03:43,289
你没有说它是什么呢

105
00:03:43,289 --> 00:03:45,419
它它那个地方有什么就是什么咯

106
00:03:45,419 --> 00:03:47,729
啊所以没有对任何变量

107
00:03:47,729 --> 00:03:49,409
对一个变量没有做任何的初始化

108
00:03:49,409 --> 00:03:51,909
就相当于你打开了一个房间

109
00:03:51,909 --> 00:03:53,289
但是没有清扫它

110
00:03:53,289 --> 00:03:54,250
你就住进去了

111
00:03:54,250 --> 00:03:55,389
里头有什么垃圾呢

112
00:03:55,389 --> 00:03:56,419
都是你的了

113
00:03:56,579 --> 00:04:00,088
所以我们给变量做初始化啊

114
00:04:00,088 --> 00:04:02,209
它的基本形式就是这样子

115
00:04:02,209 --> 00:04:04,218
我们在定义变量的时候

116
00:04:04,218 --> 00:04:06,618
让它等于一个初始值

117
00:04:06,618 --> 00:04:08,840
比如说enterprise等于零呃

118
00:04:08,840 --> 00:04:10,400
这个特mod等于100

119
00:04:10,400 --> 00:04:12,830
那么如果我一行里面定义多个变量

120
00:04:12,830 --> 00:04:16,370
我也可以分别单独的给每一个变量

121
00:04:16,370 --> 00:04:17,360
定义初始值

122
00:04:17,360 --> 00:04:19,129
注意在定义一行里头

123
00:04:19,129 --> 00:04:20,569
如果有多个变量定义的时候

124
00:04:20,569 --> 00:04:23,939
你不不能用一个办法去把一个值

125
00:04:23,939 --> 00:04:25,199
付给所有的变量

126
00:04:25,199 --> 00:04:27,720
你必须一个一个的去给每一个变量

127
00:04:27,720 --> 00:04:28,529
赋初始值

128
00:04:28,529 --> 00:04:30,480
那在前面我们已经看到说

129
00:04:30,480 --> 00:04:34,660
那个等号是一个符号啊

130
00:04:34,660 --> 00:04:37,740
这个我们把它叫做赋值运算符

131
00:04:38,759 --> 00:04:39,678
什么叫运算符

132
00:04:39,678 --> 00:04:40,939
我们后面再来解释啊

133
00:04:40,939 --> 00:04:43,038
我们先知道说它是一个符号

134
00:04:43,038 --> 00:04:47,279
那如果这里头有这样的符号做运算的符号

135
00:04:47,279 --> 00:04:50,990
那这种式子呢我们就把它叫做表达式呃

136
00:04:50,990 --> 00:04:52,790
这个这个词很生硬的啊

137
00:04:52,790 --> 00:04:54,769
因为就是从英文expression里头

138
00:04:54,769 --> 00:04:56,209
这样直接翻译过来的

139
00:04:56,209 --> 00:04:56,870
就算表达式

140
00:04:56,870 --> 00:04:59,449
所以你看到说price等于零是一个表达式

141
00:04:59,449 --> 00:05:01,069
change就等于100减price

142
00:05:01,069 --> 00:05:02,420
这也是一个表达式

143
00:05:02,579 --> 00:05:05,730
我们继续来看这个enterprise等于零哈

144
00:05:05,730 --> 00:05:07,519
这这一行有很多名堂

145
00:05:08,319 --> 00:05:09,899
最后我们定义了一个变量

146
00:05:09,899 --> 00:05:10,800
名字叫做price

147
00:05:10,800 --> 00:05:12,939
类型是int初始化为零

148
00:05:13,399 --> 00:05:15,800
在那么多的说法里头

149
00:05:15,800 --> 00:05:17,480
那个int是什么

150
00:05:17,480 --> 00:05:19,600
int是这个变量的类型

151
00:05:19,718 --> 00:05:22,809
c语言是一种有类型的语言

152
00:05:22,809 --> 00:05:25,358
也就是说它的变量必须要有类型

153
00:05:25,358 --> 00:05:29,560
它的变量必须在使用之前事先做以此定义

154
00:05:29,860 --> 00:05:32,800
或者声明你定义了一个变量

155
00:05:32,800 --> 00:05:34,480
所以有一个变量叫做price

156
00:05:34,480 --> 00:05:36,699
你在这个时候你就必须明确说

157
00:05:36,699 --> 00:05:38,699
这个变量是int类型的

158
00:05:39,720 --> 00:05:41,120
c语言是这样一种语言

159
00:05:41,120 --> 00:05:43,500
所有的变量一旦确定了一个类型以后

160
00:05:43,500 --> 00:05:45,449
你不能改变它的类型

161
00:05:45,449 --> 00:05:47,939
我现在在定义的时候说price是int

162
00:05:47,939 --> 00:05:50,370
那么这辈子在这个程序里头

163
00:05:50,370 --> 00:05:53,339
这个int这个price它就永远都是int

164
00:05:53,639 --> 00:05:55,560
接下去我们的程序在scaf

165
00:05:55,560 --> 00:05:57,810
读入了一个price的值以后

166
00:05:57,810 --> 00:06:00,420
我们又定义了一个变量

167
00:06:01,680 --> 00:06:03,949
一个程序里面当然可以有很多变量

168
00:06:03,949 --> 00:06:05,149
变量是干什么的

169
00:06:05,149 --> 00:06:05,990
放数据的

170
00:06:05,990 --> 00:06:08,149
所以我们需要有数据存放的时候

171
00:06:08,149 --> 00:06:09,709
我们就定义一个变量

172
00:06:09,709 --> 00:06:13,028
所以我们需要一个变量来计算

173
00:06:13,028 --> 00:06:16,449
100减去你输入的那个price的结果

174
00:06:16,449 --> 00:06:18,428
所以呢我们就定义了一个变量叫做change

175
00:06:18,428 --> 00:06:20,319
来保存这个计算的结果

176
00:06:20,399 --> 00:06:22,560
在程序里面你可以定义很多变量

177
00:06:22,560 --> 00:06:26,639
这个的时候呢又定义的变量又做了计算

178
00:06:26,639 --> 00:06:31,519
那么这种写法是c99 的写法

179
00:06:31,519 --> 00:06:32,480
为什么呢

180
00:06:32,480 --> 00:06:35,569
因为c99 允许你在程序的任何地方

181
00:06:35,569 --> 00:06:36,649
定义变量

182
00:06:36,649 --> 00:06:40,769
只要它出现在这个变量的第一次使用之前

183
00:06:40,769 --> 00:06:42,689
无论是放在复制号的左边

184
00:06:42,689 --> 00:06:43,920
还是放在复制号的右边

185
00:06:43,920 --> 00:06:45,689
在第一次出现这个变量之前

186
00:06:45,689 --> 00:06:48,329
你定义的那个变量ok就行了

187
00:06:48,329 --> 00:06:49,500
这是c99 的

188
00:06:49,500 --> 00:06:54,500
而传统的ecc只能在代码开头的地方

189
00:06:54,500 --> 00:06:55,100
定义变量

190
00:06:55,100 --> 00:06:57,699
所有的变量的定义都必须放在最前面

191
00:06:57,699 --> 00:06:59,680
在前面一个一个一个一个变量

192
00:06:59,680 --> 00:07:00,670
定义完了以后

193
00:07:00,670 --> 00:07:02,379
可以开始做其他的事情

194
00:07:02,379 --> 00:07:03,040
输入啊

195
00:07:03,040 --> 00:07:03,519
输出啊

196
00:07:03,519 --> 00:07:04,959
计算啊等等

197
00:07:05,759 --> 00:07:08,238
一旦你开始做一些其他的事情了

198
00:07:08,238 --> 00:07:09,319
开始做计算了

199
00:07:09,319 --> 00:07:10,879
开始做输入输出了

200
00:07:10,879 --> 00:07:12,740
你就不能够再定义变量了

201
00:07:12,740 --> 00:07:14,769
这是ssc的做法

202
00:07:14,769 --> 00:07:17,259
所以我们看到如果用sc来写我们的代码

203
00:07:17,259 --> 00:07:19,269
这是我们右边的这种样子

204
00:07:19,269 --> 00:07:21,639
你要把change定义到前面去

205
00:07:21,839 --> 00:07:24,319
但是c99 你就可以在任何地方定义


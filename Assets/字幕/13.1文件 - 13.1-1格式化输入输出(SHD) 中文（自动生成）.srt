1
00:00:04,379 --> 00:00:07,320
这是我们从第一天学c就接触的东西

2
00:00:07,320 --> 00:00:09,019
print def scaf

3
00:00:09,279 --> 00:00:11,320
我们用它来做输入和输出

4
00:00:12,460 --> 00:00:15,179
我们知道在print f和scaf里面

5
00:00:15,179 --> 00:00:17,818
你可以用百分号后面跟上一个字母

6
00:00:17,818 --> 00:00:19,949
来表示你要输入或者输出的类型

7
00:00:19,949 --> 00:00:22,978
比如说百分号d我要做整数的事情

8
00:00:22,978 --> 00:00:25,199
百分号f我要做浮点数的事情

9
00:00:25,660 --> 00:00:27,579
我们之前没有很仔细的来讲

10
00:00:27,579 --> 00:00:30,160
这些东西我们只是用到多少

11
00:00:30,160 --> 00:00:31,539
讲到多少

12
00:00:31,800 --> 00:00:35,070
今天我们来彻底的研究一下这个百分号

13
00:00:35,070 --> 00:00:39,899
什么什么这个格式字符串到底有多少细节

14
00:00:39,899 --> 00:00:41,039
有多少秘密

15
00:00:41,520 --> 00:00:42,960
我们的这个格式字符串

16
00:00:42,960 --> 00:00:45,359
我们之前知道只是百分号d

17
00:00:45,359 --> 00:00:47,909
但是其实呢在百分号和d中间

18
00:00:47,909 --> 00:00:49,959
我们还可以有四样东西

19
00:00:50,280 --> 00:00:51,600
我们一个个来看

20
00:00:51,600 --> 00:00:55,460
首先第一个东西是叫做flag标志

21
00:00:55,460 --> 00:00:57,500
那么它有几种

22
00:00:57,500 --> 00:00:58,939
一种呢是减号

23
00:00:58,939 --> 00:01:01,640
这个减号表示的是左对齐

24
00:01:01,679 --> 00:01:02,939
什么意思呢

25
00:01:02,939 --> 00:01:06,049
其实它还得和后面的with联系在一起啊

26
00:01:06,049 --> 00:01:06,769
讲才有意义

27
00:01:06,769 --> 00:01:07,969
我们来试一下这件事情

28
00:01:07,969 --> 00:01:09,469
我们做一个非常简单的程序啊

29
00:01:09,469 --> 00:01:10,609
我们做了两个print

30
00:01:10,609 --> 00:01:12,680
输出的内容呢都是123

31
00:01:12,680 --> 00:01:15,019
但是呢第一行呢是百分号9d

32
00:01:15,019 --> 00:01:16,939
第二行呢是百分号-9 d

33
00:01:16,939 --> 00:01:18,230
这个九的意思呢

34
00:01:18,230 --> 00:01:21,319
就是我的这个数字的输出呢

35
00:01:21,319 --> 00:01:25,750
要占据九个字符的空间

36
00:01:25,750 --> 00:01:27,859
所以我们看运行结果

37
00:01:29,299 --> 00:01:32,200
这是第一行的啊

38
00:01:32,200 --> 00:01:33,819
如果我们仔细去数的话

39
00:01:34,640 --> 00:01:39,450
在这里123456789

40
00:01:39,450 --> 00:01:41,640
这占据了九个字符的空间

41
00:01:41,640 --> 00:01:43,530
但是呢它是靠右对齐的

42
00:01:43,530 --> 00:01:45,569
所以它的前面留出了空格

43
00:01:45,569 --> 00:01:47,069
而我加了减号之后呢

44
00:01:47,069 --> 00:01:48,620
他就是靠左对齐了

45
00:01:48,620 --> 00:01:50,930
所以减号的意思是左对齐

46
00:01:50,930 --> 00:01:55,228
而加号的意思是说前面要有加号或减号

47
00:01:55,228 --> 00:01:58,579
所以如果这有一个加号的话

48
00:01:59,739 --> 00:02:02,280
我们就看到他的前面有一个加号

49
00:02:02,280 --> 00:02:04,920
但你有没有办法说又有加号

50
00:02:04,920 --> 00:02:08,629
右左对齐呢也可以好

51
00:02:08,629 --> 00:02:13,159
如果我把它写成了简加呢是一个意思

52
00:02:14,139 --> 00:02:15,240
这是加号

53
00:02:15,240 --> 00:02:16,740
如果我这儿现在是一个负数

54
00:02:16,740 --> 00:02:18,629
比如说负的123呢

55
00:02:18,629 --> 00:02:20,430
那么它就会有负号

56
00:02:20,430 --> 00:02:22,439
当然如果你没有这个加号

57
00:02:22,439 --> 00:02:24,300
富豪还是一定会给你的对吧

58
00:02:24,300 --> 00:02:25,840
要不然这个值就不对了

59
00:02:26,139 --> 00:02:28,840
所以加号可以认为是强制输出

60
00:02:28,840 --> 00:02:32,889
那个加号最后还有个零零的意思是零填充

61
00:02:32,889 --> 00:02:34,060
我们再来试一下

62
00:02:34,060 --> 00:02:35,500
如果我这儿说零九

63
00:02:35,500 --> 00:02:37,060
这儿说-09

64
00:02:39,699 --> 00:02:43,259
看到这个简和这个零不能结合在一起

65
00:02:43,259 --> 00:02:44,340
ok我把这个零去掉

66
00:02:44,340 --> 00:02:48,079
但是094乎是可以在前面填了零

67
00:02:48,079 --> 00:02:50,239
因为当我们减号的时候

68
00:02:50,239 --> 00:02:51,498
意思是左对齐对吧

69
00:02:51,498 --> 00:02:53,479
左对齐以后他没有地方去填那个零了

70
00:02:53,479 --> 00:02:55,030
它不会在后面给你填零啊

71
00:02:55,030 --> 00:03:00,449
那这个地方零表示说我在前面给它填零啊

72
00:03:00,449 --> 00:03:02,519
这是第一部分friend

73
00:03:02,519 --> 00:03:05,250
第二部分呢是宽度

74
00:03:05,250 --> 00:03:07,169
这个事情呢我们已经已经知道了是吧

75
00:03:07,169 --> 00:03:10,599
这个number表示说它要占据多宽的地方

76
00:03:10,599 --> 00:03:12,759
那么其实我们之前呢在做浮点数的时候

77
00:03:12,759 --> 00:03:13,120
也知道

78
00:03:13,120 --> 00:03:15,319
如果你是点number的话呢

79
00:03:15,319 --> 00:03:16,759
这个小数点后面的数字

80
00:03:16,759 --> 00:03:18,389
表示的是小数点后的位数

81
00:03:18,389 --> 00:03:19,949
那么当然这两个也可以结合起来

82
00:03:19,949 --> 00:03:21,689
但是当它结合起来的意思时候呢

83
00:03:21,689 --> 00:03:22,469
你意思别猜错

84
00:03:22,469 --> 00:03:23,389
我们看一下

85
00:03:23,389 --> 00:03:26,060
当我们说9.2f的时候

86
00:03:26,519 --> 00:03:29,519
他的意思并不是说小数点前面有九位

87
00:03:29,519 --> 00:03:31,679
你看这小数点前面有几位呢

88
00:03:31,679 --> 00:03:33,319
123有三位

89
00:03:33,319 --> 00:03:34,400
456

90
00:03:34,400 --> 00:03:35,180
这是七

91
00:03:35,180 --> 00:03:35,659
这是八

92
00:03:35,659 --> 00:03:36,349
这是九

93
00:03:36,349 --> 00:03:37,319
对不对

94
00:03:37,319 --> 00:03:38,159
再来一遍

95
00:03:38,159 --> 00:03:41,879
123456789好

96
00:03:41,879 --> 00:03:44,569
所以这样子是酒味

97
00:03:44,569 --> 00:03:46,269
也就是说这个酒的意思是

98
00:03:46,269 --> 00:03:49,389
整个输出要占据九个字符的位置

99
00:03:49,389 --> 00:03:52,219
然后点二是说小数点后面有两位

100
00:03:52,280 --> 00:03:53,960
他并不是说小数点前两位

101
00:03:53,960 --> 00:03:55,039
小数点后九位啊

102
00:03:55,039 --> 00:03:56,000
前小数点前九位

103
00:03:56,000 --> 00:03:57,680
小数点后两位不是那个意思

104
00:03:57,680 --> 00:04:00,560
另外呢呃星号的意思是什么呢

105
00:04:00,560 --> 00:04:02,930
下一个参数是字符数或者下一个参数

106
00:04:02,930 --> 00:04:04,009
小数点后的位数

107
00:04:04,009 --> 00:04:05,750
什么意思叫做下一个参数呢

108
00:04:05,750 --> 00:04:07,169
比如我们这儿写的

109
00:04:07,169 --> 00:04:10,979
我们在百分号和d中间放了一个信号

110
00:04:11,000 --> 00:04:13,669
因此呢这个星号会说

111
00:04:13,669 --> 00:04:16,519
这个六是用来满足这个信号的

112
00:04:16,519 --> 00:04:18,800
它会被填到这个星号里头去

113
00:04:18,800 --> 00:04:22,240
而123呢是用来满足这个百分号d的

114
00:04:22,740 --> 00:04:23,339
呃

115
00:04:23,339 --> 00:04:25,319
所以呢现在我们的输出

116
00:04:25,319 --> 00:04:28,740
就是在这个123的前面呢有三个空格

117
00:04:28,740 --> 00:04:31,420
然后总共它占据六个字符的位置

118
00:04:31,779 --> 00:04:33,790
也就是说这种方式底下呢

119
00:04:33,790 --> 00:04:37,060
我们可以把原来放在字符串里头的那个六

120
00:04:37,060 --> 00:04:39,449
变成后面的一个参数

121
00:04:39,449 --> 00:04:41,098
而你一旦变成后面的一个参数

122
00:04:41,098 --> 00:04:42,538
你它就可以是一个变量

123
00:04:42,538 --> 00:04:43,038
对不对

124
00:04:43,038 --> 00:04:43,639
这样呢

125
00:04:43,639 --> 00:04:46,158
就给我们的格式带来了很大的灵活性

126
00:04:46,158 --> 00:04:49,608
这是我们的第二部分宽度或者是精度

127
00:04:49,608 --> 00:04:52,439
然后也是当然也是第三部分

128
00:04:52,439 --> 00:04:54,209
第二和第二部分和第三部分

129
00:04:54,209 --> 00:04:57,899
最后还有第四部分是它的一个修饰符

130
00:04:57,899 --> 00:05:00,519
这个修饰符呢是用来修饰类型的

131
00:05:00,519 --> 00:05:03,399
比如说对于这个整数来说

132
00:05:05,980 --> 00:05:07,660
表明是单个字节

133
00:05:07,660 --> 00:05:10,149
把它当作单个字节来输出

134
00:05:10,149 --> 00:05:12,040
一个h是shot

135
00:05:12,040 --> 00:05:13,389
一个l是long

136
00:05:13,389 --> 00:05:14,930
两个l是long long

137
00:05:14,930 --> 00:05:17,269
大写的l是long double

138
00:05:17,269 --> 00:05:21,290
假如说我们现在说我们这是h h的d

139
00:05:21,290 --> 00:05:21,829
然后呢

140
00:05:21,829 --> 00:05:25,800
我们要输出的数字是一个12345

141
00:05:25,800 --> 00:05:27,319
那么我们看

142
00:05:29,579 --> 00:05:31,459
他给了我们一个亡灵啊

143
00:05:31,459 --> 00:05:36,079
啊我们的这个这个呃编译器比较厉害哈

144
00:05:36,079 --> 00:05:39,399
他说他给他说的这个呃你的类型是int

145
00:05:39,399 --> 00:05:42,339
可是呢你希望它输出一个chara啊

146
00:05:42,339 --> 00:05:43,360
实际上不是输出去

147
00:05:43,360 --> 00:05:45,939
而是输出一个一个字节的整数是吧

148
00:05:45,939 --> 00:05:47,709
最后他给我们输出的57

149
00:05:47,709 --> 00:05:49,089
为什么是57呢

150
00:05:49,089 --> 00:05:51,389
嗯哼这件事情又要用到计算器了

151
00:05:51,389 --> 00:05:51,930
对不对

152
00:05:51,930 --> 00:05:54,418
我们的12345

153
00:05:54,418 --> 00:05:57,598
它的16进制是3039

154
00:05:57,598 --> 00:06:02,978
如果只取后面的那个三九变成十进制

155
00:06:02,978 --> 00:06:04,279
就是57

156
00:06:04,300 --> 00:06:06,759
所以在这里发生的事情就是12345

157
00:06:06,759 --> 00:06:07,959
本来是一个int

158
00:06:07,959 --> 00:06:09,850
然后我们只拿它了

159
00:06:09,850 --> 00:06:13,180
只拿出它的最低位作为一个char

160
00:06:13,240 --> 00:06:15,879
作为一个整数的char去输出啊

161
00:06:15,879 --> 00:06:18,759
于是我们得到了这个57的这个结果

162
00:06:19,680 --> 00:06:22,279
但如果我们想让他没有抱怨的话

163
00:06:22,279 --> 00:06:24,470
我们可以把它强制类型转换成一个char

164
00:06:24,470 --> 00:06:26,120
我们就得到了57的结果

165
00:06:26,120 --> 00:06:28,228
最后关于类型呃

166
00:06:28,228 --> 00:06:31,439
类型呢我们之前见过的是百分号d对吧

167
00:06:31,439 --> 00:06:33,059
呃这是输出整数的

168
00:06:33,059 --> 00:06:36,759
实际上呢百分号i也是用来输出整数的啊

169
00:06:36,779 --> 00:06:39,509
百分号也有输出一个on sigint o

170
00:06:39,509 --> 00:06:40,680
x是16进制

171
00:06:40,680 --> 00:06:41,639
八进制和16进制

172
00:06:41,639 --> 00:06:44,339
大写的x是字母大写的16进制啊

173
00:06:44,339 --> 00:06:46,720
f是浮点数

174
00:06:47,319 --> 00:06:48,538
e呢是指数性

175
00:06:48,538 --> 00:06:49,798
是去做输出啊

176
00:06:49,798 --> 00:06:51,538
这些我们多少见识过一些呃

177
00:06:51,538 --> 00:06:54,149
但是呢有些呃没有仔细去用过啊

178
00:06:54,149 --> 00:06:56,149
c呢是输出一个char

179
00:06:56,149 --> 00:06:58,009
以字符的形式输出一个char

180
00:06:58,009 --> 00:07:00,110
s是一个字符串p输出一个指针

181
00:07:00,110 --> 00:07:04,180
之前我们都见过百分号是什么

182
00:07:05,439 --> 00:07:08,519
其实初学的人呃

183
00:07:08,519 --> 00:07:10,259
中国人很少遇到这个问题

184
00:07:10,259 --> 00:07:13,680
因为中国人的英文单词他不会那么敏感了

185
00:07:13,680 --> 00:07:16,908
可是呢我们遇到这个母语是英语的人

186
00:07:16,908 --> 00:07:18,889
在这个百分号上面很容易出错

187
00:07:18,889 --> 00:07:20,509
因为正好是number

188
00:07:20,509 --> 00:07:21,528
所以他会想说啊

189
00:07:21,528 --> 00:07:23,209
百分号用来输出一个number

190
00:07:23,209 --> 00:07:24,560
用来输出一个数字

191
00:07:24,560 --> 00:07:25,810
其实不是

192
00:07:25,810 --> 00:07:28,240
我们来试一下这个百分号n该怎么用啊

193
00:07:28,240 --> 00:07:30,910
假如说我们现在呢在这儿让他输出了一个

194
00:07:30,910 --> 00:07:31,839
呃差了

195
00:07:31,839 --> 00:07:33,800
然后呢我们后面来了一个百分号an

196
00:07:33,800 --> 00:07:36,360
这个时候呢其实你需要有另外一个东西

197
00:07:37,000 --> 00:07:38,459
比如说有一个变量呀

198
00:07:38,459 --> 00:07:39,660
int的变量叫做number

199
00:07:39,660 --> 00:07:43,399
然后呢你要在这放一个number的指针

200
00:07:43,879 --> 00:07:44,899
完了以后呢

201
00:07:44,899 --> 00:07:49,519
你可以在这儿去输出那个number的值

202
00:07:49,519 --> 00:07:51,540
我们看看会得到什么

203
00:07:52,240 --> 00:07:54,870
number是二啊

204
00:07:54,870 --> 00:07:55,709
难道是二

205
00:07:55,709 --> 00:07:59,610
如果我现在让他输出的不是h hd了

206
00:07:59,610 --> 00:08:01,560
我让他输出一个百分号d啊

207
00:08:01,560 --> 00:08:02,839
就是输出12345

208
00:08:02,839 --> 00:08:05,939
然后我们来看一下number变成了五

209
00:08:06,800 --> 00:08:09,339
如果我们在输出了这个百分号d之后

210
00:08:09,339 --> 00:08:11,379
我们还输出了一些其他固定的字符

211
00:08:11,379 --> 00:08:12,420
比如说t y

212
00:08:13,740 --> 00:08:15,560
所以他输出了12345t y

213
00:08:15,560 --> 00:08:17,680
现在这个number变成了七

214
00:08:17,800 --> 00:08:20,769
所以这个百分号在这儿的意思是说

215
00:08:20,769 --> 00:08:23,829
当我print f做到这个地方的时候

216
00:08:23,829 --> 00:08:26,259
已经输出了多少个字符

217
00:08:26,718 --> 00:08:32,178
然后填到这个指针所指的那个变量里头去

218
00:08:33,659 --> 00:08:38,058
所以有同学这个没有做这个事情

219
00:08:38,500 --> 00:08:41,470
当然我们现在的编译器会给个warning对吧

220
00:08:41,470 --> 00:08:42,639
会给个warning

221
00:08:42,639 --> 00:08:43,240
然后呢

222
00:08:43,240 --> 00:08:46,379
这个我们得到了一些乱七八糟的结果

223
00:08:46,879 --> 00:08:50,639
他也没有把number的值给输出啊

224
00:08:51,220 --> 00:08:52,019
有的时候

225
00:08:52,019 --> 00:08:53,759
如果你把这个事情放在一个函数里头

226
00:08:53,759 --> 00:08:55,110
我们之前试过这些事情啊

227
00:08:55,110 --> 00:08:59,129
你就会遇到这个程序崩溃的情况啊

228
00:08:59,129 --> 00:09:01,830
因为往一个不存在的地方写东西了嘛对吧

229
00:09:01,830 --> 00:09:04,169
刚才我们看的是print f的时候的情况

230
00:09:04,169 --> 00:09:07,649
那么scaf呢呃大体上差不多啊

231
00:09:07,649 --> 00:09:09,840
呃比prinf要简单很多呃

232
00:09:09,840 --> 00:09:12,360
因为prinf要要控制输出的格式嘛

233
00:09:12,360 --> 00:09:14,950
啊这个什么京都啊啊小数点前几位

234
00:09:14,950 --> 00:09:16,129
小数点后几位什么的

235
00:09:16,129 --> 00:09:18,289
但是呢caf不用管这个事情

236
00:09:18,289 --> 00:09:18,769
对不对

237
00:09:18,769 --> 00:09:20,818
嗯用户输入什么就是什么

238
00:09:20,818 --> 00:09:22,589
scav要管的只是一个类型

239
00:09:22,589 --> 00:09:23,578
还有flag

240
00:09:23,578 --> 00:09:25,379
这flag呢有这么几种信号

241
00:09:25,379 --> 00:09:28,539
表示说跳过我要跳过这个东西

242
00:09:28,539 --> 00:09:31,779
比如说百分号新type我要跳过啊

243
00:09:31,779 --> 00:09:34,500
百分号新d我要跳过这个整数

244
00:09:34,720 --> 00:09:37,120
然后数字呢表示说如果作为字符的话

245
00:09:37,120 --> 00:09:38,860
我最大读多少个字符

246
00:09:38,860 --> 00:09:40,720
这个我们在讲字符串的时候

247
00:09:40,720 --> 00:09:42,710
已经见识过这个事情了是吧

248
00:09:42,710 --> 00:09:44,870
h h呢是把它作为一个字符

249
00:09:44,870 --> 00:09:47,460
作为一个char的整形来读进来啊

250
00:09:47,460 --> 00:09:49,559
那么这些呢大家之前都见过

251
00:09:49,559 --> 00:09:51,240
就这个是我们之前没有用过的

252
00:09:51,240 --> 00:09:52,919
但是它其实会特别有意思啊

253
00:09:52,919 --> 00:09:54,940
用起来我们我们来试一下这个事情

254
00:09:54,940 --> 00:09:57,250
比如说呢我们现在做的事情是这样

255
00:09:57,250 --> 00:10:00,110
我们先跳过一个百分号d

256
00:10:00,110 --> 00:10:01,789
再读一个百分号d

257
00:10:01,789 --> 00:10:04,210
然后呢把读到的那个叫给number

258
00:10:04,210 --> 00:10:06,299
我们来看这程序运行会怎么样

259
00:10:06,299 --> 00:10:07,379
我们在编译的时候呢

260
00:10:07,379 --> 00:10:09,090
如果加上一个杠o的选项

261
00:10:09,090 --> 00:10:11,519
就表明说我们希望它编译产生的可执行

262
00:10:11,519 --> 00:10:12,899
文件名叫什么

263
00:10:12,899 --> 00:10:14,059
这里呢就叫test

264
00:10:14,059 --> 00:10:16,039
所以呢我就可以来运行这test

265
00:10:16,039 --> 00:10:17,539
我输入一个数123

266
00:10:17,539 --> 00:10:19,339
然后还有一个345回车

267
00:10:19,539 --> 00:10:21,639
他把前面那个123给跳过

268
00:10:21,639 --> 00:10:23,440
然后给我读到了345

269
00:10:23,440 --> 00:10:27,919
所以星号的意思是跳过那么类型的类型呃

270
00:10:27,919 --> 00:10:29,389
基本上大家前面都知道

271
00:10:29,389 --> 00:10:30,409
我们读整数的时候呢

272
00:10:30,409 --> 00:10:31,789
之前一直在用百分号d

273
00:10:31,789 --> 00:10:33,649
实际上呢也可以用百分号i

274
00:10:33,649 --> 00:10:35,090
用百分号i的时候呢

275
00:10:35,090 --> 00:10:36,590
它能够更灵活

276
00:10:36,590 --> 00:10:38,629
因为百分号d呢只能读十进制的整数

277
00:10:38,629 --> 00:10:39,470
而百分号i呢

278
00:10:39,470 --> 00:10:42,000
会根据你输入的那个整数的情况

279
00:10:42,000 --> 00:10:44,549
来决定到底以哪种形式来读进来

280
00:10:44,549 --> 00:10:45,330
怎么回事呢

281
00:10:45,330 --> 00:10:48,339
如果我们现在说这是百分号

282
00:10:48,960 --> 00:10:50,360
而不是百分号d了

283
00:10:50,360 --> 00:10:51,379
我们要去读那个版本

284
00:10:51,379 --> 00:10:52,220
然后把南部给输出

285
00:10:52,220 --> 00:10:52,820
这非常简单

286
00:10:52,820 --> 00:10:53,330
对不对

287
00:10:53,330 --> 00:10:55,820
现在呢我们来编译运行一下这个程序

288
00:10:55,820 --> 00:10:57,139
如果我说的是123

289
00:10:57,139 --> 00:10:58,159
当然还是123

290
00:10:58,159 --> 00:11:00,198
如果我说的是0x12 

291
00:11:00,240 --> 00:11:02,669
这就是16进制的方式读进来

292
00:11:02,669 --> 00:11:04,440
然后他输出告诉你这是18

293
00:11:04,440 --> 00:11:06,318
如果输入的是012

294
00:11:06,318 --> 00:11:08,089
这是八进制的形式读进来

295
00:11:08,089 --> 00:11:09,139
最后告诉你是进制

296
00:11:09,139 --> 00:11:10,729
它是十呃

297
00:11:10,729 --> 00:11:12,739
其他的我们大致都见过哈

298
00:11:12,739 --> 00:11:14,240
还有这个是什么意思

299
00:11:14,240 --> 00:11:17,370
方括号给大家看个例子哈

300
00:11:17,370 --> 00:11:21,690
呃这是我们可能从用户输入那读到的东西

301
00:11:21,690 --> 00:11:22,919
实际上这一段是什么呢

302
00:11:22,919 --> 00:11:24,649
是gps对的

303
00:11:24,649 --> 00:11:28,839
就是gps gps模块会产生的啊

304
00:11:28,940 --> 00:11:32,809
这个1083的协议的这种这种数据啊

305
00:11:32,809 --> 00:11:34,870
那么他那是倒a开头

306
00:11:34,870 --> 00:11:37,990
然后呢所有的字段呢都是以逗号分割的

307
00:11:37,990 --> 00:11:39,730
但是呢有的时候可能没有

308
00:11:39,730 --> 00:11:41,460
比如说这俩逗号中间没东西对吧

309
00:11:41,460 --> 00:11:44,669
那么怎么写一句caf却能够把它读进来呢

310
00:11:44,669 --> 00:11:46,019
我们写法是这样的

311
00:11:46,159 --> 00:11:49,700
这个百分号星星就表明我们要跳过

312
00:11:49,700 --> 00:11:50,269
对不对

313
00:11:50,269 --> 00:11:55,539
方括号里头放的是这个向上的箭头

314
00:11:55,539 --> 00:11:59,740
逗号意思是说到逗号之前的所有的东西

315
00:11:59,740 --> 00:12:01,450
但是这里又有个新

316
00:12:01,450 --> 00:12:06,769
所以呢实际上是从一开始读到逗号为止

317
00:12:06,769 --> 00:12:09,740
这前面所有东西我们都跳过不要

318
00:12:09,840 --> 00:12:12,450
然后第二个东西是逗号

319
00:12:12,450 --> 00:12:14,409
我们把逗号给读掉

320
00:12:14,409 --> 00:12:17,230
我们之前已经用很多的呃

321
00:12:17,230 --> 00:12:19,330
这个例子来说明过

322
00:12:19,330 --> 00:12:22,929
在scaf里面出现的不是百分号开头的东西

323
00:12:22,929 --> 00:12:25,610
都是他要求在这个字符串里头

324
00:12:25,610 --> 00:12:27,889
在这个输入的里头必须要存在的东西

325
00:12:27,889 --> 00:12:30,379
所以这个逗号呢用来把这个逗号读掉

326
00:12:30,379 --> 00:12:31,940
然后下面的这个东西

327
00:12:31,940 --> 00:12:35,639
004319点到逗号前面为止

328
00:12:35,820 --> 00:12:37,559
用这个东西来表示

329
00:12:37,559 --> 00:12:39,779
说逗号前面的任何的东西好

330
00:12:39,779 --> 00:12:42,090
这作为一个字符串给它读进来

331
00:12:42,090 --> 00:12:45,240
交给s time这个字符串变量

332
00:12:46,159 --> 00:12:48,519
但是这个方框里面东西还有很复杂哈

333
00:12:48,519 --> 00:12:50,139
我们不在这个课里面展开

334
00:12:50,139 --> 00:12:51,879
大家有兴趣可以自己再去琢磨一下

335
00:12:51,879 --> 00:12:54,240
到底这个方括号这个表达式里头

336
00:12:54,240 --> 00:12:55,500
可以有些什么样的方式

337
00:12:55,500 --> 00:12:58,139
来决定我们要读入一个什么样的字符串

338
00:12:58,740 --> 00:13:00,659
呃我们之前曾经提到过一次啊

339
00:13:00,659 --> 00:13:02,399
偶尔很偶然的机会

340
00:13:02,399 --> 00:13:05,200
print f和gf这两个函数是有返回值的

341
00:13:05,200 --> 00:13:06,820
他们的返回值是有意义的

342
00:13:07,840 --> 00:13:09,519
它的返回值是告诉我们

343
00:13:09,519 --> 00:13:11,850
他这一次多了几个item

344
00:13:11,850 --> 00:13:13,799
读了几个变量进来

345
00:13:13,799 --> 00:13:16,289
而print f的返回值是告诉我们

346
00:13:16,289 --> 00:13:18,679
他这一次输出了多少个字符

347
00:13:18,700 --> 00:13:20,919
所以如果你在做一个呃

348
00:13:20,919 --> 00:13:22,000
相对比较大型的程序

349
00:13:22,000 --> 00:13:23,259
我们指的大型程序

350
00:13:23,259 --> 00:13:24,820
说你那个程序不是说呃

351
00:13:24,820 --> 00:13:26,730
运行起来做点什么事情

352
00:13:26,730 --> 00:13:28,019
然后就结束了

353
00:13:28,019 --> 00:13:30,090
是要一直长期的运行下去的

354
00:13:30,090 --> 00:13:32,409
是会运行好几一个小时

355
00:13:32,409 --> 00:13:33,429
好几十分钟

356
00:13:33,429 --> 00:13:35,799
甚至好几天一直在那不断运行着的

357
00:13:35,799 --> 00:13:37,500
那对于这样的程序来说

358
00:13:37,980 --> 00:13:39,600
在这个程序运行过程当中

359
00:13:39,600 --> 00:13:42,179
cap和print f所依赖的背后的那些机制

360
00:13:42,179 --> 00:13:43,379
是有可能出问题的

361
00:13:43,379 --> 00:13:44,279
如果他们出问题

362
00:13:44,279 --> 00:13:45,960
那么print a f的时候

363
00:13:45,960 --> 00:13:49,529
他也许不能够输出东西就返回零了

364
00:13:49,529 --> 00:13:51,179
或者甚至可能会返回-1

365
00:13:51,179 --> 00:13:52,769
然后scaf的时候

366
00:13:52,769 --> 00:13:56,429
他可能不能够读到你所期望的那些东西

367
00:13:56,429 --> 00:13:58,440
那这个时候我们就可以判断说啊

368
00:13:58,440 --> 00:14:00,419
我们的底下的那些机制有问题

369
00:14:00,419 --> 00:14:01,500
或者用户的输入有了问题

370
00:14:01,500 --> 00:14:04,178
然后要求采取相应的啊这些动作

371
00:14:04,178 --> 00:14:05,078
我们可以来试一下

372
00:14:05,078 --> 00:14:06,698
我们print和scaf

373
00:14:06,698 --> 00:14:08,719
到底会给我们一个什么样的结果

374
00:14:08,899 --> 00:14:13,080
我们呃在scaf和print f的结果

375
00:14:13,080 --> 00:14:14,279
我们都记录下来啊

376
00:14:14,279 --> 00:14:15,419
把他们的返回值都记录下来

377
00:14:15,419 --> 00:14:16,470
然后把它输出出来

378
00:14:16,470 --> 00:14:17,370
我们来看一下

379
00:14:17,370 --> 00:14:20,309
现在这样我们会得到什么样的这个结果

380
00:14:20,309 --> 00:14:23,490
编译运行

381
00:14:23,490 --> 00:14:25,740
我们我们要它做1234

382
00:14:26,620 --> 00:14:28,019
那第一个是scaf的

383
00:14:28,019 --> 00:14:30,240
scaf说他得到了一个1234

384
00:14:30,240 --> 00:14:31,980
第二个五呢是print f的

385
00:14:31,980 --> 00:14:34,539
print f说他输出了1234

386
00:14:34,919 --> 00:14:38,639
第五个是那个回车换行反斜杠n对不对

387
00:14:38,639 --> 00:14:40,559
所以这就是他的啊

388
00:14:40,559 --> 00:14:42,519
scaf和pinf给我们得到的结果


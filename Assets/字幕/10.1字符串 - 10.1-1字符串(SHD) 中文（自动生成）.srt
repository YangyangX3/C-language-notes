1
00:00:04,299 --> 00:00:08,519
如果啊我们定义了这样一个呃字符数组

2
00:00:08,660 --> 00:00:12,339
我们说word呢是一个chara类型的数组

3
00:00:12,378 --> 00:00:15,019
我们用定义初始化啊

4
00:00:15,019 --> 00:00:17,559
用大括号给他初始化了一些值

5
00:00:17,559 --> 00:00:20,079
那么我们这样定义的这个字符数组呢

6
00:00:20,079 --> 00:00:23,019
我们知道它里头呢啊依次从word 0开始

7
00:00:23,019 --> 00:00:24,429
是h e l l o

8
00:00:24,429 --> 00:00:26,239
最后有一个感叹号

9
00:00:27,719 --> 00:00:29,239
这样的一个字符

10
00:00:29,239 --> 00:00:33,409
数组里头有很多的字符连起来

11
00:00:33,409 --> 00:00:34,500
而且有意义

12
00:00:34,799 --> 00:00:35,640
但是

13
00:00:37,679 --> 00:00:39,338
它不是c语言的字符串

14
00:00:40,039 --> 00:00:41,500
它只是字符数组

15
00:00:41,500 --> 00:00:42,700
它不是字符串

16
00:00:42,700 --> 00:00:47,058
因为它不能用字符串的方式去做运算

17
00:00:47,759 --> 00:00:49,520
那么怎么样才能够

18
00:00:49,520 --> 00:00:52,219
定义出一个c语言的字符串呢

19
00:00:55,320 --> 00:00:56,240
这样子做

20
00:00:57,259 --> 00:00:59,030
这和刚才有什么区别呢

21
00:00:59,030 --> 00:01:00,539
区别在于

22
00:01:01,420 --> 00:01:05,099
我们在这个数组的错化的过程当中

23
00:01:05,099 --> 00:01:07,120
在最后大家看

24
00:01:07,120 --> 00:01:10,099
最后我们加入了一个特殊的东西

25
00:01:10,260 --> 00:01:13,980
这是单引号里面有一个反斜杠

26
00:01:13,980 --> 00:01:14,760
有一个零

27
00:01:14,760 --> 00:01:17,430
它的意思表示的就是零

28
00:01:17,430 --> 00:01:19,340
就是整数值的零

29
00:01:19,459 --> 00:01:21,680
你也可以在这里就把单引号去掉

30
00:01:21,680 --> 00:01:22,459
把分线去掉

31
00:01:22,459 --> 00:01:23,209
就放一个零

32
00:01:23,209 --> 00:01:24,579
也是一样的意思

33
00:01:25,500 --> 00:01:26,810
这样子做

34
00:01:26,810 --> 00:01:29,959
我们的这个字符数组总共有多少个单元呢

35
00:01:29,959 --> 00:01:30,920
我们看下面这张表格

36
00:01:30,920 --> 00:01:33,599
就知道它总共有七个单元

37
00:01:33,879 --> 00:01:34,780
对不对

38
00:01:34,780 --> 00:01:35,859
0123456

39
00:01:35,859 --> 00:01:36,980
它有七个单元

40
00:01:37,280 --> 00:01:40,189
最后那个单元里面放的是个零

41
00:01:40,189 --> 00:01:44,239
这个零就使得我们现在的这个word

42
00:01:44,599 --> 00:01:46,040
它是一个字符串了

43
00:01:48,019 --> 00:01:51,319
这个word它还是一个字符数组

44
00:01:51,319 --> 00:01:52,609
这件事情没有变

45
00:01:52,609 --> 00:01:55,259
但是因为它的最后有一个零

46
00:01:55,259 --> 00:01:57,418
它就成为c语言的字符串

47
00:01:57,418 --> 00:01:59,278
它成为在c语言里面

48
00:01:59,278 --> 00:02:02,159
可以使用字符串的运算的方式

49
00:02:02,159 --> 00:02:04,159
去进行运算的那么一个字符串

50
00:02:06,219 --> 00:02:08,129
所以对于c语言来说

51
00:02:08,129 --> 00:02:13,120
字符串呢指的是以零结尾的一串字符

52
00:02:13,659 --> 00:02:17,360
但这个时候的零你写成两种形式

53
00:02:17,360 --> 00:02:18,379
或者是整数的零

54
00:02:18,379 --> 00:02:19,939
或者是单引号里面反斜杠零

55
00:02:19,939 --> 00:02:21,229
他们是一样的啊

56
00:02:21,229 --> 00:02:22,969
某些情况下我们会强调说

57
00:02:22,969 --> 00:02:23,689
单引号里面

58
00:02:23,689 --> 00:02:25,490
反斜杠铃是我们想要的那个东西

59
00:02:25,490 --> 00:02:29,189
因为整数的零它表达的是int int是可能更大

60
00:02:29,189 --> 00:02:30,150
比如说四个字节

61
00:02:30,150 --> 00:02:31,710
而单引号里面的反斜杠零

62
00:02:31,710 --> 00:02:34,000
一定是一个字节的东西

63
00:02:35,039 --> 00:02:38,240
但是它和单引号里面的零是不一样

64
00:02:38,240 --> 00:02:41,689
单引号里面的零是一个字符

65
00:02:41,689 --> 00:02:43,259
这个字符的大小

66
00:02:43,259 --> 00:02:46,590
这个字符表达的是阿斯克码的那个零

67
00:02:46,590 --> 00:02:48,000
是人可以读到的零

68
00:02:48,000 --> 00:02:50,520
而反斜杠铃是整数零

69
00:02:50,520 --> 00:02:51,990
它们俩是完全不一样的

70
00:02:51,990 --> 00:02:54,930
如果你要说单引号里面单个零是多少呢

71
00:02:54,930 --> 00:02:57,990
它是0x30 零16进制的三零

72
00:02:57,990 --> 00:03:00,259
也就是十进制的48

73
00:03:01,599 --> 00:03:06,039
那这个零呢是用来标志字符串的结束

74
00:03:07,218 --> 00:03:10,179
这个零表示说我的这个字符串到此为止了

75
00:03:10,179 --> 00:03:11,199
到这儿就没有了

76
00:03:11,199 --> 00:03:12,639
接下去不是我字符串了

77
00:03:12,639 --> 00:03:16,599
但是它本身并不是这个字符串的一部分

78
00:03:16,899 --> 00:03:18,489
这个零的作用

79
00:03:18,489 --> 00:03:21,930
我们后面去看c语言的那些字符串函数

80
00:03:21,930 --> 00:03:22,710
是怎么做的

81
00:03:22,710 --> 00:03:25,860
我们就能理解它需要有这个零来标志

82
00:03:25,860 --> 00:03:27,780
来表示说我的字符串结束了

83
00:03:27,780 --> 00:03:29,919
这样它的程序才能写得出来

84
00:03:32,080 --> 00:03:34,199
所以我们在计算字符串长度的时候

85
00:03:34,199 --> 00:03:35,900
是不会包括这个零的啊

86
00:03:36,618 --> 00:03:40,239
字符串呢它的在c语言里头

87
00:03:40,239 --> 00:03:42,758
它的这个在内存里头的存在的形式呢

88
00:03:42,758 --> 00:03:44,319
就是数组

89
00:03:44,819 --> 00:03:47,580
而访问的形式呢可以是数组

90
00:03:47,580 --> 00:03:48,849
也可以是指针

91
00:03:48,849 --> 00:03:51,729
我们在指针那一周已经明确地知道说

92
00:03:51,729 --> 00:03:55,259
指针和数组它们有天然的联系

93
00:03:55,359 --> 00:03:56,679
对不对啊

94
00:03:56,679 --> 00:03:58,419
我们总是可以用指针的形式

95
00:03:58,419 --> 00:04:00,110
去访问一个数组

96
00:04:00,110 --> 00:04:01,789
比如说便利一个数组啊等等

97
00:04:01,789 --> 00:04:04,370
我们也可以用数组的形式去访问

98
00:04:04,370 --> 00:04:07,819
指针所代表的那一大片连续的地址空间

99
00:04:07,819 --> 00:04:10,280
所以他们俩之间是有天然联系的

100
00:04:10,280 --> 00:04:11,689
当然面对字符串

101
00:04:11,689 --> 00:04:16,170
它在内存当中的表达形式一定是数组

102
00:04:16,170 --> 00:04:17,699
我有一片连续的空间

103
00:04:17,699 --> 00:04:19,399
这一片连续空间就是数组

104
00:04:19,399 --> 00:04:21,738
而对他的访问可以是诉讼

105
00:04:21,738 --> 00:04:22,668
可以是指正

106
00:04:22,668 --> 00:04:24,939
这个我们后面慢慢都会看到

107
00:04:27,279 --> 00:04:28,800
对于c的标准库来说

108
00:04:29,819 --> 00:04:31,589
就像print f4 跟f一样

109
00:04:31,589 --> 00:04:34,879
那是放在s t dl里头的一个东西

110
00:04:34,879 --> 00:04:36,810
那么字符串处理函数呢

111
00:04:36,810 --> 00:04:38,009
我们放在一个头文件

112
00:04:38,009 --> 00:04:40,170
这些函数的原型放在一个头文件

113
00:04:40,170 --> 00:04:42,629
叫做string点字符串啊

114
00:04:42,629 --> 00:04:44,519
就是string string点

115
00:04:47,839 --> 00:04:50,649
我们要去定义一个变量

116
00:04:50,649 --> 00:04:53,490
说我们这个变量要表达一个字符串

117
00:04:53,490 --> 00:04:55,319
我们有几种不同的写法

118
00:04:55,319 --> 00:04:57,819
当然首先你要理解的一件事情是

119
00:04:57,819 --> 00:04:59,800
字符串是数组

120
00:04:59,800 --> 00:05:03,579
所以实际上这些变量其实都是字符

121
00:05:03,579 --> 00:05:04,660
数组的变量

122
00:05:04,660 --> 00:05:06,620
只不过它有不同的表现形式

123
00:05:09,240 --> 00:05:12,290
第一一种形式表达的是说

124
00:05:12,290 --> 00:05:14,379
我们现在呢有一个指针

125
00:05:14,598 --> 00:05:16,338
这个指针的名字叫做s t r

126
00:05:16,338 --> 00:05:19,278
它指向了一个字符数组

127
00:05:19,278 --> 00:05:21,139
这个里面放的内容是hello

128
00:05:23,259 --> 00:05:25,319
可是这个hello在哪儿

129
00:05:25,939 --> 00:05:27,920
这件事情我们等会展开来说哈

130
00:05:27,920 --> 00:05:29,540
这里面名堂其实非常的多

131
00:05:29,540 --> 00:05:31,180
小细节非常的多

132
00:05:31,538 --> 00:05:33,098
第二种形式是说

133
00:05:33,098 --> 00:05:35,949
现在呢我在这儿有一个字符数组了

134
00:05:35,949 --> 00:05:37,379
这个数组就在这儿

135
00:05:38,240 --> 00:05:40,339
它里面的内容会是hello

136
00:05:41,879 --> 00:05:44,720
第三种形式是说我有个字符数组

137
00:05:44,720 --> 00:05:48,420
叫做l这个lie呢有十个

138
00:05:49,040 --> 00:05:49,959
这是什么呢

139
00:05:49,959 --> 00:05:50,829
十个是什么呢

140
00:05:50,829 --> 00:05:53,500
十个是说我这个数组的大小是多少

141
00:05:53,500 --> 00:05:55,449
十个字节那么大

142
00:05:55,449 --> 00:05:58,000
然后我往里面放了什么

143
00:05:58,000 --> 00:05:59,620
放了hello

144
00:05:59,718 --> 00:06:03,079
这个hello这个字符串总会有几个字符呢

145
00:06:03,079 --> 00:06:06,980
我们可以数一下h e l l o5 个字符

146
00:06:07,598 --> 00:06:10,838
这五个字符在这个line里头

147
00:06:10,838 --> 00:06:12,819
要占据多大的空间呢

148
00:06:14,540 --> 00:06:17,259
六个字节的位置对不对

149
00:06:17,259 --> 00:06:19,500
因为它还有结尾的零

150
00:06:20,860 --> 00:06:24,470
所以字符串变量你把它写出来

151
00:06:24,470 --> 00:06:25,730
你千万要记住

152
00:06:25,730 --> 00:06:28,069
说你写出了这么一个字符串的

153
00:06:28,069 --> 00:06:29,899
字面量的表达形式之后

154
00:06:29,899 --> 00:06:34,379
其实编译器会再替你生成一个结尾的零的

155
00:06:36,060 --> 00:06:41,420
这样的东西由双引号括起来的东西啊

156
00:06:41,420 --> 00:06:44,269
在c语言里头叫做字符串的字面量

157
00:06:44,269 --> 00:06:46,139
或者叫做字符串的常量

158
00:06:46,680 --> 00:06:47,310
呃

159
00:06:47,310 --> 00:06:48,509
这个hello呢

160
00:06:48,509 --> 00:06:52,199
它会被编译器变成一个字符数组

161
00:06:52,199 --> 00:06:54,420
我们现在写出来是双引号的

162
00:06:54,420 --> 00:06:56,399
哈喽这个东西我之前写过很多很多的

163
00:06:56,399 --> 00:06:56,759
对不对

164
00:06:56,759 --> 00:06:59,250
我们print skin f都会有用到这样的东西

165
00:06:59,250 --> 00:07:01,319
print f里面我们用用它来输出

166
00:07:01,319 --> 00:07:02,370
我们要输出的内容

167
00:07:02,370 --> 00:07:03,810
也用它做格式的字符串

168
00:07:03,810 --> 00:07:06,000
caf里面我们用它来做格式的字符串

169
00:07:06,000 --> 00:07:07,379
这个东西我们见过很多

170
00:07:07,379 --> 00:07:08,519
这个东西

171
00:07:08,579 --> 00:07:11,850
对于c语言来说是一个字符串的字变量

172
00:07:11,850 --> 00:07:15,019
编译器看到它会把它变成一个字符数组

173
00:07:15,459 --> 00:07:17,350
然后把这个字符数组放在某个地方

174
00:07:17,350 --> 00:07:18,360
放在哪儿

175
00:07:18,420 --> 00:07:20,100
暂时我们先不操心

176
00:07:20,100 --> 00:07:20,939
但是我们知道说

177
00:07:20,939 --> 00:07:23,459
编译器会做出一个字符数组

178
00:07:23,459 --> 00:07:24,899
来表达这些内容

179
00:07:24,899 --> 00:07:26,160
然后把它放在某个地方

180
00:07:26,160 --> 00:07:29,129
然后这个字符数组的长度

181
00:07:29,129 --> 00:07:32,279
一定是你的眼睛所能够看见的

182
00:07:32,279 --> 00:07:35,019
那些字符的长度还要加一

183
00:07:35,019 --> 00:07:37,569
因为最后需要有一个零

184
00:07:37,569 --> 00:07:39,040
如果没有那个零

185
00:07:39,040 --> 00:07:40,470
它不是字符串

186
00:07:40,470 --> 00:07:42,029
一定是有那个零

187
00:07:42,029 --> 00:07:45,019
他才是c语言的字符串

188
00:07:46,160 --> 00:07:50,660
那如果你写了两个相邻的字符串常量

189
00:07:50,660 --> 00:07:52,490
它们会被自动连接起来

190
00:07:52,490 --> 00:07:53,600
你还记不记得

191
00:07:53,600 --> 00:07:56,339
在第二周我们见过这个程序

192
00:07:56,339 --> 00:07:58,579
当时我们什么也没说

193
00:07:59,019 --> 00:08:01,360
希望有人看出这里头有毛病

194
00:08:01,360 --> 00:08:05,000
结果呢很不幸没人发现这儿有问题

195
00:08:05,000 --> 00:08:07,040
当然有一些同学发现了这个是什么

196
00:08:07,040 --> 00:08:08,899
这个我们在字符类型那解释过了

197
00:08:08,899 --> 00:08:11,910
可是就没人发现说这个字符串

198
00:08:11,910 --> 00:08:12,629
这是双引号

199
00:08:12,629 --> 00:08:13,740
这是一个字符串

200
00:08:13,959 --> 00:08:15,459
后面啥符号也没有

201
00:08:15,459 --> 00:08:16,959
接着又来了一个字符串

202
00:08:16,959 --> 00:08:19,600
没人发现说这有什么不对劲的地方吗

203
00:08:20,500 --> 00:08:21,990
c语言说

204
00:08:21,990 --> 00:08:24,720
如果你有俩连相邻的字符串

205
00:08:24,720 --> 00:08:26,310
中间没有任何其他符号

206
00:08:26,310 --> 00:08:29,040
它会帮你把这两个字符串连接起来

207
00:08:29,040 --> 00:08:30,399
成为一个大的字符串

208
00:08:31,540 --> 00:08:32,639
当然除了这个做法

209
00:08:32,639 --> 00:08:33,480
我们还有另外一个做法

210
00:08:33,480 --> 00:08:35,279
我们可以在这一行的结尾呢

211
00:08:35,279 --> 00:08:37,590
不要那个结束的双引号

212
00:08:37,590 --> 00:08:38,818
我们来一个

213
00:08:38,980 --> 00:08:41,019
我们来一个反斜杠

214
00:08:41,019 --> 00:08:43,240
当然第二行也没有开头的双引号

215
00:08:43,240 --> 00:08:46,220
这个时候第一行结束的那个反斜杠

216
00:08:46,220 --> 00:08:49,299
表明说这个字符串还没有结束

217
00:08:49,299 --> 00:08:52,480
下一行的内容仍然是那个字符串的一部分

218
00:08:52,480 --> 00:08:54,600
当然如果我们这么做的话

219
00:08:54,600 --> 00:08:58,019
这里的这两个table会进入到字符串里头去

220
00:08:58,019 --> 00:08:59,100
它的输出就会不一样

221
00:08:59,100 --> 00:08:59,580
我们试一下

222
00:08:59,580 --> 00:09:00,139
看

223
00:09:00,240 --> 00:09:01,559
你看现在的输出

224
00:09:01,559 --> 00:09:05,500
在这个逗号和儒之间出现了两个table

225
00:09:06,240 --> 00:09:07,220
也就是说

226
00:09:07,220 --> 00:09:10,279
如果你采用这种方式来连接两个字符串

227
00:09:10,279 --> 00:09:11,419
上下两行的话

228
00:09:11,419 --> 00:09:14,559
那么其实我们一般就需要把第二行的这个

229
00:09:14,559 --> 00:09:16,000
贴到最头上去啊

230
00:09:16,000 --> 00:09:17,620
要不然这个table啊

231
00:09:17,620 --> 00:09:18,759
这样才是对的啊

232
00:09:18,759 --> 00:09:20,710
要不然这个table就会放在那了

233
00:09:20,710 --> 00:09:21,519
为什么有的时候

234
00:09:21,519 --> 00:09:23,789
我们会喜欢把代码写成这个样子呢

235
00:09:23,789 --> 00:09:24,960
是因为这样的话呢

236
00:09:24,960 --> 00:09:26,490
我这个程序看起来比较窄

237
00:09:26,490 --> 00:09:27,059
对不对

238
00:09:27,059 --> 00:09:28,909
它不是很宽呃

239
00:09:28,909 --> 00:09:32,120
人的眼睛其实能够关注的这个呃

240
00:09:32,120 --> 00:09:33,938
横向的距离是有限的啊

241
00:09:33,940 --> 00:09:36,879
所以为什么程序员会喜欢把这个显示器

242
00:09:36,879 --> 00:09:38,080
90度的转过来

243
00:09:38,080 --> 00:09:40,370
16比九这么宽屏的显示器

244
00:09:40,370 --> 00:09:41,899
对于看电影是好的

245
00:09:41,899 --> 00:09:43,370
对于看程序是不好的

246
00:09:43,370 --> 00:09:46,820
你的眼睛呃不适合看那么宽的东西啊

247
00:09:46,820 --> 00:09:48,379
你你不能关注于那么宽的东西

248
00:09:48,379 --> 00:09:50,120
你需要左右晃你的眼

249
00:09:50,120 --> 00:09:52,250
眼睛才能够看完那一整行的东西

250
00:09:52,250 --> 00:09:54,620
所以限制它比较窄一点

251
00:09:54,620 --> 00:09:57,470
其实对于阅读程序是会有有有利的

252
00:09:57,470 --> 00:10:00,429
所以我们稍微总结一下说

253
00:10:00,429 --> 00:10:01,899
c语言的字符串

254
00:10:01,899 --> 00:10:04,419
它是以字符数组的形态存在的

255
00:10:04,639 --> 00:10:06,080
而作为字符数组

256
00:10:06,080 --> 00:10:07,568
我们就知道这是一个数组

257
00:10:07,568 --> 00:10:10,208
因此你不能用传统的那些运算符

258
00:10:10,208 --> 00:10:11,288
对字符串去做运算

259
00:10:11,288 --> 00:10:12,938
比如说加减乘除这样的运算符

260
00:10:12,938 --> 00:10:14,859
对字符串这种类型是无效的

261
00:10:15,039 --> 00:10:16,629
后来的一些语言

262
00:10:16,629 --> 00:10:17,440
比如说java

263
00:10:17,440 --> 00:10:18,669
比如说像python

264
00:10:18,669 --> 00:10:20,049
比如像p h p

265
00:10:20,049 --> 00:10:22,330
它提供了一些简单的运算符

266
00:10:22,330 --> 00:10:23,769
来连接两个字符串

267
00:10:23,769 --> 00:10:25,600
或者对两个字符串做一些呃

268
00:10:25,600 --> 00:10:26,839
其他的一些运算

269
00:10:26,839 --> 00:10:28,879
比如说java可以用加号

270
00:10:28,879 --> 00:10:30,379
把两个字符串连接起来

271
00:10:30,379 --> 00:10:31,460
但是你要理解

272
00:10:31,460 --> 00:10:34,460
c语言出现在1970年代的早期

273
00:10:34,460 --> 00:10:38,779
在那个时候计算机更多的是做数值运算

274
00:10:38,980 --> 00:10:40,659
在80年代开始

275
00:10:40,659 --> 00:10:43,240
计算机才更多地投入做信息处理

276
00:10:43,240 --> 00:10:45,759
而兴趣处理和数字计算最大的不同

277
00:10:45,759 --> 00:10:48,059
就在于处理的是什么东西

278
00:10:48,299 --> 00:10:49,830
在c语言那个年代

279
00:10:49,830 --> 00:10:52,309
计算机程序更多的要处理的是数字

280
00:10:52,309 --> 00:10:54,019
而80年代以后

281
00:10:54,019 --> 00:10:56,360
计算机更多的要处理的是文字

282
00:10:56,360 --> 00:10:59,450
所以新的语言会更关注于几处

283
00:10:59,450 --> 00:11:00,559
处理文字的能力

284
00:11:00,559 --> 00:11:02,279
也就处理字符串的能力

285
00:11:02,980 --> 00:11:04,320
当然作为数组

286
00:11:04,320 --> 00:11:06,750
我们可以用数组的方式去便利这个字符串

287
00:11:06,750 --> 00:11:07,799
我们在这儿不展开

288
00:11:07,799 --> 00:11:09,059
因为我们后面有很多的例子

289
00:11:09,059 --> 00:11:10,509
要来做这样的事情

290
00:11:10,509 --> 00:11:12,759
那唯一特殊的地方

291
00:11:12,759 --> 00:11:15,070
字符串在c语言唯一特殊的地方

292
00:11:15,070 --> 00:11:15,490
就是

293
00:11:15,490 --> 00:11:17,409
你可以用双引号这种字符串

294
00:11:17,409 --> 00:11:20,190
字面量来初始化一个字符数组

295
00:11:20,190 --> 00:11:22,529
这是唯一表现出来

296
00:11:22,529 --> 00:11:24,570
说c语言懂字符串的地方

297
00:11:24,570 --> 00:11:26,740
就是他懂这个东西

298
00:11:27,639 --> 00:11:30,029
另外呢当然就是c的标准库

299
00:11:30,029 --> 00:11:32,009
它提供了一系列的字符串函数

300
00:11:32,009 --> 00:11:34,320
这些事情是我们后面马上要学习的


1
00:00:06,080 --> 00:00:07,160
我们回到指针

2
00:00:07,160 --> 00:00:09,800
当时曾经呃讲过的这件事情

3
00:00:09,800 --> 00:00:11,150
如果有一个函数

4
00:00:11,150 --> 00:00:13,160
你要让它返回一个指针的

5
00:00:13,160 --> 00:00:16,070
那么你如果返回的是本地变量的地址

6
00:00:16,070 --> 00:00:17,030
这是危险的

7
00:00:17,030 --> 00:00:20,089
因为一旦离开这个函数

8
00:00:20,089 --> 00:00:22,589
这个本地变量就不存在了

9
00:00:22,589 --> 00:00:24,100
我们可以来试一下

10
00:00:24,160 --> 00:00:26,320
我们现在做的事情是这样的啊

11
00:00:26,320 --> 00:00:27,519
我们有两个函数

12
00:00:27,519 --> 00:00:31,589
一个f一个g f函数会返回一个int的指针

13
00:00:31,589 --> 00:00:34,560
我们有一个本地变量int i等于12

14
00:00:34,560 --> 00:00:36,698
然后我们让它返回了i的指针

15
00:00:36,859 --> 00:00:42,189
我们在main里面把f返回的指针交给了新p

16
00:00:42,189 --> 00:00:44,109
p是一个int的指针啊

17
00:00:44,109 --> 00:00:44,829
然后这个时候呢

18
00:00:44,829 --> 00:00:45,939
我们就来检查一下

19
00:00:45,939 --> 00:00:48,399
这个新p所指的那个地方的

20
00:00:48,399 --> 00:00:49,450
那个整数是多少

21
00:00:49,450 --> 00:00:53,130
显然我们期待它会得到12啊

22
00:00:53,130 --> 00:00:54,960
然后呢我们又去掉了极函数

23
00:00:54,960 --> 00:00:58,279
奇函数呢里面有一个另外的变量叫做k

24
00:00:58,659 --> 00:01:01,539
这个k呢呃被初始化成24

25
00:01:01,539 --> 00:01:03,399
我们在奇函数里面呢会输出一下

26
00:01:03,399 --> 00:01:04,920
这个k等于多少

27
00:01:04,920 --> 00:01:06,659
奇函数调用完了以后

28
00:01:06,659 --> 00:01:08,849
我们再来访问一下

29
00:01:08,849 --> 00:01:12,939
p这个指针所指的那个地方的值

30
00:01:13,700 --> 00:01:16,000
还能期望得到12吗

31
00:01:16,000 --> 00:01:17,579
我们来试一下

32
00:01:19,540 --> 00:01:21,540
当然前面我们会有warning啊

33
00:01:21,540 --> 00:01:23,159
这个warning告诉你说

34
00:01:23,159 --> 00:01:27,319
这个堆栈里面的本地变量i返

35
00:01:27,319 --> 00:01:28,969
把他的地址返回出去的话

36
00:01:28,969 --> 00:01:30,980
这是有有问题的啊

37
00:01:30,980 --> 00:01:33,909
我们不管这个wann继续运行我们的程序

38
00:01:33,909 --> 00:01:36,730
我们得到的结果说这个说新p等于12

39
00:01:36,730 --> 00:01:38,319
这是在这一行说的

40
00:01:38,319 --> 00:01:40,480
我们从f那里得到了哎

41
00:01:40,480 --> 00:01:41,709
表面看起来没有问题吗

42
00:01:41,709 --> 00:01:42,700
这是本地变量

43
00:01:42,700 --> 00:01:44,920
你不是说本地变量离开f函数以后呃

44
00:01:44,920 --> 00:01:45,879
这个变量就不存在了吗

45
00:01:45,879 --> 00:01:47,750
为什么还是能够得到12

46
00:01:47,750 --> 00:01:48,530
不存在

47
00:01:48,530 --> 00:01:50,629
是说他不再受控了

48
00:01:50,629 --> 00:01:53,019
不是说他就不再在那里了

49
00:01:54,700 --> 00:01:59,969
没有人能保证这个12所在的那个地方

50
00:01:59,969 --> 00:02:02,198
还能够继续保持的那个12

51
00:02:02,198 --> 00:02:03,789
没有人保证这件事情

52
00:02:03,789 --> 00:02:05,498
但是不等于没有人保证说

53
00:02:05,498 --> 00:02:06,608
他一定不在那里了

54
00:02:06,608 --> 00:02:08,318
这是两个不同的逻辑上

55
00:02:08,318 --> 00:02:09,699
这是两个不同的概念

56
00:02:09,699 --> 00:02:10,439
对不对

57
00:02:10,599 --> 00:02:13,278
然后k等于24

58
00:02:13,278 --> 00:02:15,348
是这句话说的说k等于24

59
00:02:15,348 --> 00:02:19,979
然后这句话说现在p所在的地方是什么呢

60
00:02:20,299 --> 00:02:25,038
24了又变成24了

61
00:02:25,038 --> 00:02:26,058
我们在这个过程当中

62
00:02:26,058 --> 00:02:27,378
没有人对新p做任何事情

63
00:02:27,378 --> 00:02:28,639
也没有人对i做任何事情

64
00:02:28,639 --> 00:02:30,979
但是p所指的那个地方就变成24

65
00:02:30,979 --> 00:02:32,219
实际上是什么

66
00:02:33,759 --> 00:02:35,280
你可以自己改一点

67
00:02:35,280 --> 00:02:35,879
我自己的程序

68
00:02:35,879 --> 00:02:36,659
你试一下看

69
00:02:36,659 --> 00:02:39,719
如果你在f函数里头打印出i的地址

70
00:02:39,719 --> 00:02:41,580
在g函数里面打印出k的地址

71
00:02:41,580 --> 00:02:43,610
你会发现它们是一样的

72
00:02:45,949 --> 00:02:49,120
返回一个本地变量的地址

73
00:02:49,120 --> 00:02:51,590
让外面的程序继续去使用

74
00:02:51,590 --> 00:02:53,810
它是有风险的

75
00:02:53,810 --> 00:02:56,300
因为这个函数结束以后

76
00:02:56,300 --> 00:03:00,020
那个本地变量的地址会被继续分配给别人

77
00:03:00,020 --> 00:03:00,939
去使用的

78
00:03:01,919 --> 00:03:03,439
这房子你都收回去了

79
00:03:05,180 --> 00:03:07,020
这个业主又把他租给别人了

80
00:03:07,539 --> 00:03:09,580
你还留着那把钥匙有什么用

81
00:03:09,580 --> 00:03:12,879
但是如果你返回的是全局变量或者静态

82
00:03:12,879 --> 00:03:13,780
本地变量的地址

83
00:03:13,780 --> 00:03:14,819
那是安全的

84
00:03:14,838 --> 00:03:16,278
因为全局变量

85
00:03:16,278 --> 00:03:18,498
尽量本地变量的地址和函数没关系

86
00:03:18,498 --> 00:03:21,360
他们是全局生存期的

87
00:03:22,658 --> 00:03:24,479
那如果你返回在函数里面

88
00:03:24,479 --> 00:03:26,098
my lock的内存当然是安全的

89
00:03:26,098 --> 00:03:27,359
但是呢这容易造成问题

90
00:03:27,359 --> 00:03:30,098
这件事情整夜我们都是打了星号的哈

91
00:03:30,098 --> 00:03:31,508
这件事我们就不展开了

92
00:03:31,508 --> 00:03:33,788
最好的做法是返回传入的指针

93
00:03:33,788 --> 00:03:35,659
这事我们也不展开去讲了

94
00:03:35,799 --> 00:03:37,058
那关于全局变量呢

95
00:03:37,058 --> 00:03:38,679
最后再给大家一些提示哈

96
00:03:38,679 --> 00:03:41,169
呃首先第一条是不要使用全局变量

97
00:03:41,169 --> 00:03:43,419
来在函数之间传递参数和结果

98
00:03:43,419 --> 00:03:44,998
虽然我们刚才的代码

99
00:03:44,998 --> 00:03:47,128
大家看到全局变量可以起这个作用

100
00:03:47,128 --> 00:03:48,058
我调用全局

101
00:03:48,058 --> 00:03:49,199
我调用一个函数

102
00:03:49,199 --> 00:03:50,490
我不传参数给他

103
00:03:50,490 --> 00:03:52,680
让那个函数自己去读全局变量的值

104
00:03:52,680 --> 00:03:52,919
诶

105
00:03:52,919 --> 00:03:53,800
他读到了

106
00:03:53,800 --> 00:03:56,139
我也不去从这个函数return一个结果

107
00:03:56,139 --> 00:03:58,300
让这个函数把结果写到全局变量里面去

108
00:03:58,300 --> 00:04:00,000
在在in里面我也读到了

109
00:04:00,060 --> 00:04:01,259
可以这么做

110
00:04:01,259 --> 00:04:02,759
但是不要这么做

111
00:04:02,759 --> 00:04:03,629
历史上

112
00:04:03,629 --> 00:04:06,259
the boy出身的程序员会特别喜欢这样做

113
00:04:06,259 --> 00:04:07,580
他觉得他

114
00:04:07,580 --> 00:04:10,419
他宁愿把所有的变量都放在全局变量里头

115
00:04:10,479 --> 00:04:11,949
一个本地变量都不留

116
00:04:11,949 --> 00:04:14,379
然后所有的函数都是对那些全局变量

117
00:04:14,379 --> 00:04:15,189
去做操作

118
00:04:15,189 --> 00:04:19,228
这是从早期直接写汇编程序带来的后果

119
00:04:19,228 --> 00:04:22,199
因为汇编语言写程序没有本地变量可用啊

120
00:04:22,199 --> 00:04:24,149
所有的变量都要程序员自己去分配

121
00:04:24,149 --> 00:04:26,480
写c on c语言程序不能这么写

122
00:04:26,480 --> 00:04:29,180
应该要尽量的去避免使用全局变量

123
00:04:29,180 --> 00:04:30,439
大家有兴趣可以去看一下

124
00:04:30,439 --> 00:04:32,300
去年丰田汽车出的那个case

125
00:04:32,300 --> 00:04:35,459
当时呃流传出来的一些这个

126
00:04:36,300 --> 00:04:38,180
这个对这件事情的描述啊

127
00:04:38,180 --> 00:04:41,959
其中有一个非常其中有个非常大的问题

128
00:04:41,959 --> 00:04:45,620
就是那些代码里面大量的使用了全局变量

129
00:04:45,620 --> 00:04:47,029
造成了一些问题

130
00:04:47,029 --> 00:04:47,810
这个问题是什么呢

131
00:04:47,810 --> 00:04:49,420
就是全局变量使用

132
00:04:49,420 --> 00:04:51,399
如果你这个函数使用了全局变量

133
00:04:51,399 --> 00:04:52,629
使用了静态本地变量

134
00:04:52,629 --> 00:04:55,100
那么这个函数呢是不可重入的

135
00:04:55,579 --> 00:04:57,379
我们前面加了型号了啊

136
00:04:57,379 --> 00:05:00,620
这这这句话大家不一定要能够理解

137
00:05:00,620 --> 00:05:02,480
或者接受这些函数呢

138
00:05:02,480 --> 00:05:04,600
对于现成多线程的环境

139
00:05:04,600 --> 00:05:05,740
它是不安全的

140
00:05:05,740 --> 00:05:08,920
所以尽量避免使用全局变量和静态

141
00:05:08,920 --> 00:05:09,420
本地变量


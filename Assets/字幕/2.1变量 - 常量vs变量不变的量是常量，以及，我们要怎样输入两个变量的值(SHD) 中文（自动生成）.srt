1
00:00:04,120 --> 00:00:08,199
那在这个式子里头100减price

2
00:00:08,199 --> 00:00:10,019
这里面我们出现了100

3
00:00:10,099 --> 00:00:12,439
100是一个数字对吧

4
00:00:12,439 --> 00:00:14,320
对大家都认得这就是个数字

5
00:00:14,320 --> 00:00:15,939
这是一个固定不变的数字

6
00:00:15,939 --> 00:00:16,300
对不对

7
00:00:16,300 --> 00:00:18,039
在程序的运行过程当中

8
00:00:18,039 --> 00:00:19,980
这个100是不会变化的

9
00:00:20,099 --> 00:00:21,778
那个price是会变化的

10
00:00:21,778 --> 00:00:22,798
你输入多少

11
00:00:22,798 --> 00:00:23,699
它是多少

12
00:00:23,699 --> 00:00:25,559
那个change是会变化的

13
00:00:25,559 --> 00:00:26,579
你输的price多少

14
00:00:26,579 --> 00:00:27,689
change会跟着变

15
00:00:27,689 --> 00:00:29,548
会变的是变量

16
00:00:29,548 --> 00:00:32,490
不会变的是常量

17
00:00:32,490 --> 00:00:34,859
直接写在程序里面的那个数字

18
00:00:34,859 --> 00:00:36,979
我们把它叫做直接量

19
00:00:37,659 --> 00:00:40,500
那么当然其实更好的方式是什么呢

20
00:00:40,500 --> 00:00:41,340
在这个地方

21
00:00:41,340 --> 00:00:43,789
更好的方式不是把100直接写在那

22
00:00:43,789 --> 00:00:46,250
而是给这个110个名字

23
00:00:46,250 --> 00:00:48,049
所以更好的办法是

24
00:00:48,049 --> 00:00:50,070
定义一个叫做常量的东西

25
00:00:50,070 --> 00:00:51,450
定义一个名字

26
00:00:51,450 --> 00:00:55,098
也就是说像这样写const int amount等于100

27
00:00:55,140 --> 00:00:58,590
当然这也是c99 的写法啊

28
00:00:58,590 --> 00:00:59,280
如果这样写

29
00:00:59,280 --> 00:01:00,359
我们的程序会变成什么样呢

30
00:01:00,359 --> 00:01:01,399
我们来看一下

31
00:01:02,060 --> 00:01:05,900
我们可以在这个程序开始的地方呢

32
00:01:05,900 --> 00:01:08,959
定义说我们有一个const int amount

33
00:01:08,959 --> 00:01:10,939
然后呢它的值是100

34
00:01:11,079 --> 00:01:13,480
那么在下面计算change的时候呢

35
00:01:13,480 --> 00:01:17,060
我们就是用这个100去减这个price啊

36
00:01:17,060 --> 00:01:18,980
而不是直接把这个100写在这里了

37
00:01:18,980 --> 00:01:20,959
我们写的是amount减去price

38
00:01:20,959 --> 00:01:22,400
这样做有很多很多的好处

39
00:01:22,400 --> 00:01:25,209
首先第一个好处是说别人去看那个100

40
00:01:25,209 --> 00:01:26,170
不知道100是什么

41
00:01:26,170 --> 00:01:27,730
但是如果别人看到amount知道啊

42
00:01:27,730 --> 00:01:29,239
这表示的是金额

43
00:01:30,000 --> 00:01:32,900
所以用这个有意义的名字

44
00:01:32,900 --> 00:01:34,400
可以让别人更容易理解

45
00:01:34,400 --> 00:01:36,010
你的这个数字是什么

46
00:01:36,010 --> 00:01:37,810
我们把出现在程序里面的

47
00:01:37,810 --> 00:01:40,500
这种莫名其妙的数字叫做magic number

48
00:01:41,359 --> 00:01:42,459
像做魔术一样

49
00:01:42,459 --> 00:01:43,900
你不知道它到底是什么啊

50
00:01:43,900 --> 00:01:45,069
你就看到一个100

51
00:01:45,069 --> 00:01:46,299
你不知道100到底是什么

52
00:01:46,299 --> 00:01:47,590
但是你叫做amount

53
00:01:47,590 --> 00:01:49,079
大家就都能懂了

54
00:01:49,239 --> 00:01:50,439
第二个好处呢

55
00:01:50,439 --> 00:01:52,719
我们把这个东西放在前面

56
00:01:52,719 --> 00:01:56,140
那如果将来你要去修改你的程序的时候

57
00:01:56,379 --> 00:01:58,450
很容易找到这个100

58
00:01:58,450 --> 00:02:00,760
很容易找到这个amount好

59
00:02:00,760 --> 00:02:03,980
所以这是我们使用这种常量来代替

60
00:02:03,980 --> 00:02:06,980
在数在这个程序当中的具体的数字啊

61
00:02:06,980 --> 00:02:08,509
这是我们经常用的一种做法

62
00:02:08,509 --> 00:02:11,598
这里的这个const是一个修饰符啊

63
00:02:11,598 --> 00:02:14,239
这个修饰符呢放在一个变量的定义的前面

64
00:02:14,239 --> 00:02:18,169
用来说这个变量不能被修改

65
00:02:18,169 --> 00:02:20,680
它可以被付出值

66
00:02:20,739 --> 00:02:22,778
当然它一定要背负初值对吧

67
00:02:22,778 --> 00:02:24,158
如果你没有给他初始化

68
00:02:24,158 --> 00:02:25,479
它就没有一个明确的值了

69
00:02:25,479 --> 00:02:26,679
这个我们在前面看到过

70
00:02:26,679 --> 00:02:28,359
我们显然需要给它一个明确的值

71
00:02:28,359 --> 00:02:29,729
我们需要对它做初始化

72
00:02:29,729 --> 00:02:32,099
但是一旦对它做完初始化以后

73
00:02:32,399 --> 00:02:35,158
你就不能再拿它去做任何的修改了

74
00:02:35,158 --> 00:02:39,340
你不能再对他去做任何的赋值的操作

75
00:02:39,340 --> 00:02:41,020
也就是说不能把这个变量呢

76
00:02:41,020 --> 00:02:42,039
放在复制号的左边

77
00:02:42,039 --> 00:02:43,270
我们来试一下这件事情

78
00:02:43,270 --> 00:02:47,949
如果我们现在试图在这个之后说amount呢

79
00:02:47,949 --> 00:02:51,680
我们也要让它等于比如说90好

80
00:02:51,680 --> 00:02:53,719
然后我们来看一下编译会有什么样的结果

81
00:02:55,340 --> 00:02:56,360
除了一个编译错误

82
00:02:56,360 --> 00:03:00,789
说这个read only valuable is not assignable啊

83
00:03:00,789 --> 00:03:01,709
意思是什么呢

84
00:03:01,709 --> 00:03:03,568
这个只读的变量啊

85
00:03:03,568 --> 00:03:04,829
说amanda等于90

86
00:03:04,829 --> 00:03:05,429
这句话

87
00:03:05,429 --> 00:03:06,989
这是一个只读的变量

88
00:03:06,989 --> 00:03:09,030
是不能够被赋值的

89
00:03:09,030 --> 00:03:10,889
所以你如果试图去做修改

90
00:03:10,889 --> 00:03:13,000
编译器会指出这个错误啊

91
00:03:13,139 --> 00:03:15,389
接下去如果我们想要做一个修改

92
00:03:15,389 --> 00:03:17,460
我们现在这个金额100

93
00:03:17,460 --> 00:03:20,000
是固定写在程序里头的

94
00:03:20,000 --> 00:03:22,580
如果我们想让用户输入这个100

95
00:03:22,580 --> 00:03:24,259
我们这个程序要怎么改

96
00:03:24,959 --> 00:03:26,538
那有有多少地方要改

97
00:03:26,538 --> 00:03:30,659
首先如果我们想要让用户输入一个东西

98
00:03:30,659 --> 00:03:33,750
那我们就得要有一个东西来存放它

99
00:03:33,750 --> 00:03:34,860
那个东西叫做变量

100
00:03:34,860 --> 00:03:36,599
所以我们要有个变量来存放它

101
00:03:36,599 --> 00:03:38,340
我们现在有一个变量叫做amount

102
00:03:38,340 --> 00:03:41,310
但那个是const cos的东西是不能变的

103
00:03:41,310 --> 00:03:44,639
所以我们得要有一个可以变的变量

104
00:03:44,639 --> 00:03:47,449
然后我们还要有办法

105
00:03:47,449 --> 00:03:50,088
从用户那里把它给读进来

106
00:03:50,088 --> 00:03:50,658
对不对

107
00:03:50,658 --> 00:03:52,539
好我们来试一下这件事应该怎么做

108
00:03:52,838 --> 00:03:53,889
所以现在呢

109
00:03:53,889 --> 00:03:57,038
首先我们得要啊对这个变量做一个修改

110
00:03:57,038 --> 00:03:59,099
这个变量呢它不再是const了

111
00:03:59,159 --> 00:04:02,340
那我们原来把amount起成那个名字

112
00:04:02,340 --> 00:04:03,509
用全部的大写

113
00:04:03,509 --> 00:04:04,860
也是因为一个原因

114
00:04:04,860 --> 00:04:09,199
就是呃我们一般呢对一个const的变量啊

115
00:04:09,199 --> 00:04:12,810
我们需要强调说他是全大写的

116
00:04:12,810 --> 00:04:14,189
用来表明说他是const

117
00:04:14,189 --> 00:04:15,599
现在呢它不是const了

118
00:04:15,599 --> 00:04:17,490
那我们也就不需要它是全大写了

119
00:04:17,490 --> 00:04:22,379
我们会把它改成小写的amount

120
00:04:22,379 --> 00:04:25,879
然后呢我们还是可以让它有一个初始值啊

121
00:04:25,879 --> 00:04:26,750
这没有问题

122
00:04:26,750 --> 00:04:28,100
在输入了进入了之后呢

123
00:04:28,100 --> 00:04:30,079
我们需要让他再做一次输入

124
00:04:30,079 --> 00:04:35,579
所以我们需要说请输入呢这个票面

125
00:04:37,699 --> 00:04:41,660
然后再来一个skin f

126
00:04:41,660 --> 00:04:48,720
说我们需要输入那个叫做amount的东西

127
00:04:48,720 --> 00:04:49,889
千万别忘了

128
00:04:49,889 --> 00:04:52,480
在这里我们需要有一个and的符号

129
00:04:52,480 --> 00:04:54,759
然后我们把这个千句的计算呢

130
00:04:54,759 --> 00:04:56,920
就改成说从那个amount来了

131
00:04:56,920 --> 00:04:58,839
最后我们得到那个结果

132
00:04:59,098 --> 00:05:01,139
也就是说我们在程序当中

133
00:05:01,139 --> 00:05:04,488
当然你可以出现很多次的scaf

134
00:05:04,488 --> 00:05:07,470
出现多个的这个变量啊

135
00:05:07,470 --> 00:05:10,319
那么当程序要求读入多个数字的时候呢

136
00:05:10,319 --> 00:05:12,420
你可以在一行里面输入啊

137
00:05:12,420 --> 00:05:14,959
然后中间输入的时候用空格来分开

138
00:05:14,959 --> 00:05:17,389
也可以在多行里面输入呃

139
00:05:17,389 --> 00:05:18,889
在gf的时候呢

140
00:05:18,889 --> 00:05:21,740
如果你用一个scaf

141
00:05:21,740 --> 00:05:23,839
每次用一个cf去读一个变量

142
00:05:23,839 --> 00:05:24,560
当然可以

143
00:05:24,560 --> 00:05:28,379
你也可以用一个f去读两个

144
00:05:28,379 --> 00:05:29,800
甚至更多的变量

145
00:05:29,879 --> 00:05:31,860
这个时候也可以做啊

146
00:05:31,860 --> 00:05:33,839
我们只要在那个格式字符串里面

147
00:05:33,839 --> 00:05:35,519
放多个百分号d就可以了

148
00:05:35,519 --> 00:05:37,819
我们来看一下这事该怎么做呢

149
00:05:39,699 --> 00:05:41,519
比如说像这个程序啊

150
00:05:41,519 --> 00:05:43,420
plus他的做法

151
00:05:43,420 --> 00:05:46,300
他做的事情是说他要去读入啊

152
00:05:46,300 --> 00:05:48,670
两个变量a和b的值

153
00:05:48,670 --> 00:05:49,420
然后呢

154
00:05:49,420 --> 00:05:53,360
把这两个变量这个加相加以后的结果呢

155
00:05:53,360 --> 00:05:54,189
输出给你

156
00:05:54,189 --> 00:05:56,110
所以呢我们只有一句提示说

157
00:05:56,110 --> 00:05:57,730
请输入两个整数啊

158
00:05:57,730 --> 00:06:01,389
然后呢我们就用scaf两个百分号d

159
00:06:01,389 --> 00:06:03,538
中间呢是用空格隔开

160
00:06:03,538 --> 00:06:06,119
这个中间用空格还是用别的符号

161
00:06:06,119 --> 00:06:07,319
是有讲究的

162
00:06:07,319 --> 00:06:08,699
但是呢我们不在今天展开

163
00:06:08,699 --> 00:06:11,329
我们还是要在讲c语言的输入输出的时候

164
00:06:11,329 --> 00:06:11,750
我们再来讲

165
00:06:11,750 --> 00:06:13,980
这中间如果你用别的东西会怎么样啊

166
00:06:13,980 --> 00:06:16,259
然后因为我们有两个百分号d

167
00:06:16,259 --> 00:06:19,180
所以呢就会对应有两个变量

168
00:06:19,180 --> 00:06:21,970
当然别忘了你还需要有这个a的符号啊

169
00:06:21,970 --> 00:06:23,170
我们对应有这两个变量

170
00:06:23,170 --> 00:06:25,360
所以第一个数字会给a

171
00:06:25,360 --> 00:06:27,089
第二个数字会给b

172
00:06:27,089 --> 00:06:30,420
然后我们在输出的时候也做的比较复杂

173
00:06:30,420 --> 00:06:32,910
你看我们有三个百分号d

174
00:06:32,910 --> 00:06:36,149
它会依次对应于后面的a b

175
00:06:36,149 --> 00:06:38,310
还有a加b的结果

176
00:06:38,310 --> 00:06:39,899
既然我们在第一次课里面

177
00:06:39,899 --> 00:06:40,740
我们已经看到过

178
00:06:40,740 --> 00:06:40,920
说

179
00:06:40,920 --> 00:06:42,660
你可以把23+46

180
00:06:42,660 --> 00:06:45,300
放在这个print f里头

181
00:06:45,300 --> 00:06:46,740
那个加号是可以放进去的

182
00:06:46,740 --> 00:06:48,720
那么当然我们现在有两个变量的

183
00:06:48,720 --> 00:06:50,810
加这么一个计算的

184
00:06:50,810 --> 00:06:52,189
叫做表达式的东西

185
00:06:52,189 --> 00:06:54,019
也可以放在print里面

186
00:06:54,060 --> 00:06:55,649
我们来试一下这个程序

187
00:06:55,649 --> 00:06:56,879
重点我们想看一下

188
00:06:56,879 --> 00:06:57,689
这个时候

189
00:06:57,689 --> 00:06:59,160
当我们的一个can f

190
00:06:59,160 --> 00:07:01,430
要想输入两个变量的值的时候

191
00:07:01,430 --> 00:07:03,259
我们是怎么做输入的

192
00:07:03,259 --> 00:07:05,600
这是我们的press.c

193
00:07:05,600 --> 00:07:07,779
我们来编译这个press.c

194
00:07:10,639 --> 00:07:12,069
请输入两个整数

195
00:07:12,069 --> 00:07:14,259
第一种做法是一空格

196
00:07:14,259 --> 00:07:15,158
二回车

197
00:07:15,158 --> 00:07:16,869
他告诉我1+2=3

198
00:07:16,869 --> 00:07:19,439
第二种做法是一回车

199
00:07:20,180 --> 00:07:21,579
他继续在那里等你

200
00:07:21,579 --> 00:07:23,050
因为它需要两个东西

201
00:07:23,050 --> 00:07:25,120
所以它你必须给他两个东西

202
00:07:25,120 --> 00:07:26,379
你没有给到他两个

203
00:07:26,379 --> 00:07:27,279
他还会要等你

204
00:07:27,279 --> 00:07:28,600
所以再给他一个二

205
00:07:28,939 --> 00:07:30,319
得到了一个三

206
00:07:31,120 --> 00:07:33,959
假如说我们一开始就一不小心按了个回车

207
00:07:33,959 --> 00:07:35,189
按了很多个回车

208
00:07:35,189 --> 00:07:35,970
没事儿

209
00:07:35,970 --> 00:07:38,939
只要你没有输入足够的两个东西

210
00:07:38,939 --> 00:07:39,629
它都会等你

211
00:07:39,629 --> 00:07:42,069
所以来个一来个二得到三

212
00:07:42,069 --> 00:07:44,199
假如跟之前一样

213
00:07:44,199 --> 00:07:46,300
不小心没有输入数字

214
00:07:46,300 --> 00:07:47,779
输入了一个字符串

215
00:07:51,540 --> 00:07:53,040
这发生的是什么

216
00:07:53,319 --> 00:07:58,139
这发生的就是其实caf在这个时候出错了

217
00:07:58,218 --> 00:08:00,199
我们现在写的非常简单的程序

218
00:08:00,199 --> 00:08:03,079
根本就没有去判断说scaf有没有出错

219
00:08:04,079 --> 00:08:06,079
然后那两个变量怎么了

220
00:08:06,079 --> 00:08:07,098
a和b怎么了

221
00:08:07,098 --> 00:08:09,379
你记不记得我们在什么时候遇到过

222
00:08:09,379 --> 00:08:11,220
这种稀奇古怪的数字呢

223
00:08:12,120 --> 00:08:14,000
那两个变量没有被初始化

224
00:08:14,000 --> 00:08:14,509
对不对

225
00:08:14,509 --> 00:08:16,040
所以那两个变量没有初始化

226
00:08:16,040 --> 00:08:17,000
原来内存里面有什么

227
00:08:17,000 --> 00:08:17,720
那就是什么

228
00:08:17,720 --> 00:08:19,459
于是cf出错了

229
00:08:19,459 --> 00:08:20,810
a和b没有得到值

230
00:08:20,810 --> 00:08:22,730
但是我们程序还会继续往下走

231
00:08:22,730 --> 00:08:24,220
print f还会执行

232
00:08:24,220 --> 00:08:26,379
拿两个很奇怪的a和b加起来

233
00:08:26,379 --> 00:08:27,139
给了你一个结果


1
00:00:04,400 --> 00:00:06,519
对于一个字节来说

2
00:00:06,519 --> 00:00:08,320
如果是八位的啊

3
00:00:08,320 --> 00:00:10,839
也是我们在int整数当中的那个chara类型

4
00:00:10,839 --> 00:00:13,839
它可以表达的是八个0~8个一

5
00:00:13,839 --> 00:00:16,800
那其中的八个零表达的是零

6
00:00:18,199 --> 00:00:20,528
最高位为零的那些数

7
00:00:20,528 --> 00:00:25,769
从00000001~01111111

8
00:00:25,769 --> 00:00:28,589
它表达的是1~127

9
00:00:28,589 --> 00:00:31,019
这个是纯二进制数

10
00:00:31,019 --> 00:00:33,299
而高位为一的那些数

11
00:00:33,299 --> 00:00:37,000
从11111~10万

12
00:00:37,000 --> 00:00:39,039
注意这是从大到小了

13
00:00:39,039 --> 00:00:43,119
那么它对应的我们用补码来表示的数呢

14
00:00:43,119 --> 00:00:45,579
是-一到负的128

15
00:00:47,460 --> 00:00:51,299
这里是让所有初学者最疑惑的地方

16
00:00:51,320 --> 00:00:52,939
作为纯二进制

17
00:00:52,939 --> 00:00:54,320
这是255

18
00:00:54,320 --> 00:00:57,899
当做一个补码来看待它就是-1

19
00:00:58,619 --> 00:01:01,869
所以实际上数据类型也好

20
00:01:01,869 --> 00:01:03,250
数据的范围也好

21
00:01:03,250 --> 00:01:04,480
我们在说的是什么

22
00:01:04,480 --> 00:01:07,180
你在计算机里面所存在的东西

23
00:01:07,180 --> 00:01:08,530
是纯二进制的东西

24
00:01:08,530 --> 00:01:11,019
但是我们把它拿出来的时候

25
00:01:11,019 --> 00:01:12,400
当他什么来看待

26
00:01:12,400 --> 00:01:15,079
我们当它是纯二进制数

27
00:01:15,079 --> 00:01:16,969
看待它就是255

28
00:01:16,969 --> 00:01:20,599
我们当它是一个整数来看待它就是-1

29
00:01:21,340 --> 00:01:23,010
但是这又指的是

30
00:01:23,010 --> 00:01:25,019
当我们这个整数是一个字节的整数

31
00:01:25,019 --> 00:01:26,519
也就是c h a r的时候

32
00:01:26,519 --> 00:01:29,329
如果他是别的类型的整数

33
00:01:29,329 --> 00:01:30,230
它就不是-1

34
00:01:30,230 --> 00:01:31,920
我们可以来试一下这件事情

35
00:01:31,980 --> 00:01:33,900
我们有一个c hr的变量

36
00:01:33,900 --> 00:01:36,060
c呢等于255

37
00:01:37,260 --> 00:01:40,599
我们还有一个int的变量

38
00:01:40,599 --> 00:01:42,640
i也等于255

39
00:01:42,640 --> 00:01:50,909
然后我们要试图输出c的值和i的值

40
00:01:50,909 --> 00:01:53,799
你看我们运行以后的结果

41
00:01:53,799 --> 00:01:56,709
同样是这两个变量都等于255

42
00:01:56,709 --> 00:01:58,838
对于c来说它就是-1

43
00:01:58,838 --> 00:02:00,399
而对于int来说

44
00:02:00,399 --> 00:02:01,539
它是255

45
00:02:01,539 --> 00:02:02,168
为什么

46
00:02:02,168 --> 00:02:03,989
因为int有32个比特

47
00:02:03,989 --> 00:02:05,370
显然255

48
00:02:05,370 --> 00:02:09,758
只是它的最低的那一个字节被填成

49
00:02:09,758 --> 00:02:11,229
被被填成全一了

50
00:02:11,229 --> 00:02:13,149
它的最高位仍然保持为零

51
00:02:13,149 --> 00:02:14,280
所以它是一个

52
00:02:14,519 --> 00:02:16,679
这才是一个正数

53
00:02:16,679 --> 00:02:20,370
也就是说对于那个c来说

54
00:02:20,370 --> 00:02:21,389
我们看到的是

55
00:02:21,389 --> 00:02:24,629
它整个数的范围就是11111111

56
00:02:24,629 --> 00:02:25,469
最高位为一

57
00:02:25,469 --> 00:02:26,520
所以它是一个负数

58
00:02:26,520 --> 00:02:27,870
而对于那个i来说

59
00:02:27,870 --> 00:02:30,460
我们看到的还是12345678

60
00:02:30,460 --> 00:02:32,340
12345678

61
00:02:33,099 --> 00:02:35,550
12345678

62
00:02:35,550 --> 00:02:38,430
然后才有11111111

63
00:02:38,430 --> 00:02:40,080
在整个int的范围内

64
00:02:40,080 --> 00:02:43,818
它其实只是一个挺小的数

65
00:02:43,818 --> 00:02:44,449
对不对

66
00:02:44,449 --> 00:02:46,189
他前面还有很多位可以填充为一呢

67
00:02:46,189 --> 00:02:47,330
这些位都没有填充为一

68
00:02:47,330 --> 00:02:48,590
它只是最后那一个字节

69
00:02:48,590 --> 00:02:50,210
有八个比特的一而已

70
00:02:50,210 --> 00:02:51,889
所以它是一个正的255

71
00:02:51,889 --> 00:02:52,949
而对于c来说

72
00:02:52,949 --> 00:02:55,659
这已经足以让它成为一个负数了

73
00:02:55,699 --> 00:02:57,110
所以回过来说

74
00:02:57,110 --> 00:02:58,699
我们刚才通过size of

75
00:02:58,699 --> 00:03:02,180
已经看到我们不同的整数有不同的大小

76
00:03:02,180 --> 00:03:03,080
trash一个字节

77
00:03:03,080 --> 00:03:04,099
short两个字节

78
00:03:04,099 --> 00:03:06,498
int取决于编译器

79
00:03:06,498 --> 00:03:08,110
long取决于编译器

80
00:03:08,110 --> 00:03:08,770
可能四个字节

81
00:03:08,770 --> 00:03:09,550
可能八个字节

82
00:03:09,550 --> 00:03:10,569
int可能四个字节

83
00:03:10,569 --> 00:03:10,990
八个字节

84
00:03:10,990 --> 00:03:11,830
long long是八个字节

85
00:03:11,830 --> 00:03:14,939
因此他们就会有各自不同的整数的范围

86
00:03:14,939 --> 00:03:15,719
对于他来说

87
00:03:15,719 --> 00:03:17,870
他是从负的128~127

88
00:03:17,870 --> 00:03:18,889
对于shot来说

89
00:03:18,889 --> 00:03:21,979
它是从负的32768~32767

90
00:03:22,019 --> 00:03:24,028
而int是什么呢

91
00:03:24,028 --> 00:03:26,639
它就应该是叫做int的范围

92
00:03:26,639 --> 00:03:31,598
是叫做从二的三是二次方减一

93
00:03:31,598 --> 00:03:36,788
负的到二的三次二次方减一再减一

94
00:03:36,788 --> 00:03:37,960
那么一个数

95
00:03:40,039 --> 00:03:43,359
你看我们的char表达的是负的

96
00:03:43,359 --> 00:03:46,759
128~127

97
00:03:47,199 --> 00:03:48,520
为什么两边不相等

98
00:03:48,520 --> 00:03:50,199
为什么负数要比正数多一个

99
00:03:50,199 --> 00:03:51,460
因为你想我们中间还有个零

100
00:03:51,460 --> 00:03:52,090
对不对

101
00:03:52,090 --> 00:03:55,300
我们一个自己能够表达的数

102
00:03:55,300 --> 00:03:58,359
总共是256个

103
00:03:58,359 --> 00:04:00,278
然后我们要把这个256个

104
00:04:00,278 --> 00:04:03,739
分成三个部分对吧

105
00:04:03,739 --> 00:04:04,968
中间有一个零

106
00:04:04,968 --> 00:04:07,659
然后呢一边是128

107
00:04:07,659 --> 00:04:09,250
另外一边就是127

108
00:04:09,250 --> 00:04:10,930
这样加起来才能是256

109
00:04:10,930 --> 00:04:12,310
你不可能说两边都是250

110
00:04:12,310 --> 00:04:13,030
128的话

111
00:04:13,030 --> 00:04:14,830
那这个这个零在哪对吧

112
00:04:14,830 --> 00:04:18,139
所以一定是有一边要少一点的

113
00:04:18,158 --> 00:04:20,858
然后按照我们的补码的这个设计的话

114
00:04:20,858 --> 00:04:22,358
刚好就是少一点的

115
00:04:22,358 --> 00:04:25,040
是在这个正数的这边啊

116
00:04:25,040 --> 00:04:27,800
所以所有的这个整数类型的这个呃

117
00:04:27,800 --> 00:04:28,819
数的范围都是这样子

118
00:04:28,819 --> 00:04:29,779
在负的那边

119
00:04:29,779 --> 00:04:34,439
它可以到那个负的二的n减一次方

120
00:04:34,439 --> 00:04:37,439
然后正的那边是到二的n减一次方

121
00:04:37,439 --> 00:04:39,819
再减一好

122
00:04:39,819 --> 00:04:42,249
所以在这个数值范围是这样子的

123
00:04:42,249 --> 00:04:43,298
我们在这里说到

124
00:04:43,298 --> 00:04:45,819
说这个八个一被当做纯二进制

125
00:04:45,819 --> 00:04:47,389
开大的时候是255

126
00:04:47,389 --> 00:04:49,759
当做补码看待的时候是-1

127
00:04:49,759 --> 00:04:53,600
那么我们已经在说这个其实在计算机内部

128
00:04:53,600 --> 00:04:55,399
它永远就是八个一

129
00:04:55,399 --> 00:04:57,379
但是你拿出来的时候

130
00:04:57,379 --> 00:04:59,180
你怎么看它就会不一样

131
00:04:59,180 --> 00:05:02,529
所以如果我们想要把它拿出来的时候

132
00:05:02,529 --> 00:05:04,720
也当做一个纯二进制来看待

133
00:05:04,720 --> 00:05:06,610
我们需要在那个类型的前面

134
00:05:06,610 --> 00:05:09,019
再加一个关键字叫做on sign

135
00:05:09,019 --> 00:05:13,490
如果我们现在的这个c是叫做

136
00:05:13,490 --> 00:05:14,930
unsigned char

137
00:05:14,930 --> 00:05:19,779
我们看一下它的结果就变成255了

138
00:05:19,779 --> 00:05:21,639
on sn的意思是说

139
00:05:21,639 --> 00:05:28,139
这个整数不以补码的形式来表示负数

140
00:05:28,139 --> 00:05:30,810
这个整数没有负数部分

141
00:05:30,810 --> 00:05:33,740
只有零和正整数部分

142
00:05:34,680 --> 00:05:38,709
也就是说我们不把高位为一的那些数字

143
00:05:38,709 --> 00:05:40,810
像这样高位为一的这个数字

144
00:05:40,810 --> 00:05:42,639
我们不把它看作是补码

145
00:05:42,639 --> 00:05:44,620
我们看作是纯二进制

146
00:05:44,620 --> 00:05:48,160
所以你想要用变量来表达纯二进制的时候

147
00:05:48,160 --> 00:05:51,649
你需要用on s unsd带来的一个副作用是

148
00:05:51,649 --> 00:05:55,360
它使得这个类型所能够表达的数

149
00:05:55,560 --> 00:05:57,689
在正数部分会扩大

150
00:05:57,689 --> 00:06:02,660
你看原来我们的00000000~11

151
00:06:02,660 --> 00:06:06,699
11111表达的是0~255

152
00:06:07,800 --> 00:06:09,439
这是我们纯二进制的

153
00:06:09,439 --> 00:06:11,959
如果作为一个char来说

154
00:06:11,959 --> 00:06:13,639
不带on s普通的券来说

155
00:06:13,639 --> 00:06:14,600
它表达的是负的

156
00:06:14,600 --> 00:06:17,959
128~127

157
00:06:17,959 --> 00:06:21,468
那现在我们能够表达255了

158
00:06:21,468 --> 00:06:24,040
这就是127的两倍

159
00:06:24,339 --> 00:06:26,199
还多一个对吧啊

160
00:06:26,199 --> 00:06:28,439
所以当用unset的时候

161
00:06:28,439 --> 00:06:31,079
它能够表达的正数的范围会扩大一倍啊

162
00:06:31,079 --> 00:06:32,009
会扩大一倍

163
00:06:32,009 --> 00:06:33,980
但是呢它就不能表达负数了

164
00:06:34,300 --> 00:06:36,339
那如果有一个字面量呃

165
00:06:36,339 --> 00:06:37,959
想要表达说自己是昂撒的

166
00:06:37,959 --> 00:06:39,288
可以在后面加上u

167
00:06:39,288 --> 00:06:40,129
顺便说呢

168
00:06:40,129 --> 00:06:42,769
如果有一个字面量想要表达说自己是个long

169
00:06:42,769 --> 00:06:43,939
你可以在后面加上l

170
00:06:43,939 --> 00:06:45,889
这个l和那个u都可以是大写

171
00:06:45,889 --> 00:06:48,288
也可以是小写呃

172
00:06:48,288 --> 00:06:49,819
这个outside呢

173
00:06:49,920 --> 00:06:52,259
当初在设计这个unsigned的时候

174
00:06:52,259 --> 00:06:55,569
它的初衷并不是扩展数能够表达的范围

175
00:06:55,569 --> 00:06:57,970
虽然现在绝大多数的教科书都说啊

176
00:06:57,970 --> 00:07:00,310
你如果觉得这个呃整数的范围不够

177
00:07:00,310 --> 00:07:01,149
我可以用三呢

178
00:07:01,149 --> 00:07:03,100
让他这个证书能够表达范围更大点

179
00:07:03,100 --> 00:07:04,069
不是这样子的

180
00:07:04,069 --> 00:07:07,370
当时加上阿三的目的是为了说

181
00:07:07,370 --> 00:07:09,740
我们想要做纯二进制的运算

182
00:07:09,740 --> 00:07:12,500
我们想要让那个最高位的一不起作用

183
00:07:12,500 --> 00:07:13,399
纯二进制的运算

184
00:07:13,399 --> 00:07:16,699
所以它主要的目的是为了做一位啊

185
00:07:16,699 --> 00:07:19,649
我们在后面讲到这个位运算的时候

186
00:07:19,649 --> 00:07:21,100
我们会提到这些事情

187
00:07:21,538 --> 00:07:26,069
那整数的运算是以纯二进制的方式进行的

188
00:07:26,069 --> 00:07:28,480
尽管我们说整数的这个复数部分

189
00:07:28,480 --> 00:07:30,220
是以补码的方式来表达的

190
00:07:30,220 --> 00:07:31,600
但是当他做计算的时候

191
00:07:31,600 --> 00:07:33,088
我们前面已经说过

192
00:07:33,088 --> 00:07:33,928
为什么要用补码

193
00:07:33,928 --> 00:07:35,608
就是因为在做计算的时候

194
00:07:35,608 --> 00:07:38,579
可以把它当做是纯二进制的数运算

195
00:07:38,579 --> 00:07:39,209
算完以后

196
00:07:39,209 --> 00:07:40,798
它正好有一个正确的结果

197
00:07:40,798 --> 00:07:45,620
所以如果我们对1111去做加一

198
00:07:47,000 --> 00:07:50,600
它就会变成1万

199
00:07:52,319 --> 00:07:53,389
呃没错

200
00:07:53,389 --> 00:07:55,220
-1加一就是零嘛

201
00:07:56,959 --> 00:07:58,220
127

202
00:07:58,699 --> 00:08:00,360
这是127

203
00:08:00,800 --> 00:08:02,029
127

204
00:08:02,029 --> 00:08:03,439
127+1

205
00:08:03,439 --> 00:08:05,000
本来应该是128

206
00:08:05,000 --> 00:08:05,660
对不对

207
00:08:05,660 --> 00:08:07,009
128呢

208
00:08:07,009 --> 00:08:10,619
在整数里头作为一个char来说

209
00:08:10,619 --> 00:08:13,439
他想要表达的实际上是负的

210
00:08:13,439 --> 00:08:14,420
128

211
00:08:14,879 --> 00:08:16,379
所以就会发生什么

212
00:08:16,379 --> 00:08:18,839
实际上在这里发生的事情是这样的

213
00:08:18,839 --> 00:08:22,300
我们的数啊可以看作是一个圆圈

214
00:08:22,560 --> 00:08:24,600
如果说这个是零

215
00:08:24,600 --> 00:08:28,339
那么这个地方呢就是127

216
00:08:30,240 --> 00:08:32,000
这里是-1

217
00:08:32,000 --> 00:08:35,038
这里呢就是负的128

218
00:08:36,500 --> 00:08:37,840
为什么说是个圆圈呢

219
00:08:37,840 --> 00:08:41,719
就是因为如果你顺时针走

220
00:08:41,860 --> 00:08:44,860
ok那就相当于你在做减法

221
00:08:44,860 --> 00:08:45,370
对不对

222
00:08:45,370 --> 00:08:46,539
0~1得到-1

223
00:08:46,539 --> 00:08:47,409
这很正常

224
00:08:47,409 --> 00:08:49,950
如果你逆时针走

225
00:08:49,950 --> 00:08:51,480
就相当于你在做加法

226
00:08:51,480 --> 00:08:53,039
所以-1加一得到零

227
00:08:53,039 --> 00:08:54,029
这也很正常

228
00:08:54,029 --> 00:08:55,590
可是呢到了这个地方

229
00:08:55,590 --> 00:08:56,190
我们就看到

230
00:08:56,190 --> 00:08:58,769
如果你再逆时针走去加一一百27

231
00:08:58,769 --> 00:08:59,580
再加一

232
00:08:59,580 --> 00:09:02,629
它就会变成负的128了

233
00:09:02,629 --> 00:09:04,639
而如果你做减法

234
00:09:04,639 --> 00:09:06,139
负的128-1

235
00:09:06,139 --> 00:09:08,129
它又会变成127

236
00:09:08,129 --> 00:09:08,909
真的吗

237
00:09:08,909 --> 00:09:09,929
我们来试一下

238
00:09:09,929 --> 00:09:12,559
我们现在有一个差

239
00:09:13,220 --> 00:09:16,039
我们让它等于127

240
00:09:16,320 --> 00:09:19,440
char 127要做一个加法

241
00:09:19,440 --> 00:09:22,639
说c等于c加一好

242
00:09:22,639 --> 00:09:24,458
我们来看这样的结果是什么

243
00:09:25,200 --> 00:09:27,740
我们看到127+1以后

244
00:09:27,740 --> 00:09:29,438
变成了128

245
00:09:30,279 --> 00:09:31,139
为什么

246
00:09:31,139 --> 00:09:32,940
因为它翻过去了

247
00:09:32,940 --> 00:09:33,629
对不对

248
00:09:33,629 --> 00:09:36,659
如果我们现在是负的128

249
00:09:36,659 --> 00:09:38,839
然后我们希望它减一

250
00:09:39,399 --> 00:09:41,330
我们看到减一以后

251
00:09:41,330 --> 00:09:44,269
它变成了最大的正数127啊

252
00:09:44,269 --> 00:09:46,370
char能够表达的最大的正数127

253
00:09:46,370 --> 00:09:49,599
如果我们现在这件事情呢是变成unsigned

254
00:09:49,639 --> 00:09:52,519
然后呢这是127

255
00:09:52,519 --> 00:09:55,009
接下来呢我们要做加一的这件事情

256
00:09:55,009 --> 00:09:57,159
我们看到对127+1

257
00:09:57,159 --> 00:09:58,659
对于一个on sch来说

258
00:09:58,659 --> 00:10:00,120
我们就得到了128

259
00:10:01,179 --> 00:10:04,919
可是如果这个是255的outside

260
00:10:04,919 --> 00:10:06,809
我们对它做一个加一的结果

261
00:10:06,809 --> 00:10:08,460
它会变成零

262
00:10:08,460 --> 00:10:11,029
因为255+1是256

263
00:10:11,029 --> 00:10:14,719
256在八个比特里头是全灵

264
00:10:14,720 --> 00:10:16,129
第九位才是一

265
00:10:16,129 --> 00:10:17,360
第九位会被丢掉

266
00:10:17,360 --> 00:10:18,559
于是就变成零了

267
00:10:18,559 --> 00:10:20,899
如果我现在是零on 3的零

268
00:10:20,899 --> 00:10:22,458
我现在想要做个减一

269
00:10:23,139 --> 00:10:25,500
我们看到它就变成了255

270
00:10:25,500 --> 00:10:27,360
也就是说对于阿三来说

271
00:10:27,360 --> 00:10:30,818
我们这个圆呢得要另外画一张圆

272
00:10:32,220 --> 00:10:33,440
零在这里

273
00:10:33,440 --> 00:10:35,210
255在这里

274
00:10:35,210 --> 00:10:37,279
所以255+1会变成零

275
00:10:37,279 --> 00:10:39,759
而0-1会变成255

276
00:10:39,820 --> 00:10:40,720
在前面啊

277
00:10:40,720 --> 00:10:42,639
我们让大家做过这个讨论啊

278
00:10:42,639 --> 00:10:44,379
如果用课程中的那个数

279
00:10:44,379 --> 00:10:47,299
数的位数的程序能够数到多大的数

280
00:10:47,580 --> 00:10:48,990
在这个讨论里面

281
00:10:48,990 --> 00:10:52,039
有一位同学他给出了一段代码

282
00:10:52,720 --> 00:10:55,259
他用这段代码可以帮我们找出来

283
00:10:55,259 --> 00:10:57,120
int的最大数是多少

284
00:10:57,120 --> 00:10:58,139
怎么做的呢

285
00:10:58,139 --> 00:10:59,580
我们来试一下这个词

286
00:10:59,580 --> 00:11:02,299
我们把它拷贝粘贴到我们这来

287
00:11:03,240 --> 00:11:06,259
当然这段代码要能够运行在我的编译器上

288
00:11:06,259 --> 00:11:07,940
还稍微改一点点地方啊

289
00:11:07,940 --> 00:11:10,700
我们要在这儿做一点小改动

290
00:11:10,700 --> 00:11:13,039
然后呢我们来编译运行一下

291
00:11:13,039 --> 00:11:16,719
看这个运行要花一点点时间

292
00:11:16,759 --> 00:11:19,820
他会告诉我们说int类型最大的数是这个

293
00:11:19,820 --> 00:11:21,019
它是怎么做的

294
00:11:21,019 --> 00:11:22,519
他做了一个循环

295
00:11:22,519 --> 00:11:25,340
当这个加加a大于零的时候

296
00:11:25,340 --> 00:11:26,720
循环要一直继续

297
00:11:26,720 --> 00:11:30,570
什么时候加加a的结果小于零了

298
00:11:30,570 --> 00:11:32,759
你看你看我们a呢是从零开始的

299
00:11:32,759 --> 00:11:34,879
从零开始不断加1+1+1+1

300
00:11:34,879 --> 00:11:37,940
当他到了int所能够表达的最大的

301
00:11:37,940 --> 00:11:39,019
那个数的时候

302
00:11:39,019 --> 00:11:42,059
再加一它就翻回去了

303
00:11:42,059 --> 00:11:44,519
就跟我们前面在做c h差类型

304
00:11:44,519 --> 00:11:45,539
那个情况是一样的

305
00:11:45,539 --> 00:11:46,320
翻回去了

306
00:11:46,320 --> 00:11:47,159
变成一个负数了

307
00:11:47,159 --> 00:11:49,379
所以什么时候它翻回去了

308
00:11:49,379 --> 00:11:51,840
那么它再减一那个负数再减一

309
00:11:51,840 --> 00:11:53,519
就是我们得到的最大的那个数

310
00:11:54,960 --> 00:11:57,779
现在假如我们要在这位同学的

311
00:11:57,779 --> 00:11:59,820
基础程序的基础上做一点修改

312
00:11:59,820 --> 00:12:03,529
我们想要知道unsigned int

313
00:12:03,529 --> 00:12:05,629
这个a最大是多少

314
00:12:05,629 --> 00:12:08,419
我们的这个该怎么改

315
00:12:09,460 --> 00:12:11,919
大家继续去讨论区做讨论吧


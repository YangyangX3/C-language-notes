1
00:00:04,419 --> 00:00:06,910
为什么c语言有那么多整整数类型对吧

2
00:00:06,910 --> 00:00:08,080
所以你看我们为什么不

3
00:00:08,080 --> 00:00:09,699
在这个刚开始的时候

4
00:00:09,699 --> 00:00:11,730
就把那么多整数类型都交给你们

5
00:00:11,730 --> 00:00:12,750
太复杂了

6
00:00:12,750 --> 00:00:13,800
char short

7
00:00:13,800 --> 00:00:14,970
int long

8
00:00:14,970 --> 00:00:15,929
long long

9
00:00:15,929 --> 00:00:17,309
每一种有不同的大小

10
00:00:17,309 --> 00:00:18,539
每一种不同的范围

11
00:00:18,539 --> 00:00:19,589
还有什么呃

12
00:00:19,589 --> 00:00:20,850
内部是怎么样子的啦

13
00:00:20,850 --> 00:00:22,320
表达出来又是什么样子了

14
00:00:22,320 --> 00:00:23,980
有那么多复杂的事情

15
00:00:24,719 --> 00:00:26,780
c语言有那么多复杂的事情

16
00:00:26,780 --> 00:00:31,100
是因为早期的语言需要准确的去表达

17
00:00:31,100 --> 00:00:32,779
计算机里头的东西

18
00:00:33,159 --> 00:00:36,100
我们要去准确表达计算机里面的内存

19
00:00:36,100 --> 00:00:38,140
去表达计算机里面的寄存器

20
00:00:38,140 --> 00:00:40,469
去表达计算机里面的接口

21
00:00:40,469 --> 00:00:43,109
比如说我有一个输入输出的端口

22
00:00:43,109 --> 00:00:45,179
那个端口就是16个比特的

23
00:00:45,179 --> 00:00:48,520
每一个比特对应于一个这个芯片上的引脚

24
00:00:48,520 --> 00:00:51,070
于是呢我就必须要用shot去控制它

25
00:00:51,070 --> 00:00:53,979
我用别的方式去控制它就不对了好

26
00:00:53,979 --> 00:00:56,350
所以c语言这么做

27
00:00:56,350 --> 00:00:58,270
一方面是早期语言

28
00:00:58,270 --> 00:01:00,039
60年代70年代语言的习惯

29
00:01:00,039 --> 00:01:02,649
另外一方面是为了能够去准确表达

30
00:01:02,649 --> 00:01:06,180
硬件和硬件打交道的时候要用到的

31
00:01:06,180 --> 00:01:08,939
所以我们今天怎么去选择整数那类型的

32
00:01:08,939 --> 00:01:09,420
那么多类型

33
00:01:09,420 --> 00:01:10,319
我们怎么选择呢

34
00:01:10,319 --> 00:01:14,269
我的建议是没有特别的需要

35
00:01:14,269 --> 00:01:17,769
就有int就用int

36
00:01:17,769 --> 00:01:19,780
有的教科书上可能会跟你说

37
00:01:20,200 --> 00:01:22,420
你用笑的可以省一点啊

38
00:01:22,420 --> 00:01:24,370
笑的也许会快一点啊

39
00:01:24,370 --> 00:01:27,400
如果你的数那个不超过127的

40
00:01:27,400 --> 00:01:29,420
你就用券啊等等

41
00:01:29,819 --> 00:01:34,459
但是今天的计算机已经不一样了

42
00:01:34,459 --> 00:01:36,500
今天今天的计算机的字长

43
00:01:36,500 --> 00:01:39,060
普遍就是32位或者64位

44
00:01:39,459 --> 00:01:41,170
我们前面看过那张图

45
00:01:41,170 --> 00:01:45,760
我们自常指的是cpu和内存之间的

46
00:01:45,760 --> 00:01:47,060
那个数据通道

47
00:01:47,900 --> 00:01:48,969
什么意思

48
00:01:48,969 --> 00:01:52,980
我cpu每一次从内存中读一个数据

49
00:01:52,980 --> 00:01:55,379
每一次往内存当中写一个数据

50
00:01:55,379 --> 00:01:56,519
它就是32位的

51
00:01:56,519 --> 00:01:57,689
它就是一个int的

52
00:01:57,689 --> 00:02:01,450
如果你让他做一个char 8个比特

53
00:02:01,450 --> 00:02:03,250
实际上他做的事情是

54
00:02:03,250 --> 00:02:05,709
把32个比特的数据全读进来

55
00:02:05,709 --> 00:02:07,980
然后从当中多出

56
00:02:08,099 --> 00:02:10,520
想办法拿出那八个比特来给你

57
00:02:12,139 --> 00:02:14,199
所以实际上在现在32位

58
00:02:14,199 --> 00:02:15,490
64位的机器上面

59
00:02:15,490 --> 00:02:16,569
你用shot

60
00:02:16,569 --> 00:02:19,719
你用char不见得比用int更快

61
00:02:20,139 --> 00:02:21,539
甚至可能更慢

62
00:02:22,838 --> 00:02:26,038
然后现代的编译器往往还会做一件事情

63
00:02:26,038 --> 00:02:27,500
就是内存的对齐

64
00:02:27,500 --> 00:02:29,659
这件事情我们以后讲到结构的时候

65
00:02:29,659 --> 00:02:32,150
我们会仔细的来解释什么叫做对齐

66
00:02:32,150 --> 00:02:35,449
总之最后的结果就是你在内存当中

67
00:02:35,449 --> 00:02:38,300
你放了一个八个比特的chr的变量

68
00:02:38,419 --> 00:02:41,539
有可能他实际占据的仍然是一个int

69
00:02:41,539 --> 00:02:45,199
所以再去用比一个int要小的类型的

70
00:02:45,199 --> 00:02:46,340
这个数据来做运算

71
00:02:46,340 --> 00:02:48,000
已经没有什么价值了

72
00:02:48,800 --> 00:02:51,340
除非是你现在就在做底层的程序

73
00:02:51,340 --> 00:02:52,120
你现在做的程序

74
00:02:52,120 --> 00:02:54,039
就是要面对硬件的这个时候

75
00:02:54,039 --> 00:02:56,199
那么当然硬件必须用哪种类型

76
00:02:56,199 --> 00:02:57,620
你却用哪种类型

77
00:02:58,998 --> 00:03:02,049
所以我的建议就是选择int

78
00:03:02,049 --> 00:03:06,748
另外on s要不要选择unsigned和int

79
00:03:06,748 --> 00:03:09,449
它们的区别只是在输出的时候

80
00:03:09,449 --> 00:03:12,149
只是在做某些特殊的位运算的时候

81
00:03:12,149 --> 00:03:15,758
所以如果不是迫不得已

82
00:03:15,758 --> 00:03:17,468
你没有必要去用inside

83
00:03:17,468 --> 00:03:19,580
你就用int就可以了

84
00:03:20,240 --> 00:03:21,400
我们可以想想

85
00:03:21,400 --> 00:03:24,759
你可以想想现在更新的那些编程语言

86
00:03:24,759 --> 00:03:25,960
比如说像python

87
00:03:26,259 --> 00:03:29,900
它不区分这么细的整数的不同的类型

88
00:03:30,239 --> 00:03:31,649
像java这样的语言

89
00:03:31,649 --> 00:03:33,778
它的整数没有sign和on sign

90
00:03:33,778 --> 00:03:35,550
没有有符号没符号的区别

91
00:03:35,550 --> 00:03:36,330
为什么

92
00:03:36,330 --> 00:03:38,520
因为对于日常的计算来说

93
00:03:38,520 --> 00:03:40,139
没有必要做这些事情了

94
00:03:40,139 --> 00:03:43,740
这些东西都是对底层硬件做操作的时候

95
00:03:43,740 --> 00:03:44,400
才有用的


1
00:00:04,339 --> 00:00:08,220
我们的第一个函数prime is prime会返回一个值的

2
00:00:08,220 --> 00:00:09,269
不知道你有没有注意到

3
00:00:09,269 --> 00:00:10,470
当时我们是怎么写的

4
00:00:10,470 --> 00:00:13,230
当时我们在这个函数里头呢

5
00:00:13,230 --> 00:00:14,550
用了一个变量i e t

6
00:00:14,550 --> 00:00:16,280
它一开始是等于一的

7
00:00:16,280 --> 00:00:18,260
然后如果发现的不是素素

8
00:00:18,260 --> 00:00:19,859
我们会让i t等于零

9
00:00:20,140 --> 00:00:22,539
在函数的最后结尾的时候

10
00:00:22,539 --> 00:00:24,339
我们做了一个return i t

11
00:00:25,899 --> 00:00:28,339
其实我们很久很久

12
00:00:28,339 --> 00:00:31,498
我们一开始我们在这门课刚开始的时候

13
00:00:31,498 --> 00:00:32,819
我的第一个hello world

14
00:00:32,819 --> 00:00:35,039
大家都就已经遇到那个return了

15
00:00:35,039 --> 00:00:37,539
我们在命里头有那个return 0

16
00:00:38,240 --> 00:00:42,779
我们在这个is prime里面也有一个return i e t

17
00:00:42,799 --> 00:00:46,100
如果你的函数要返回一个结果的

18
00:00:46,100 --> 00:00:47,899
那你就需要用return

19
00:00:47,899 --> 00:00:50,670
把那个结果交给调用它的地方

20
00:00:50,670 --> 00:00:55,039
我们的is prime说它有一个返回的类型是int

21
00:00:55,119 --> 00:00:58,000
这个is prime会返回一个int的结果

22
00:00:58,000 --> 00:01:00,579
所以我们就需要安排一句return一句

23
00:01:00,579 --> 00:01:02,950
让他去返回那么一个int

24
00:01:02,950 --> 00:01:04,510
因此我们这还有另外一个例子

25
00:01:04,510 --> 00:01:07,230
t max a b做的事情是说

26
00:01:07,230 --> 00:01:08,370
如果a大于b的话

27
00:01:08,370 --> 00:01:10,709
那么那个return就是a else的话

28
00:01:10,709 --> 00:01:11,890
那个return就是b

29
00:01:11,890 --> 00:01:14,349
当然这是我们在这儿做的安排

30
00:01:14,349 --> 00:01:15,909
我们用了一个变量叫做i t

31
00:01:15,909 --> 00:01:17,590
你完全可以把它叫做别的变量

32
00:01:17,590 --> 00:01:19,060
这没有任何问题

33
00:01:19,959 --> 00:01:21,780
return是return i t

34
00:01:21,780 --> 00:01:23,159
你也可以return其他的东西

35
00:01:23,159 --> 00:01:24,900
你甚至可以直接把return写在这里

36
00:01:24,900 --> 00:01:27,280
如果a大a b我就return a l return b

37
00:01:27,280 --> 00:01:28,480
当然你回想一下

38
00:01:28,480 --> 00:01:31,659
我们曾经在判断的那个地方

39
00:01:31,659 --> 00:01:32,680
提到过一件事情

40
00:01:32,680 --> 00:01:35,739
我们喜欢一种东西叫做单一出口

41
00:01:35,739 --> 00:01:37,180
我们现在写成这个样子

42
00:01:37,180 --> 00:01:38,260
它是单一出口

43
00:01:38,260 --> 00:01:40,118
因为我们只有一个return语句

44
00:01:40,159 --> 00:01:42,260
这个max说它会返回int

45
00:01:42,260 --> 00:01:44,618
因此它的类型返回类型是int

46
00:01:44,900 --> 00:01:48,430
我们的return语句做两件事情

47
00:01:48,430 --> 00:01:52,599
第一件事情一旦遇到return函数就停止了

48
00:01:52,599 --> 00:01:54,618
就不再往下执行了

49
00:01:54,620 --> 00:01:57,290
然后如果return后面有值

50
00:01:57,290 --> 00:01:59,840
那么我们要送回去一个值

51
00:01:59,959 --> 00:02:01,579
所以return有两种写法

52
00:02:01,579 --> 00:02:04,159
一种写法是return后面直接结束了

53
00:02:04,159 --> 00:02:04,760
没有了

54
00:02:04,760 --> 00:02:07,560
另外一种是return后面会有一个表达式

55
00:02:07,640 --> 00:02:08,960
它可以带一个值

56
00:02:08,960 --> 00:02:10,039
单一的一个变量

57
00:02:10,039 --> 00:02:11,270
当然也是一个表达式

58
00:02:11,270 --> 00:02:12,199
它是一个值

59
00:02:12,199 --> 00:02:16,289
它要把这个值交给调用这个函数的地方

60
00:02:16,289 --> 00:02:17,789
我们来试一下这件事情

61
00:02:17,789 --> 00:02:19,889
这是我们的这个max函数啊

62
00:02:19,889 --> 00:02:21,050
它会返回一个int

63
00:02:21,050 --> 00:02:23,090
然后呢我们在in里面呢

64
00:02:23,090 --> 00:02:24,590
我们做了这么一些事情

65
00:02:24,590 --> 00:02:25,550
我们定义了两个变量

66
00:02:25,550 --> 00:02:26,990
a b给了他两个呃

67
00:02:26,990 --> 00:02:30,319
两个值我们就做了max的十和12

68
00:02:30,319 --> 00:02:33,699
我们把这个max的结果交给了c

69
00:02:33,699 --> 00:02:34,599
你看这看

70
00:02:34,599 --> 00:02:36,729
这看着就非常像数学当中的函数是吧

71
00:02:36,729 --> 00:02:38,740
我们的函数调用会有个结果的啊

72
00:02:38,740 --> 00:02:41,379
fx当然我们现在x不止一个f x y

73
00:02:41,379 --> 00:02:42,580
然后把它交给z了

74
00:02:42,580 --> 00:02:43,649
类似于这种事情

75
00:02:43,649 --> 00:02:44,489
我们来看一下

76
00:02:44,489 --> 00:02:45,989
这当中这些事情是怎么发生的

77
00:02:45,989 --> 00:02:47,399
我们在这是个断点

78
00:02:47,399 --> 00:02:49,520
然后我们来调试运行它一下

79
00:02:50,938 --> 00:02:53,538
现在呢我们在这儿呃

80
00:02:53,538 --> 00:02:55,859
现在我们的c还没有初始值

81
00:02:55,859 --> 00:02:56,938
所以它有个乱七八糟的值

82
00:02:56,938 --> 00:02:57,598
对不对啊

83
00:02:57,598 --> 00:02:59,218
我们都以前就已经知道这件事情了

84
00:02:59,218 --> 00:03:00,479
现在我们要进这个max

85
00:03:00,479 --> 00:03:01,500
我们单独进入

86
00:03:01,500 --> 00:03:03,719
于是我们在了在了这个max里

87
00:03:03,719 --> 00:03:06,060
我们是掉了是max 10和12

88
00:03:10,248 --> 00:03:14,120
然后我们来做得到了i e t等于b

89
00:03:14,120 --> 00:03:17,270
于是呢我们就来来做这个i return i e t

90
00:03:17,270 --> 00:03:18,789
这样形象的r e t是12

91
00:03:18,789 --> 00:03:20,500
我们要把12给返回

92
00:03:20,500 --> 00:03:22,810
于是我们在下一步的时候

93
00:03:22,810 --> 00:03:26,348
我们就回到了这里

94
00:03:26,348 --> 00:03:30,819
现在他把c复成了12了

95
00:03:30,819 --> 00:03:34,479
因为max 10和12的结果是12

96
00:03:34,479 --> 00:03:35,740
也就是我们这个i t

97
00:03:35,740 --> 00:03:39,949
所以我们在return那里的那个值会被带回来

98
00:03:39,949 --> 00:03:41,150
会被带回来

99
00:03:41,150 --> 00:03:43,849
作为我们这个函数运行的结果

100
00:03:43,849 --> 00:03:45,889
然后这个结果可以参与运算

101
00:03:45,889 --> 00:03:47,729
比如说赋给一个变量

102
00:03:47,729 --> 00:03:49,949
接下去我们要做的是max a和b

103
00:03:49,949 --> 00:03:55,218
我们要把a和b的值交给max里面的a和b

104
00:03:55,218 --> 00:03:56,748
我们看看这会发生什么

105
00:03:56,748 --> 00:03:58,020
单独进入

106
00:03:58,899 --> 00:04:01,500
现在这里的a是五

107
00:04:01,500 --> 00:04:03,090
这里的b 16

108
00:04:03,090 --> 00:04:07,289
然后我们算出来现在的i e t应该是六

109
00:04:07,289 --> 00:04:10,500
我们return那个六回来回到这里

110
00:04:10,500 --> 00:04:13,280
c就得到了六那个值

111
00:04:13,659 --> 00:04:15,099
接下来我们再来做

112
00:04:15,099 --> 00:04:18,000
我们要max c和23

113
00:04:18,338 --> 00:04:23,238
那么当然同样的这个c现在是六和23

114
00:04:23,238 --> 00:04:25,428
这两个只要送到max里头去

115
00:04:25,428 --> 00:04:27,829
在max里面a得到了六

116
00:04:27,829 --> 00:04:28,999
b得到了23

117
00:04:28,999 --> 00:04:32,120
然后我们进一步的得到了这个i t

118
00:04:32,120 --> 00:04:32,720
是23

119
00:04:32,720 --> 00:04:34,939
返回这个i t回到这里

120
00:04:34,939 --> 00:04:37,250
我们的c就是23了

121
00:04:37,250 --> 00:04:38,629
再接下来我们要做什么

122
00:04:38,629 --> 00:04:40,250
你看这是一个print f

123
00:04:40,250 --> 00:04:43,170
print f说前面是一个格式字符串

124
00:04:43,170 --> 00:04:45,180
后面逗号后面是一个值

125
00:04:45,180 --> 00:04:46,769
现在我们的这个值是什么

126
00:04:46,769 --> 00:04:49,019
是我们去做max

127
00:04:49,339 --> 00:04:52,910
然后max的一个结果作为print f的一个值

128
00:04:52,910 --> 00:04:54,800
所以现在如果我们单步进入的时候

129
00:04:54,800 --> 00:04:56,860
我们会进谁那里呢

130
00:04:56,860 --> 00:04:58,300
我们会进到max那里

131
00:04:58,300 --> 00:05:01,120
因为我们先得我们要去做prinf没错

132
00:05:01,120 --> 00:05:02,199
但是做print pf之前

133
00:05:02,199 --> 00:05:04,720
我们先得把要传给print的

134
00:05:04,720 --> 00:05:05,920
那些参数都准备好

135
00:05:05,920 --> 00:05:08,319
所以这里我们要准备好max的那个结果

136
00:05:08,319 --> 00:05:10,038
因此我们先要去做max

137
00:05:10,038 --> 00:05:12,829
我们进了max a和b有了各自的值

138
00:05:12,829 --> 00:05:14,509
然后我们做啊做啊做啊

139
00:05:14,509 --> 00:05:18,139
我们传回了那个i e t 16回来

140
00:05:18,139 --> 00:05:20,740
现在print f已经做完了

141
00:05:20,740 --> 00:05:21,819
给了我们一个结果

142
00:05:21,819 --> 00:05:24,329
但一个函数里面可以出现多个return语句

143
00:05:24,329 --> 00:05:26,009
比如说我们的这个max函数呢

144
00:05:26,009 --> 00:05:27,209
也可以这样改造一下

145
00:05:27,209 --> 00:05:30,000
我们可以不需要这个i e t变量

146
00:05:30,000 --> 00:05:32,048
我们可以让它在判断出来

147
00:05:32,048 --> 00:05:34,119
发现a大于b以后

148
00:05:34,119 --> 00:05:36,538
直接做出return那个a

149
00:05:36,538 --> 00:05:41,360
然后else的时候呢直接就return那个b

150
00:05:42,300 --> 00:05:45,360
当然因此呢最后也没有那个论证了

151
00:05:45,360 --> 00:05:47,850
这样做也是可以的

152
00:05:47,850 --> 00:05:48,959
在一个函数里面

153
00:05:48,959 --> 00:05:50,279
你可以出现多个return

154
00:05:50,279 --> 00:05:52,500
而且这些流程也不一定要放在最后

155
00:05:52,740 --> 00:05:55,410
当然我们之前讲过

156
00:05:55,410 --> 00:05:58,870
我们有一种设计理念叫做什么单一出口

157
00:05:58,870 --> 00:06:00,069
如果我们现在这样写

158
00:06:00,069 --> 00:06:01,300
我们有了多个return

159
00:06:01,300 --> 00:06:03,730
这就不符合单一出口的理念

160
00:06:03,730 --> 00:06:04,839
当然他没有错

161
00:06:04,839 --> 00:06:07,050
但是它不好不好在哪里

162
00:06:07,050 --> 00:06:07,529
不好

163
00:06:07,529 --> 00:06:09,089
在于你现在这个程序

164
00:06:09,089 --> 00:06:11,670
这个函数有很多个地方可以离开

165
00:06:11,670 --> 00:06:14,858
这个函数有很多条语句可以用来传递

166
00:06:14,858 --> 00:06:15,728
直到外面

167
00:06:15,728 --> 00:06:19,680
那么将来如果你想要对这些地方做一点修

168
00:06:19,680 --> 00:06:19,980
改

169
00:06:19,980 --> 00:06:21,779
对这个出口做点修改的话

170
00:06:21,779 --> 00:06:23,160
你就疲于奔命

171
00:06:23,160 --> 00:06:24,800
要去修改很多地方了

172
00:06:24,800 --> 00:06:26,600
所以这是不好的例子

173
00:06:26,600 --> 00:06:29,000
我们只是告诉你说c语言可以这么做

174
00:06:29,000 --> 00:06:31,038
但是它并不是一种好的写法

175
00:06:31,038 --> 00:06:33,439
我们已经看到我们有了这样一个函数以后

176
00:06:33,439 --> 00:06:35,240
这个函数能够返回值以后

177
00:06:35,240 --> 00:06:37,970
我们可以把这个值赋给变量

178
00:06:37,970 --> 00:06:40,579
可以把这个值再传递给函数

179
00:06:40,579 --> 00:06:42,019
比如说max

180
00:06:42,019 --> 00:06:44,949
也可以拿另外一次max的使用

181
00:06:44,949 --> 00:06:46,360
来作为它的参数

182
00:06:47,500 --> 00:06:48,660
甚至可以丢掉

183
00:06:49,540 --> 00:06:51,240
比如这样子也可以

184
00:06:51,240 --> 00:06:52,319
我们来试一下

185
00:06:52,319 --> 00:06:55,980
如果我们在这儿做了一次max的调用

186
00:06:57,120 --> 00:07:00,060
可是并没有把他的职交给任何人

187
00:07:01,600 --> 00:07:02,790
没有任何问题

188
00:07:02,790 --> 00:07:04,050
编译没有任何问题

189
00:07:04,050 --> 00:07:07,019
因为有的时候我们可能调用函数的目的

190
00:07:07,019 --> 00:07:10,110
并不是要去看它返回给我们的结果

191
00:07:10,110 --> 00:07:13,538
而是要它的那个副作用

192
00:07:13,538 --> 00:07:15,158
在这个函数执行的过程当中

193
00:07:15,158 --> 00:07:16,879
他可能给你做一些别的事情

194
00:07:16,879 --> 00:07:18,680
比如说输出个什么东西啊之类的

195
00:07:18,680 --> 00:07:19,399
我们不太在乎

196
00:07:19,399 --> 00:07:20,660
他到底返回一个什么东西给我

197
00:07:20,660 --> 00:07:22,279
但是我们要的是它的副作用

198
00:07:22,279 --> 00:07:23,600
所以这也是很常见的

199
00:07:23,600 --> 00:07:27,139
而且不会有任何的warning

200
00:07:27,139 --> 00:07:28,519
不会有任何的error

201
00:07:28,519 --> 00:07:29,750
不会有任何的wann

202
00:07:29,750 --> 00:07:32,149
如果我们做一个没有返回值的函数

203
00:07:32,149 --> 00:07:35,060
那么这个时候函数名前面的那个类型

204
00:07:35,060 --> 00:07:37,069
就要写成void啊

205
00:07:37,069 --> 00:07:37,879
写成void void

206
00:07:37,879 --> 00:07:40,339
表明说这个函数不返回任何的结果

207
00:07:40,339 --> 00:07:43,540
那么就不能够使用代词的return

208
00:07:43,579 --> 00:07:45,019
当然也可以没有流程

209
00:07:45,019 --> 00:07:47,449
因为当函数运行到最后一行

210
00:07:47,449 --> 00:07:50,178
运行到它的结束的那个大括号以后

211
00:07:50,178 --> 00:07:51,649
他自己就会回去了

212
00:07:51,649 --> 00:07:53,149
你没有的侦探又会回去

213
00:07:53,149 --> 00:07:54,499
你有一句的正在那里

214
00:07:54,499 --> 00:07:55,459
那也是多余的

215
00:07:55,459 --> 00:07:58,110
另外在调用这样的函数的时候

216
00:07:58,110 --> 00:07:59,910
你就不能去做返回值的复制

217
00:07:59,910 --> 00:08:01,850
比如说我们那个前面看过的那个some

218
00:08:01,850 --> 00:08:03,230
它的返回值是void

219
00:08:03,230 --> 00:08:03,949
那这个时候

220
00:08:03,949 --> 00:08:06,500
你就不能再去做返回值的赋值了

221
00:08:06,500 --> 00:08:08,209
因为他不返回东西嘛

222
00:08:08,209 --> 00:08:10,189
你不可能再把sum的值交给别的一个

223
00:08:10,189 --> 00:08:12,000
什么变量或者参与运算等等

224
00:08:12,000 --> 00:08:14,370
当然如果函数是有返回值的

225
00:08:14,370 --> 00:08:16,699
那你就必须使用带值的return


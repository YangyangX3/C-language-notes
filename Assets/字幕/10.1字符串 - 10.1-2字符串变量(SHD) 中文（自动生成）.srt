1
00:00:04,660 --> 00:00:07,299
我们的字符串变量有两种形式来写

2
00:00:07,299 --> 00:00:07,900
对不对

3
00:00:07,900 --> 00:00:10,789
创新s说s是一个字符串

4
00:00:10,789 --> 00:00:11,869
我们都会这么说

5
00:00:11,869 --> 00:00:13,490
平时啊我们在口语当中

6
00:00:13,490 --> 00:00:15,230
或或者我们在一些教科书上当中

7
00:00:15,230 --> 00:00:18,170
我们都会说chacs表示说s是个字符串

8
00:00:18,170 --> 00:00:19,579
它等于hello world

9
00:00:20,879 --> 00:00:22,879
可是既然是个字符串

10
00:00:22,879 --> 00:00:25,699
我们当然就可以拿它做点事情了

11
00:00:25,699 --> 00:00:28,579
所以如果我们写出这样的代码来会怎么样

12
00:00:28,579 --> 00:00:29,559
我们试一下

13
00:00:29,559 --> 00:00:35,159
我们看到说既然这个恰薪是一个表达的

14
00:00:35,159 --> 00:00:36,539
是一个字符的指针对吧

15
00:00:36,539 --> 00:00:37,979
然后呢hello world是一个数组

16
00:00:37,979 --> 00:00:39,840
我们前面说编译器会在什么地方啊

17
00:00:39,840 --> 00:00:41,780
给你做做那么多字符数组出来

18
00:00:41,780 --> 00:00:43,960
然后呢s就指向那个数组了

19
00:00:43,960 --> 00:00:44,619
完了以后呢

20
00:00:44,619 --> 00:00:45,640
那既然这是个数组

21
00:00:45,640 --> 00:00:46,840
我们可以做这个事情吧

22
00:00:46,840 --> 00:00:49,420
好让s的新的s的零呢等于b

23
00:00:49,420 --> 00:00:52,429
也就是我们想要把这个h换成b是吧

24
00:00:52,429 --> 00:00:52,909
然后呢

25
00:00:52,909 --> 00:00:55,850
我们输出说哎现在呢s的零变成什么了

26
00:00:55,850 --> 00:00:57,200
我把s0 输出一下

27
00:00:57,200 --> 00:01:00,450
我们编译一下这个代码没有任何错误

28
00:01:00,450 --> 00:01:01,500
没人说你不对

29
00:01:01,500 --> 00:01:03,838
我们运行一下这个代码

30
00:01:04,680 --> 00:01:06,170
除了bus error

31
00:01:06,170 --> 00:01:07,909
当然如果你在你的windows上

32
00:01:07,909 --> 00:01:10,239
这个bus error可能是segmentation fault

33
00:01:10,579 --> 00:01:14,480
然后这个here完全没输出

34
00:01:14,480 --> 00:01:15,500
换句话说

35
00:01:15,500 --> 00:01:17,120
在做这个print之前

36
00:01:17,120 --> 00:01:18,519
程序就错了

37
00:01:19,900 --> 00:01:20,819
为什么我

38
00:01:23,040 --> 00:01:24,150
们看几个事情

39
00:01:24,150 --> 00:01:27,000
第一如果我们现在

40
00:01:27,000 --> 00:01:28,439
当然这句话看来是有问题的

41
00:01:28,439 --> 00:01:29,340
我们不要他

42
00:01:29,340 --> 00:01:30,959
我们试着输出一个事情

43
00:01:30,959 --> 00:01:33,599
说诶现在s是多少呢

44
00:01:35,540 --> 00:01:38,359
s我们看看s的值是多少

45
00:01:38,359 --> 00:01:40,340
第二我们可以再试一个事情

46
00:01:40,340 --> 00:01:43,700
说如果我们现在有一个s2 

47
00:01:44,280 --> 00:01:46,680
它也是hello world

48
00:01:46,680 --> 00:01:49,039
那s2 是多少呢

49
00:01:50,459 --> 00:01:52,310
好我们给它对得起一点

50
00:01:52,310 --> 00:01:56,900
我们看到说你看s等于67f8 e

51
00:01:56,900 --> 00:01:59,359
s2 也等于67f8 e

52
00:02:00,159 --> 00:02:01,679
这俩是一样的

53
00:02:01,939 --> 00:02:03,980
我们做了两个字符串

54
00:02:03,980 --> 00:02:07,239
所谓的字符串变量s和s2 

55
00:02:07,359 --> 00:02:09,639
他们等于了相同的

56
00:02:09,639 --> 00:02:12,819
他们用相同的字符串字面量来初始化

57
00:02:12,819 --> 00:02:17,409
结果他们被否了相同的值

58
00:02:17,409 --> 00:02:19,240
而且这个值好吧

59
00:02:19,240 --> 00:02:22,639
如果你看我们这还有个int i

60
00:02:22,639 --> 00:02:24,049
我们把它初始化为零

61
00:02:24,049 --> 00:02:24,739
我们看一下

62
00:02:24,739 --> 00:02:28,159
如果这个i它的地址会是多少呢

63
00:02:28,159 --> 00:02:30,289
说and i等于多少呢

64
00:02:30,289 --> 00:02:32,620
百分号p我们对照一下

65
00:02:32,620 --> 00:02:35,469
会看到说i是一个很大的数

66
00:02:35,469 --> 00:02:37,659
i的地址在很大的地方

67
00:02:37,659 --> 00:02:40,599
而s的地址在很小的地方

68
00:02:41,759 --> 00:02:44,240
我们在后面会有机会来告诉大家说

69
00:02:44,240 --> 00:02:47,300
在c语言里面什么样的变量放在什么地方

70
00:02:47,300 --> 00:02:49,579
显然我们现在的这个变量

71
00:02:49,579 --> 00:02:51,109
我们知道这叫做本地变量

72
00:02:51,109 --> 00:02:51,769
对不对

73
00:02:51,769 --> 00:02:54,799
这个本地变量和我们的这个s所指的

74
00:02:54,799 --> 00:02:58,288
那个东西不在一个地方

75
00:02:58,288 --> 00:02:59,519
他们离得很远

76
00:03:00,899 --> 00:03:02,099
他们离得很远

77
00:03:02,099 --> 00:03:05,250
换句话说现在其实发生的事情是什么呢

78
00:03:05,250 --> 00:03:09,090
我们的本地变量大概在一些相似的地方

79
00:03:09,090 --> 00:03:10,229
比如说这是s

80
00:03:10,229 --> 00:03:11,189
这是s2 

81
00:03:11,189 --> 00:03:14,219
然后呢这里还有一个啊i在上面对吧

82
00:03:14,219 --> 00:03:17,139
还有个i i呢直接就有了那个值了

83
00:03:17,139 --> 00:03:20,800
就是0s呢指向了某个地方的一个字符串

84
00:03:20,800 --> 00:03:22,599
那里面的内容呢是一个字符数组

85
00:03:22,599 --> 00:03:23,879
当然它是hello

86
00:03:23,879 --> 00:03:24,719
什么什么什么东西

87
00:03:24,719 --> 00:03:25,979
最后有个零结尾的

88
00:03:25,979 --> 00:03:29,560
而s2 呢明显他们俩只向了相同的地方

89
00:03:30,180 --> 00:03:32,840
而这个地方的地址很小

90
00:03:32,840 --> 00:03:34,259
地址很小

91
00:03:35,338 --> 00:03:37,558
好那我来告诉大家好

92
00:03:37,558 --> 00:03:38,848
这个很小的地址

93
00:03:38,848 --> 00:03:42,680
位于我们叫做程序的代码段

94
00:03:43,718 --> 00:03:45,840
而且它是只读的

95
00:03:47,699 --> 00:03:50,180
也就是说在这个地方

96
00:03:50,180 --> 00:03:54,229
这个东西你如果试图去对他写了

97
00:03:54,229 --> 00:03:57,139
比如说我们想要做说s0 等于什么

98
00:03:57,139 --> 00:03:57,769
什么什么

99
00:03:57,769 --> 00:03:59,379
如果试图做这个事情

100
00:04:00,179 --> 00:04:03,558
我们的操作系统会有一种保护机制

101
00:04:03,558 --> 00:04:05,460
让你的程序崩溃掉

102
00:04:05,500 --> 00:04:07,689
因为那个地方你是不能写的

103
00:04:07,689 --> 00:04:08,620
如果写了

104
00:04:08,620 --> 00:04:09,939
你就是在做坏事情

105
00:04:09,939 --> 00:04:11,229
如果他让你写了

106
00:04:11,229 --> 00:04:13,580
那就是这个操作系统不够好

107
00:04:13,739 --> 00:04:15,909
没有起到保护的责任

108
00:04:15,909 --> 00:04:19,930
所以实际上当然编译器要给你的这个hello word

109
00:04:19,930 --> 00:04:21,819
这个字符串找个地方去放

110
00:04:21,819 --> 00:04:24,579
但是因为这个字符串是在编译时刻

111
00:04:24,579 --> 00:04:26,990
就已经有值的那么一个东西

112
00:04:26,990 --> 00:04:29,779
因此呢编译器会把它放在一个只能读

113
00:04:29,779 --> 00:04:30,860
不能写的地方

114
00:04:30,860 --> 00:04:32,600
然后让你的指针指向它

115
00:04:32,600 --> 00:04:36,218
并且如果你的程序里面有两处相同的东西

116
00:04:36,218 --> 00:04:38,240
那些指针会指向同一个地方

117
00:04:38,379 --> 00:04:39,939
也是因为这个原因

118
00:04:39,939 --> 00:04:41,949
所以它它必须是只读的

119
00:04:41,949 --> 00:04:44,079
要不然你说s这个字符串里面的

120
00:04:44,079 --> 00:04:45,430
第一个字母变成b了

121
00:04:45,430 --> 00:04:46,870
s2 那个字符串怎么办

122
00:04:46,870 --> 00:04:47,800
对吧

123
00:04:48,120 --> 00:04:49,800
c语言是一个早期的语言

124
00:04:49,800 --> 00:04:52,589
他没有在这件事情上面做非常多的事情

125
00:04:52,589 --> 00:04:54,689
来帮助你实现这些自动化的

126
00:04:54,689 --> 00:04:57,240
怎么怎么能够互相到时候又分开了什么的

127
00:04:57,240 --> 00:04:58,839
但他做不了那么复杂的事情

128
00:04:59,060 --> 00:05:02,959
所以实际上这个s的类型是在cha前面

129
00:05:02,959 --> 00:05:03,959
有个cost

130
00:05:04,740 --> 00:05:06,769
但是呢因为历史的原因

131
00:05:06,769 --> 00:05:09,290
编译器也接受你不带const的写法

132
00:05:09,290 --> 00:05:10,509
他没有说你错

133
00:05:10,509 --> 00:05:12,550
但是实际上你不能对他写

134
00:05:12,550 --> 00:05:14,589
对他写会造成严重的后果

135
00:05:14,589 --> 00:05:18,238
如果你想要做这样一个字符串

136
00:05:18,238 --> 00:05:19,468
并且是能修改的

137
00:05:19,468 --> 00:05:22,060
你应该用数组的方式来定义这个字符串

138
00:05:22,560 --> 00:05:24,269
他们有什么区别

139
00:05:24,269 --> 00:05:27,149
如果你把它写成s方括号

140
00:05:27,149 --> 00:05:28,019
hello world

141
00:05:28,019 --> 00:05:30,180
区别就在于这是指针

142
00:05:30,180 --> 00:05:34,129
他说我要指向某个地方的一个字符串

143
00:05:34,129 --> 00:05:35,358
而这是数组

144
00:05:35,358 --> 00:05:38,939
他说那个字符串就在我这里

145
00:05:39,800 --> 00:05:40,810
也就是说

146
00:05:40,810 --> 00:05:44,740
如果我们在下面又定了一个字符串

147
00:05:44,740 --> 00:05:46,480
那那个字符串就在这儿

148
00:05:46,480 --> 00:05:48,220
那个字符串就会是这样的

149
00:05:49,100 --> 00:05:49,779
hello

150
00:05:49,779 --> 00:05:50,259
什么什么

151
00:05:50,259 --> 00:05:52,000
最后有个反斜杠铃

152
00:05:52,120 --> 00:05:53,860
他不在外面

153
00:05:53,860 --> 00:05:54,910
他在这儿

154
00:05:54,910 --> 00:05:56,620
当然实际上这

155
00:05:56,620 --> 00:05:58,788
这这个时候会发生的事情是什么呢

156
00:05:58,788 --> 00:06:00,798
其实既然你在这儿

157
00:06:00,798 --> 00:06:02,899
有那么一个字符串常量了

158
00:06:02,899 --> 00:06:05,339
那么实际上呢在你的程序里头

159
00:06:05,339 --> 00:06:08,100
还是会有那么一个hello world在哪呢

160
00:06:08,100 --> 00:06:11,819
然后呢编译器会在这儿插入一段代码

161
00:06:11,819 --> 00:06:12,660
什么代码

162
00:06:12,660 --> 00:06:14,639
它会把放在不可读

163
00:06:14,639 --> 00:06:15,660
不可写的那段

164
00:06:15,660 --> 00:06:18,790
hello world的那个那个字符数组的内容

165
00:06:18,790 --> 00:06:21,579
拷贝到你的这个s那里去

166
00:06:21,579 --> 00:06:23,139
我们试一下这个事情

167
00:06:23,199 --> 00:06:24,519
现在我们在这儿说

168
00:06:24,519 --> 00:06:26,139
我们在这儿有一个s3 

169
00:06:26,139 --> 00:06:27,129
它是一个数组

170
00:06:27,129 --> 00:06:29,540
它也等于hello world

171
00:06:29,540 --> 00:06:31,220
我们可以不妨试一下

172
00:06:31,220 --> 00:06:34,569
说这个s3 在哪儿

173
00:06:34,569 --> 00:06:39,480
然后我们可以对s3 的零做一个修改

174
00:06:39,538 --> 00:06:43,339
然后我们看一下s3 的零会变成什么样子

175
00:06:45,639 --> 00:06:49,899
我们看到说s3 也在一个很大的地方

176
00:06:50,000 --> 00:06:51,980
s3 也在一个很大的地方

177
00:06:51,980 --> 00:06:54,139
然后它的零当然是可以修改的

178
00:06:54,139 --> 00:06:55,399
这是和本地变量一样

179
00:06:55,399 --> 00:06:58,329
也就是说s3 这个数组在本地变量哪

180
00:06:58,329 --> 00:07:00,980
s和s2 他们是指针

181
00:07:00,980 --> 00:07:03,889
它们指向的那个实际存放和了word的地方

182
00:07:03,889 --> 00:07:05,660
是在很远的地方

183
00:07:05,660 --> 00:07:08,209
是在你不可以写的地方

184
00:07:08,209 --> 00:07:12,009
那么当我们要做一个字符串的时候

185
00:07:12,009 --> 00:07:14,139
当我们需要程序里面有个字符串的时候

186
00:07:14,139 --> 00:07:16,038
我们到底把它写成指针的形式

187
00:07:16,038 --> 00:07:17,778
还是写成数组的形式呢

188
00:07:17,778 --> 00:07:20,100
到底要这两种形式的哪一个呢

189
00:07:20,800 --> 00:07:22,680
如果你把它作为数组

190
00:07:22,680 --> 00:07:26,160
那么它表示说这个字符串就在这儿

191
00:07:26,500 --> 00:07:28,420
然后我们知道作为本地变量的话

192
00:07:28,420 --> 00:07:31,379
那么它的空间是自动会被回收的

193
00:07:32,379 --> 00:07:33,930
如果作为指针

194
00:07:33,930 --> 00:07:36,199
你不知道这个字符串在哪儿

195
00:07:36,339 --> 00:07:40,149
所以呢通常我们用它来做几种事情

196
00:07:40,149 --> 00:07:43,240
一个我就是要表达那么一个字符串

197
00:07:43,240 --> 00:07:44,199
我就是只读的

198
00:07:44,199 --> 00:07:45,420
我不会去写它

199
00:07:45,860 --> 00:07:48,949
第二如果是参数函数的参数

200
00:07:48,949 --> 00:07:50,389
我们已经知道在指针

201
00:07:50,389 --> 00:07:51,769
那我们已经知道在数组

202
00:07:51,769 --> 00:07:52,709
那我们已经知道

203
00:07:52,709 --> 00:07:55,170
如果数组作为指针函数的参数

204
00:07:55,170 --> 00:07:56,750
实际上它和指针是一样的

205
00:07:56,750 --> 00:08:00,139
因此这个时候我们不妨就用指针来表达

206
00:08:00,139 --> 00:08:01,129
这个函数的参数

207
00:08:01,129 --> 00:08:03,579
反正进来的都是指针

208
00:08:03,579 --> 00:08:04,569
第三种

209
00:08:04,569 --> 00:08:06,610
如果你要做动态分配空间

210
00:08:06,610 --> 00:08:08,199
如果你的这个字符串的空间

211
00:08:08,199 --> 00:08:09,579
是用malloc去得到的

212
00:08:09,579 --> 00:08:11,579
那么当然这是用指针的

213
00:08:11,879 --> 00:08:15,000
所以这就是我们选择用指针还是数组

214
00:08:15,000 --> 00:08:16,759
来表达字算的基本原则

215
00:08:17,180 --> 00:08:18,560
因此意味着说

216
00:08:18,560 --> 00:08:19,819
如果你要构造一个字符串

217
00:08:19,819 --> 00:08:20,990
我们用数组

218
00:08:20,990 --> 00:08:22,850
如果你要去处理一个字符串

219
00:08:22,850 --> 00:08:24,319
那我们用指针

220
00:08:25,339 --> 00:08:28,959
所以回过来说cha心是不是字符串

221
00:08:28,959 --> 00:08:32,480
口语当中有的教科书肯定也会这么说

222
00:08:32,480 --> 00:08:34,789
说c语言的字符串就是恰心

223
00:08:34,789 --> 00:08:36,620
这个说法不对

224
00:08:36,620 --> 00:08:38,389
至少不确切

225
00:08:38,389 --> 00:08:40,909
总算可以表达为创新的形式

226
00:08:40,909 --> 00:08:43,298
差星不一定是字符串

227
00:08:43,460 --> 00:08:44,179
创新

228
00:08:44,179 --> 00:08:45,620
只是表达说这儿有一个指针

229
00:08:45,620 --> 00:08:48,039
这个指针指向一个字节

230
00:08:48,440 --> 00:08:51,259
或者一串连续的字节

231
00:08:51,259 --> 00:08:53,438
但它并不一定是字符串啊

232
00:08:53,620 --> 00:08:56,350
它可以可能指向的是字符的数组

233
00:08:56,350 --> 00:08:57,460
也可能指向单个数组

234
00:08:57,460 --> 00:08:58,299
就像int型一样

235
00:08:58,299 --> 00:09:00,580
你能说in的心一定是个数组吗

236
00:09:00,580 --> 00:09:01,059
也不一定

237
00:09:01,059 --> 00:09:02,919
int型可能指向单个int

238
00:09:02,919 --> 00:09:05,019
也可能指向一个int的数组

239
00:09:06,240 --> 00:09:09,059
只有当cha心所指的那个地方

240
00:09:09,059 --> 00:09:11,070
它里头有结尾的零

241
00:09:11,070 --> 00:09:12,450
这个时候我们才能说

242
00:09:12,450 --> 00:09:14,700
这个恰心所指的是个字符串

243
00:09:14,700 --> 00:09:17,740
所以千万别再说差星是字符串的


1
00:00:04,519 --> 00:00:07,099
我们之前所见过的所有的变量

2
00:00:07,379 --> 00:00:09,419
都是定义在函数内部的

3
00:00:09,419 --> 00:00:12,580
那个时候我们说这些变量呢叫做本地变量

4
00:00:13,820 --> 00:00:15,310
其实当时我没说

5
00:00:15,310 --> 00:00:16,179
如果所有

6
00:00:16,179 --> 00:00:16,960
如果c语言当中

7
00:00:16,960 --> 00:00:18,640
所有的函数都是定义在函数内部的

8
00:00:18,640 --> 00:00:20,440
那那就没有本地变量

9
00:00:20,440 --> 00:00:21,640
非本地变量那一说了

10
00:00:21,640 --> 00:00:22,339
对吧

11
00:00:22,399 --> 00:00:25,100
正是因为我们可以把变量

12
00:00:25,100 --> 00:00:27,678
定义在函数的外面打出去

13
00:00:27,678 --> 00:00:29,460
那它就不是本地变量了

14
00:00:29,859 --> 00:00:32,799
所以如果有变量定义在函数的外面

15
00:00:32,799 --> 00:00:36,198
那么那些变量呢叫做全局变量

16
00:00:37,979 --> 00:00:40,799
呃全局变量呢和本地变量不一样

17
00:00:40,799 --> 00:00:43,380
本地变量我们当时说它最大的特点是什么

18
00:00:43,380 --> 00:00:45,869
就是进这个函数的时候

19
00:00:45,869 --> 00:00:47,429
这个变量才出现

20
00:00:47,429 --> 00:00:49,170
一旦离开这个函数

21
00:00:49,170 --> 00:00:50,399
它就不存在了

22
00:00:50,399 --> 00:00:52,109
只有在这个函数内部

23
00:00:52,109 --> 00:00:55,039
它才可见它才能够被访问

24
00:00:55,039 --> 00:00:59,329
它的生存期和作用域是一致的

25
00:00:59,329 --> 00:01:00,878
都是在函数内部

26
00:01:01,039 --> 00:01:03,770
而对于全局变量就不一样了

27
00:01:03,770 --> 00:01:05,219
我们来看一个例子

28
00:01:05,560 --> 00:01:08,530
现在我们这儿的这个呃这个变量啊

29
00:01:08,530 --> 00:01:09,899
呃叫做g2 

30
00:01:09,900 --> 00:01:12,480
它是定义在函数外面的

31
00:01:12,480 --> 00:01:13,859
你看这是幂函数的头

32
00:01:13,859 --> 00:01:15,840
这是f函数的头

33
00:01:15,840 --> 00:01:17,159
在两个函数的外面

34
00:01:17,159 --> 00:01:19,079
我们定义了一个变量叫做g2 

35
00:01:19,079 --> 00:01:21,239
我们给了它一个初始值12

36
00:01:21,260 --> 00:01:23,329
这个变量就是一个全局变量

37
00:01:23,329 --> 00:01:25,219
它和任何函数都没有关系

38
00:01:25,219 --> 00:01:25,939
和美没有关系

39
00:01:25,939 --> 00:01:27,399
和f也没有关系

40
00:01:27,780 --> 00:01:31,780
在这个函数之间走来走去

41
00:01:31,780 --> 00:01:33,819
和这个全局变量也没有任何关系

42
00:01:33,819 --> 00:01:36,579
你看我们现在这个程序做的事情是什么呢

43
00:01:36,579 --> 00:01:38,370
我们在me里面用了一句print f

44
00:01:38,370 --> 00:01:41,480
我们去输出了这个g2 的值

45
00:01:41,579 --> 00:01:43,709
这是一个全局的变量

46
00:01:43,709 --> 00:01:47,640
所有的函数里面都可以去访问全局的变量

47
00:01:47,640 --> 00:01:51,319
因为它的这个存在的区域啊

48
00:01:51,319 --> 00:01:55,659
它的这个作用域是要大于所有的函数的

49
00:01:55,659 --> 00:01:56,620
所以在所有的函数里面

50
00:01:56,620 --> 00:01:57,700
都可以看到这个全局变量

51
00:01:57,700 --> 00:01:59,439
因此我们可以直接使用这个全局变量

52
00:01:59,439 --> 00:02:01,510
我们输出这个全局变量的值

53
00:02:01,510 --> 00:02:03,530
在这儿有一个呃

54
00:02:03,530 --> 00:02:05,209
小细节是这个东西是干什么的

55
00:02:05,209 --> 00:02:06,950
这个东西是用来这是一个字符串

56
00:02:06,950 --> 00:02:08,629
你看我们前面用百分号s了是吧

57
00:02:08,629 --> 00:02:09,530
这是一个字符串

58
00:02:09,530 --> 00:02:12,650
这个字符串表达的是当前这个函数的名字

59
00:02:12,650 --> 00:02:13,819
也就是这个may

60
00:02:14,259 --> 00:02:15,759
然后我们做出做了这个

61
00:02:15,759 --> 00:02:18,699
我们就把g2 的这个全局变量的值

62
00:02:18,699 --> 00:02:19,659
给它输出一下啊

63
00:02:19,659 --> 00:02:20,469
我们来看一下

64
00:02:20,469 --> 00:02:22,060
然后我们去调用f函数

65
00:02:22,060 --> 00:02:23,599
在f函数里面的

66
00:02:23,599 --> 00:02:26,929
我们又用同样的方式

67
00:02:26,929 --> 00:02:29,419
输出了这个g2 的值啊

68
00:02:29,419 --> 00:02:31,038
我为什么要用这个funk呢

69
00:02:31,038 --> 00:02:33,399
好处是你看我的这句print f

70
00:02:33,399 --> 00:02:35,679
和我在命里面的这句print是完全一样的

71
00:02:35,679 --> 00:02:36,278
对吧啊

72
00:02:36,278 --> 00:02:38,389
我不用呃这个把main啊

73
00:02:38,389 --> 00:02:41,120
把放把f这个字母放在这儿啊

74
00:02:41,120 --> 00:02:42,849
我们就可以直接用这个方式

75
00:02:42,849 --> 00:02:43,990
让编译器替我们

76
00:02:43,990 --> 00:02:45,610
把这个函数的名称给放进去

77
00:02:45,610 --> 00:02:48,069
所以我们在f里头把它打印一下

78
00:02:48,069 --> 00:02:50,240
然后呢我们让这个变量加二

79
00:02:51,278 --> 00:02:53,878
那明显这个变量指的就是那个全局变量

80
00:02:53,878 --> 00:02:54,359
对不对

81
00:02:54,359 --> 00:02:56,218
然后我们又说again啊

82
00:02:56,218 --> 00:02:59,030
再一次的在这个呃f函数里头呢

83
00:02:59,030 --> 00:03:01,370
现在g2 当然是加了二以后的结果对吧

84
00:03:01,370 --> 00:03:02,810
然后我们return那个g啊

85
00:03:02,810 --> 00:03:05,659
当然现在我这个return值迷起来的作用啊

86
00:03:05,659 --> 00:03:06,620
但不管怎么说

87
00:03:06,620 --> 00:03:08,719
我们让这个全局变量的值加二了

88
00:03:08,719 --> 00:03:12,259
完了以后在main里面我们again再来打印一下

89
00:03:12,259 --> 00:03:14,150
说这时候只要的是多少呢

90
00:03:14,150 --> 00:03:17,649
我们应该会期望他得到多少呢

91
00:03:17,649 --> 00:03:19,058
我们来试一下

92
00:03:19,058 --> 00:03:21,460
看看结果是否如你的预期

93
00:03:22,718 --> 00:03:25,199
他说在main里面呢只要等于12

94
00:03:25,199 --> 00:03:26,188
就是这句话出的

95
00:03:26,188 --> 00:03:28,189
这句话说呢这个只要呢等于12

96
00:03:28,189 --> 00:03:28,969
然后呢

97
00:03:28,969 --> 00:03:31,939
第17行说在这个f里头呢就要等于12

98
00:03:31,939 --> 00:03:33,289
完了以后就要加二了

99
00:03:33,289 --> 00:03:34,020
again

100
00:03:34,519 --> 00:03:37,338
再一次的在这个f里头呢就要等于14了

101
00:03:37,338 --> 00:03:38,329
因为已经加二了

102
00:03:38,329 --> 00:03:39,599
回到main

103
00:03:39,599 --> 00:03:41,639
在第11行他又输出说

104
00:03:41,639 --> 00:03:43,199
再一次的在main里面呢

105
00:03:43,199 --> 00:03:44,759
这时候它等于14了

106
00:03:45,019 --> 00:03:47,158
这就是全局变量啊

107
00:03:47,158 --> 00:03:49,739
这个全局变量它和任何的函数都没有关系

108
00:03:49,739 --> 00:03:51,719
函数进去离开

109
00:03:51,719 --> 00:03:52,680
不管怎么样

110
00:03:52,680 --> 00:03:53,460
他总在那里

111
00:03:53,460 --> 00:03:54,750
不管你在不在

112
00:03:54,750 --> 00:03:56,219
不管函数在不在

113
00:03:56,219 --> 00:03:58,319
那个全局变量它总在那里

114
00:03:58,780 --> 00:04:01,120
然后你对全局变量的访问

115
00:04:01,120 --> 00:04:04,180
就是对那个在外面的全局变量的访问

116
00:04:04,180 --> 00:04:07,979
任何函数都会得到你所产生的那些变化

117
00:04:08,000 --> 00:04:10,580
当然我们对全局变量可以做定义初始化啊

118
00:04:10,580 --> 00:04:12,259
就像我们前面那个测试里面看的

119
00:04:12,259 --> 00:04:13,129
g2 等于12

120
00:04:13,129 --> 00:04:14,849
我们给了他一个明确的值

121
00:04:14,849 --> 00:04:18,180
但是如果你没有给它做定义初始化的话呢

122
00:04:18,180 --> 00:04:19,769
全局变量有个很好的事情

123
00:04:19,769 --> 00:04:21,930
他会得到那个零脂的啊

124
00:04:21,930 --> 00:04:24,329
编译器会自动的给它补上那个零

125
00:04:25,410 --> 00:04:27,838
那么我们之前在讲本地变量的时候啊

126
00:04:27,838 --> 00:04:28,678
其实反复在强调

127
00:04:28,678 --> 00:04:30,059
本地变量不会做这个行对吧

128
00:04:30,059 --> 00:04:32,459
本地变量不会得到默认的自动的

129
00:04:32,459 --> 00:04:33,418
那么一个初始值

130
00:04:33,418 --> 00:04:35,209
如果你不对它做初始化

131
00:04:35,209 --> 00:04:37,189
你直接去使用那个本地变量的值

132
00:04:37,189 --> 00:04:39,410
你你可能会得到乱七八糟的结果啊

133
00:04:39,410 --> 00:04:41,089
你不确定那里面内存里面有什么

134
00:04:41,089 --> 00:04:42,230
你就得到一个什么样的结果

135
00:04:42,230 --> 00:04:43,269
但是本地变量

136
00:04:43,269 --> 00:04:44,889
但是对于全局变量来说

137
00:04:44,889 --> 00:04:47,649
那正好可以得到一个默认的零值

138
00:04:47,649 --> 00:04:48,839
我们来试一下看

139
00:04:48,939 --> 00:04:50,079
所以我们现在试试看

140
00:04:50,079 --> 00:04:52,959
如果我们现在把这个给删了啊

141
00:04:52,959 --> 00:04:56,420
这个圈圈变量没有做这个初始化啊

142
00:04:56,420 --> 00:04:57,920
至少我们没有给他做初始化

143
00:04:57,920 --> 00:04:58,430
对不对

144
00:04:58,430 --> 00:04:59,980
我们来执行一下程序

145
00:04:59,980 --> 00:05:02,290
我们看到说他说在命里面呢

146
00:05:02,290 --> 00:05:04,899
这句话说这个只要等于零

147
00:05:04,899 --> 00:05:06,459
也就是说我们没有对他说实话

148
00:05:06,459 --> 00:05:08,050
但是呢他得到了零啊

149
00:05:08,050 --> 00:05:09,279
然后再往下呢

150
00:05:09,279 --> 00:05:10,899
到了这个f里头呢

151
00:05:10,899 --> 00:05:11,319
0+2

152
00:05:11,319 --> 00:05:12,399
那当然是二了

153
00:05:12,399 --> 00:05:14,339
然后回到命呢它还是二

154
00:05:15,139 --> 00:05:18,278
但如果你的呃全局变量它是指针的话

155
00:05:18,278 --> 00:05:19,838
这个指针呢也会得到零值

156
00:05:19,838 --> 00:05:21,220
这个零脂呢就是一个now

157
00:05:21,220 --> 00:05:24,639
另外呢只能用编译时刻已知的值

158
00:05:24,639 --> 00:05:26,180
来初始化全局变量

159
00:05:26,899 --> 00:05:30,699
如果我现在说我的这个极奥呢

160
00:05:30,699 --> 00:05:34,420
是f函数的返回结果

161
00:05:34,420 --> 00:05:36,490
那编译的时候会说

162
00:05:36,490 --> 00:05:40,499
这个初始化呢不是一个编译时刻的常量啊

163
00:05:40,499 --> 00:05:43,379
因为要调用一个函数才能够得到这个结果

164
00:05:43,379 --> 00:05:46,300
才能够给只要去做初始化这事儿不行

165
00:05:46,300 --> 00:05:48,009
那如果说是这样

166
00:05:48,009 --> 00:05:49,420
比如说它是等于12的

167
00:05:49,420 --> 00:05:51,160
我们还有另外一个叫g兔

168
00:05:51,160 --> 00:05:54,129
我们说呢它等于几哦

169
00:05:54,129 --> 00:05:55,379
这样行不行呢

170
00:05:57,220 --> 00:05:59,060
一样说不行啊

171
00:05:59,060 --> 00:06:01,399
虽然实际上我们现在人的眼睛

172
00:06:01,399 --> 00:06:02,689
一眼就看到啊

173
00:06:02,689 --> 00:06:05,540
说这个吉奥呢是有一个编译时刻确定的值

174
00:06:05,540 --> 00:06:06,259
12的

175
00:06:06,259 --> 00:06:08,680
可是呢编译器没有那么聪明

176
00:06:08,699 --> 00:06:10,709
他猜不到你到底要做什么

177
00:06:10,709 --> 00:06:14,250
他看到的是你把一个变量的值赋给了g2 

178
00:06:14,250 --> 00:06:17,009
他认为说这不行好

179
00:06:17,009 --> 00:06:18,779
那如果这样

180
00:06:19,980 --> 00:06:22,240
我们说g2 呢是const的

181
00:06:24,899 --> 00:06:26,420
但这时候又有一个问题

182
00:06:26,420 --> 00:06:28,339
我们下面的这个只要加等于二不行了

183
00:06:28,339 --> 00:06:28,519
是吧

184
00:06:28,519 --> 00:06:29,930
好我们把这句话给拿了

185
00:06:29,930 --> 00:06:32,220
我们现在不是在验证这个东西的时候

186
00:06:33,060 --> 00:06:34,259
他就可以了

187
00:06:34,579 --> 00:06:36,350
这个g2 等于二

188
00:06:36,350 --> 00:06:38,120
g two g g2 呢等于g2 

189
00:06:38,120 --> 00:06:39,740
这个g2 呢是个const的时候

190
00:06:39,740 --> 00:06:40,980
它是可以的

191
00:06:41,478 --> 00:06:42,829
当然呃

192
00:06:42,829 --> 00:06:45,319
我们非常不建议

193
00:06:45,319 --> 00:06:45,678
我们

194
00:06:45,678 --> 00:06:46,689
非常的

195
00:06:46,689 --> 00:06:50,050
这个不建议大家用这种方式来初始化

196
00:06:50,050 --> 00:06:51,129
一个全局变量

197
00:06:51,129 --> 00:06:52,509
全局变量变量的值

198
00:06:52,509 --> 00:06:55,490
不应该和另外一个全局变量联系在一块儿

199
00:06:55,490 --> 00:06:57,800
这事儿到后面我们讲大程序的时候

200
00:06:57,800 --> 00:06:58,790
你就会明白

201
00:06:58,790 --> 00:07:00,470
我们现在这两个全局变量

202
00:07:00,470 --> 00:07:03,120
是写在一个点c文件里头的

203
00:07:03,120 --> 00:07:06,100
他们的初始化的顺序是相对比较明确的

204
00:07:06,639 --> 00:07:08,259
如果反过来就会有问题

205
00:07:08,259 --> 00:07:11,300
你看如果我把这一行放到上面去

206
00:07:13,600 --> 00:07:16,259
编译的时候他就说诶在这一行呢

207
00:07:16,259 --> 00:07:17,100
在第五行呢

208
00:07:17,100 --> 00:07:19,319
这个只要还没有还没有声明呢

209
00:07:19,319 --> 00:07:21,279
你还不知道吉奥到底是什么呢

210
00:07:21,279 --> 00:07:23,589
啊所以编译器它很蠢的啊

211
00:07:23,589 --> 00:07:24,730
他不会像我们这样

212
00:07:24,730 --> 00:07:25,810
我我我已经看明白了

213
00:07:25,810 --> 00:07:26,290
我都知道了

214
00:07:26,290 --> 00:07:27,250
你这样做是可以的

215
00:07:27,250 --> 00:07:28,709
不会他就严严格格

216
00:07:28,709 --> 00:07:31,410
按照你的那个书写的顺序来编一点的东西

217
00:07:31,410 --> 00:07:32,730
所以这样是不行的

218
00:07:32,730 --> 00:07:35,069
那如果在你的函数内部

219
00:07:35,069 --> 00:07:36,930
有和全局变量同名的变量呢

220
00:07:36,930 --> 00:07:38,660
那个全局变量会被隐藏

221
00:07:38,699 --> 00:07:40,319
这句话什么意思呢

222
00:07:40,560 --> 00:07:43,199
假如说呢我们在这个f函数里面呢啊

223
00:07:43,199 --> 00:07:46,079
另外有个叫做g2 的本地变量啊

224
00:07:46,079 --> 00:07:47,339
它呢被初始化为一

225
00:07:47,339 --> 00:07:48,810
我们来看看现在这个时候

226
00:07:48,810 --> 00:07:51,480
这个只要和全局变量

227
00:07:51,480 --> 00:07:52,980
只要这件事什么样的关系啊

228
00:07:52,980 --> 00:07:54,360
我们来运行一下这个代码

229
00:07:54,478 --> 00:07:56,999
他说呢在命里面呢只要等于12

230
00:07:56,999 --> 00:07:58,199
这是这一行说的啊

231
00:07:58,199 --> 00:07:58,858
只要等于12

232
00:07:58,858 --> 00:08:00,478
然后呢到了f里头以后呢

233
00:08:00,478 --> 00:08:02,060
他说只要等于一

234
00:08:02,060 --> 00:08:04,399
因为我们有一个新的角了啊

235
00:08:04,399 --> 00:08:05,839
然后只要加二以后呢

236
00:08:05,839 --> 00:08:06,350
again呢

237
00:08:06,350 --> 00:08:10,829
他说这时候呢就要等于三离开了f回到命

238
00:08:10,829 --> 00:08:13,290
我们看到说在第11行最后打出来的时候

239
00:08:13,290 --> 00:08:14,889
只要能等于12

240
00:08:14,889 --> 00:08:18,040
也就是说在一个更小的范围内

241
00:08:18,040 --> 00:08:19,810
我们又重新定义了一个变量

242
00:08:19,810 --> 00:08:20,589
那么这个变量呢

243
00:08:20,589 --> 00:08:23,149
就把外面更大范围的那个变量给隐藏了

244
00:08:23,149 --> 00:08:23,870
这件事情

245
00:08:23,870 --> 00:08:25,910
其实我们在讲本地变量的时候提到过

246
00:08:25,910 --> 00:08:29,658
如果说你在这儿还有一对大括号

247
00:08:29,658 --> 00:08:31,668
在这对大括号里面呢

248
00:08:31,668 --> 00:08:35,158
你又去重新定义了一个自己的极奥

249
00:08:37,860 --> 00:08:39,860
这个时候里面的这个角啊

250
00:08:39,860 --> 00:08:41,360
又把外面的角给隐藏掉了

251
00:08:41,360 --> 00:08:43,340
你看对吧

252
00:08:43,340 --> 00:08:44,210
这是二啊

253
00:08:44,210 --> 00:08:46,159
所以他总是遵循这样一个原则

254
00:08:46,159 --> 00:08:47,460
在更小的地方

255
00:08:47,460 --> 00:08:48,779
你可以重新定义

256
00:08:48,779 --> 00:08:50,610
更大地方曾经出现过的变量

257
00:08:50,610 --> 00:08:52,220
然后把它给隐藏掉

258
00:08:52,220 --> 00:08:53,879
对于全局变量当然也是这样子


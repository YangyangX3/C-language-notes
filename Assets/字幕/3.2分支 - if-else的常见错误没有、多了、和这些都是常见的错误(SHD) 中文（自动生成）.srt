1
00:00:04,719 --> 00:00:07,139
if语句呢是我们学习的第一条语句

2
00:00:07,599 --> 00:00:10,300
这条语句呢初学者在使用的时候

3
00:00:10,300 --> 00:00:11,650
很容易遇到一些错误

4
00:00:11,650 --> 00:00:13,240
我们总结了一下一些常见的错

5
00:00:13,240 --> 00:00:16,539
我们来看一下最常见的一种错误

6
00:00:16,539 --> 00:00:17,719
就是忘了大括号

7
00:00:17,719 --> 00:00:20,120
比如说我们程序原本呢可能是想说

8
00:00:20,120 --> 00:00:21,829
如果你的年龄大于60的话

9
00:00:21,829 --> 00:00:24,140
那我会给你的salary呢乘以1.2

10
00:00:24,140 --> 00:00:26,620
然后告诉你你这个薪水是多少

11
00:00:26,620 --> 00:00:27,670
如果你不大于60的

12
00:00:27,670 --> 00:00:29,379
我就不告诉你这个事情了

13
00:00:29,379 --> 00:00:31,480
结果呢我把代码写成这个样子了

14
00:00:31,480 --> 00:00:34,119
如果h大约是32042x1.2

15
00:00:34,500 --> 00:00:37,840
那我把后面那句print f呢也做了缩进了

16
00:00:37,840 --> 00:00:39,280
但其实我们强调过很多遍

17
00:00:39,280 --> 00:00:40,600
我们的c语言的编译器

18
00:00:40,600 --> 00:00:42,609
是根本不管你的空格

19
00:00:42,609 --> 00:00:43,840
不管你的回车

20
00:00:43,840 --> 00:00:45,719
也不管你的这些缩进的东西

21
00:00:45,719 --> 00:00:47,520
所以对于c语言的编辑来说

22
00:00:47,520 --> 00:00:48,329
他看到的是

23
00:00:48,329 --> 00:00:49,380
如果ag大于60

24
00:00:49,380 --> 00:00:51,279
我们做c2032 乘以1.2

25
00:00:52,280 --> 00:00:53,738
跟pnf无关

26
00:00:54,920 --> 00:00:57,460
这个print f相当于if后面的另外一条语句

27
00:00:57,460 --> 00:00:58,960
所以不管是不是大于60

28
00:00:58,960 --> 00:01:00,100
print f都会去做的

29
00:01:00,100 --> 00:01:01,439
我们来试一下这件事情

30
00:01:02,100 --> 00:01:03,560
我们代码就写成了这个样子

31
00:01:03,560 --> 00:01:05,359
现在我们来编译运行一下

32
00:01:05,359 --> 00:01:09,950
他会说这是48000

33
00:01:09,950 --> 00:01:12,099
会把这个给输出了

34
00:01:12,780 --> 00:01:15,200
这看上去好像跟我们想要的是一样的

35
00:01:15,200 --> 00:01:16,400
这只不过正好是凑巧

36
00:01:16,400 --> 00:01:18,260
如果我们现在a组不是65

37
00:01:18,260 --> 00:01:19,400
我们的a就是55

38
00:01:19,400 --> 00:01:20,590
我们再来看一下

39
00:01:20,590 --> 00:01:21,849
如果age是55

40
00:01:21,849 --> 00:01:24,730
按照我们的想法是说age不大于60了

41
00:01:24,730 --> 00:01:26,650
那么这两句都不要做

42
00:01:26,650 --> 00:01:30,670
结果他还是会说出那个4000给你看

43
00:01:31,870 --> 00:01:32,920
要怎么修改

44
00:01:33,819 --> 00:01:35,010
很简单

45
00:01:35,010 --> 00:01:36,120
加大括号

46
00:01:36,120 --> 00:01:36,659
对不对

47
00:01:36,659 --> 00:01:38,739
我们把大括号给它加起来

48
00:01:39,799 --> 00:01:44,439
然后现在他就不会再输出任何东西

49
00:01:44,439 --> 00:01:44,859
给你看了

50
00:01:44,859 --> 00:01:46,450
因为我们用大括号明确说

51
00:01:46,450 --> 00:01:48,780
这两句是if后面的东西

52
00:01:49,260 --> 00:01:51,870
所以这个问题解决的方案很简单

53
00:01:51,870 --> 00:01:54,689
就是永远在if和else后面加大括号

54
00:01:54,689 --> 00:01:56,140
哪怕后面只有一句

55
00:01:56,480 --> 00:01:58,340
作为一个好的习惯啊

56
00:01:58,340 --> 00:01:59,480
一旦开始敲f

57
00:01:59,480 --> 00:02:00,469
一旦开始敲else

58
00:02:00,469 --> 00:02:02,319
一定就把大括号给加上去

59
00:02:03,379 --> 00:02:05,439
第二种常见的错误是这样

60
00:02:06,659 --> 00:02:09,590
我们看到有初学者会在衣服后面

61
00:02:09,590 --> 00:02:11,620
加上一个分号

62
00:02:12,459 --> 00:02:15,359
尤其是当if后面只有一句话的时候

63
00:02:15,359 --> 00:02:17,080
很多初学者会说

64
00:02:17,879 --> 00:02:19,819
我们的c是不是要求每一句话

65
00:02:19,819 --> 00:02:20,780
后面都要有分号

66
00:02:20,780 --> 00:02:22,729
所以衣服后面我也得有个分号

67
00:02:22,729 --> 00:02:25,159
如果衣服后面有分号会是怎么样

68
00:02:25,159 --> 00:02:26,919
我们来试一下这件事情

69
00:02:27,520 --> 00:02:29,520
我们现在呢a就是等于55的

70
00:02:29,520 --> 00:02:31,439
那么这个条件应该是不满足的

71
00:02:31,439 --> 00:02:32,639
按照我们的想象呢

72
00:02:32,639 --> 00:02:33,990
不满足的话呃

73
00:02:33,990 --> 00:02:36,860
后面这个句子是不会执行的对吧

74
00:02:36,979 --> 00:02:38,599
我们的在这个a就等于55

75
00:02:38,599 --> 00:02:39,620
这里呢设一个断点

76
00:02:39,620 --> 00:02:41,090
我们来调试运行一下

77
00:02:41,090 --> 00:02:43,099
现在呢我们在这儿是吧

78
00:02:43,099 --> 00:02:44,569
这个呢现在还没有赋值

79
00:02:44,569 --> 00:02:48,419
那么我们下一步结果

80
00:02:48,419 --> 00:02:51,300
下一步呢直接就到了这儿

81
00:02:51,819 --> 00:02:53,139
为什么会进到这儿来

82
00:02:53,139 --> 00:02:56,080
现在这个a就不是不大于60嘛

83
00:02:56,080 --> 00:02:56,979
条件是不满足的

84
00:02:56,979 --> 00:02:58,330
为什么还会进这儿呢

85
00:02:58,330 --> 00:03:00,520
这是因为这个分号

86
00:03:00,838 --> 00:03:02,459
这个分号虽然写在这儿

87
00:03:02,459 --> 00:03:05,319
其实你可以把它想象成它是在这儿的

88
00:03:06,680 --> 00:03:08,889
所以我们现在这个代码的局面是什么呢

89
00:03:08,889 --> 00:03:13,539
是说我们的if语句后头有一条语句了

90
00:03:13,819 --> 00:03:15,379
if语句需要有一条语句

91
00:03:15,379 --> 00:03:15,800
对不对

92
00:03:15,800 --> 00:03:16,520
如果条件成立

93
00:03:16,520 --> 00:03:17,120
他要怎么做

94
00:03:17,120 --> 00:03:18,020
你可以是单条语句

95
00:03:18,020 --> 00:03:19,699
也可以是一个大括号

96
00:03:19,699 --> 00:03:22,520
现在这个分号表明这个分号告诉编译器

97
00:03:22,520 --> 00:03:24,710
我们现在在这儿呢是有一条语句的

98
00:03:24,710 --> 00:03:26,060
可是这条语句做什么呢

99
00:03:26,060 --> 00:03:29,338
什么都不做好

100
00:03:29,338 --> 00:03:31,919
这就是c的编译器对你的代码的理解

101
00:03:31,919 --> 00:03:37,580
因此这句if语句到这儿这两行就结束了

102
00:03:37,580 --> 00:03:38,419
圆满了

103
00:03:38,419 --> 00:03:39,500
完了没了

104
00:03:39,500 --> 00:03:41,960
接下来这一对大括号是什么

105
00:03:41,960 --> 00:03:43,939
这一对大括号就是普通的语句

106
00:03:45,240 --> 00:03:47,960
你可以在你的代码里头

107
00:03:47,960 --> 00:03:49,370
在你的这个函数里头

108
00:03:49,370 --> 00:03:52,250
就这么平白无故的来上那么一堆大括号

109
00:03:52,250 --> 00:03:53,580
里头放一些语句

110
00:03:53,859 --> 00:03:56,528
c的编译器不觉得有问题

111
00:03:56,528 --> 00:03:57,998
事实上我们以后会提到

112
00:03:57,998 --> 00:04:00,639
这是我们有的时候做调试的时候的

113
00:04:00,639 --> 00:04:03,110
一些小技巧好

114
00:04:03,110 --> 00:04:05,449
所以c编译器不觉得这有问题

115
00:04:05,449 --> 00:04:08,000
而前面这个分号呢又告诉编译器说呢

116
00:04:08,000 --> 00:04:09,960
哎我的if语就到这儿结束了

117
00:04:11,878 --> 00:04:12,378
啊

118
00:04:12,378 --> 00:04:16,338
所以一定不能在衣服的这个圆括号后面

119
00:04:16,338 --> 00:04:17,298
加上一个分号

120
00:04:17,298 --> 00:04:19,968
这是我们看到很多初学者犯的错误

121
00:04:19,968 --> 00:04:21,399
千万别做这样的事

122
00:04:21,740 --> 00:04:26,120
还有一个很常见很常见很常见的错误

123
00:04:26,120 --> 00:04:29,279
就是在这个圆括号里头

124
00:04:29,279 --> 00:04:31,740
本来你应该写等于等于的

125
00:04:31,740 --> 00:04:32,959
手一抖

126
00:04:34,180 --> 00:04:35,819
只敲了一个等号

127
00:04:37,120 --> 00:04:38,490
只敲了一个等号

128
00:04:38,490 --> 00:04:39,779
就变成什么呢

129
00:04:39,779 --> 00:04:41,319
变成这是一个负值

130
00:04:41,319 --> 00:04:43,029
而赋值是一个运算符

131
00:04:43,029 --> 00:04:45,939
所以赋值a等于b这是一个表达式

132
00:04:45,939 --> 00:04:47,769
这个表达式它也会有一个结果

133
00:04:47,769 --> 00:04:49,889
这个结果就是b

134
00:04:49,889 --> 00:04:51,329
当然它还有个副作用

135
00:04:51,329 --> 00:04:52,470
把b的值给了a

136
00:04:52,470 --> 00:04:56,120
但是他一定不会去判断a和b是否相等

137
00:04:57,100 --> 00:04:59,879
所以只要b的值不是零

138
00:04:59,879 --> 00:05:01,680
这个衣服就是成立的

139
00:05:01,680 --> 00:05:04,060
然后顺便他还帮你把a的值给改了

140
00:05:04,899 --> 00:05:06,899
他不会去比较a和b是否相等

141
00:05:06,899 --> 00:05:08,160
我们可以来试一下这件事情

142
00:05:09,180 --> 00:05:11,879
如果我们的代码本来是要做

143
00:05:11,879 --> 00:05:14,500
说a9 是不是等于60

144
00:05:14,500 --> 00:05:17,560
结果呢我们不小心只敲了一个等号

145
00:05:17,560 --> 00:05:20,500
我们来看看编译运行会有什么样的结果

146
00:05:24,519 --> 00:05:29,160
编译的时候出了一个亡灵

147
00:05:30,120 --> 00:05:31,459
这是一个warning

148
00:05:31,459 --> 00:05:32,959
这不是一个error

149
00:05:33,259 --> 00:05:34,370
我们的编译器

150
00:05:34,370 --> 00:05:36,230
在看到你的程序有问题的时候

151
00:05:36,230 --> 00:05:39,139
会出两种类型的这个提示

152
00:05:39,139 --> 00:05:40,370
一种叫做error

153
00:05:40,370 --> 00:05:41,660
如果是error的话

154
00:05:41,660 --> 00:05:43,910
那么他觉得你的程序是有错的

155
00:05:43,910 --> 00:05:46,600
因此呢他不会为你产生可执行的东西

156
00:05:46,939 --> 00:05:48,620
但是如果是亡灵的话

157
00:05:50,000 --> 00:05:51,180
如果是waring

158
00:05:51,360 --> 00:05:54,959
他只是警告他不太确定的程序是不是真的

159
00:05:54,959 --> 00:05:55,620
完全错了

160
00:05:55,620 --> 00:05:56,970
他只是给你一个警告

161
00:05:56,970 --> 00:05:58,920
现在他的警告是说

162
00:05:58,978 --> 00:06:02,309
用两个等号来把这个赋值

163
00:06:02,309 --> 00:06:05,579
变成一个相等的比较

164
00:06:05,579 --> 00:06:09,829
也就他建议你把这个等号变成两个等号

165
00:06:09,829 --> 00:06:11,298
但是这是亡灵

166
00:06:11,298 --> 00:06:12,680
它没有给你

167
00:06:13,120 --> 00:06:16,680
他还是帮你去做出了那个可执行程序来

168
00:06:17,939 --> 00:06:19,519
我给大家一个建议

169
00:06:19,519 --> 00:06:24,379
就是在线从一开始就要学会尊重亡灵

170
00:06:24,379 --> 00:06:28,218
很多程序员从刚开始写程序的学习

171
00:06:28,218 --> 00:06:30,228
学习写程序的时候没有打好这个基础

172
00:06:30,228 --> 00:06:31,639
觉得王宁跟我没关系

173
00:06:31,639 --> 00:06:32,838
反正这个程序编译出来了

174
00:06:32,838 --> 00:06:34,060
我能运行的

175
00:06:35,120 --> 00:06:35,800
有人说

176
00:06:35,800 --> 00:06:37,480
如果在悬崖边立一块牌子

177
00:06:37,480 --> 00:06:38,560
说warning

178
00:06:40,060 --> 00:06:41,639
程序员都会掉下去的

179
00:06:41,639 --> 00:06:44,060
因为程序员会不尊重亡灵

180
00:06:44,560 --> 00:06:47,319
所以我建议大家从现在刚开始学的时候

181
00:06:47,319 --> 00:06:48,220
就要尊重亡灵

182
00:06:48,220 --> 00:06:49,720
要解决你的程序

183
00:06:49,720 --> 00:06:52,060
编译过程当中出现的所有的网瘾

184
00:06:52,060 --> 00:06:56,319
这些网瘾即使在现在没有问题

185
00:06:56,319 --> 00:06:57,899
也许将来是有问题的

186
00:06:57,920 --> 00:07:00,350
我们现在的这个程序就等于60

187
00:07:00,350 --> 00:07:01,279
我们可以试一下

188
00:07:01,279 --> 00:07:03,620
如果我们在输出的时候还会输出

189
00:07:03,620 --> 00:07:05,180
说那个age是多少

190
00:07:05,180 --> 00:07:06,779
我们就可以看一下

191
00:07:07,019 --> 00:07:09,180
在我们这样的程序写下来了以后

192
00:07:09,180 --> 00:07:10,589
这个结果会是什么

193
00:07:10,589 --> 00:07:12,300
现在我们的就是55

194
00:07:12,300 --> 00:07:13,959
他和60是不相等的

195
00:07:15,000 --> 00:07:16,399
我们不管这个网

196
00:07:16,399 --> 00:07:17,860
你就来运行的话

197
00:07:18,399 --> 00:07:23,540
我们会得到说现在我的age已经是60了

198
00:07:23,939 --> 00:07:24,959
已经是60了

199
00:07:24,959 --> 00:07:26,100
并且这个衣服也进去了

200
00:07:26,100 --> 00:07:28,060
因为sara已经乘以1.2了

201
00:07:28,478 --> 00:07:30,038
虽然亡灵是产生了

202
00:07:30,038 --> 00:07:33,000
但是他还是会给你生成可执行程序的

203
00:07:34,019 --> 00:07:35,598
所以如果你无视亡灵的话

204
00:07:35,598 --> 00:07:37,379
你就会遇到这样的错误

205
00:07:37,879 --> 00:07:38,600
在这里

206
00:07:38,600 --> 00:07:39,920
实际上他做了一次赋值

207
00:07:39,920 --> 00:07:41,300
把age的值给你改了

208
00:07:41,300 --> 00:07:42,980
然后正好因为这个值是60

209
00:07:42,980 --> 00:07:44,300
这个60它不是零

210
00:07:44,300 --> 00:07:45,980
于是呢我们就进去了

211
00:07:45,980 --> 00:07:46,819
假如说

212
00:07:48,699 --> 00:07:49,978
我们代码是这样的

213
00:07:51,418 --> 00:07:52,379
执行的结果会怎么样

214
00:07:52,379 --> 00:07:53,399
我们来看一下

215
00:07:54,800 --> 00:07:56,259
当然王你还是给我们了

216
00:07:56,259 --> 00:07:58,500
然后呢没有任何的输出

217
00:07:58,639 --> 00:07:59,870
程序的运行

218
00:07:59,870 --> 00:08:01,220
没有任何的输出

219
00:08:01,220 --> 00:08:04,600
这是因为这个时候age被附了一个零的值

220
00:08:04,600 --> 00:08:06,759
而这个零的值呢对于衣服来说

221
00:08:06,759 --> 00:08:08,259
就是条件不成立

222
00:08:08,259 --> 00:08:10,029
所以里头这句话就没做

223
00:08:10,029 --> 00:08:11,519
那就没有任何输出了

224
00:08:12,038 --> 00:08:14,259
所以在这个地方我们要特别小心啊

225
00:08:14,259 --> 00:08:15,399
因为c语言的衣服

226
00:08:15,399 --> 00:08:17,619
这个括号里面只要是零和非零

227
00:08:17,619 --> 00:08:19,250
它就它就会去做事情了

228
00:08:19,250 --> 00:08:20,959
所以解决的方案呢

229
00:08:20,959 --> 00:08:24,160
就是你一定要去管那个warning

230
00:08:24,399 --> 00:08:27,100
根据warning来解决你的问题

231
00:08:28,220 --> 00:08:30,339
那么当然最后还有一件事情

232
00:08:30,339 --> 00:08:34,269
就是我们在开始有if语句之后

233
00:08:34,269 --> 00:08:38,399
我们就遇到了这些所谓的缩进的问题啊

234
00:08:38,399 --> 00:08:39,600
我们我们之前的代码

235
00:08:39,600 --> 00:08:41,700
大家看到我们在课件里面列出来的代码

236
00:08:41,700 --> 00:08:45,828
在if后面都往右边缩进了

237
00:08:45,828 --> 00:08:48,259
在else后面也往右边缩进了啊

238
00:08:48,259 --> 00:08:49,729
这个是叫做缩进

239
00:08:49,729 --> 00:08:50,629
我们在敲代码的时候

240
00:08:50,629 --> 00:08:52,428
那个缩进是敲的是一个table啊

241
00:08:52,428 --> 00:08:53,970
我们键盘上那个table键

242
00:08:53,970 --> 00:08:56,970
那我们的基本原则是希望说在if和else

243
00:08:56,970 --> 00:08:58,328
后面加上大括号

244
00:08:58,328 --> 00:08:58,928
然后呢

245
00:08:58,928 --> 00:09:01,239
大括号内的语句呢要缩进一个table的位置

246
00:09:01,239 --> 00:09:04,740
那大家可以参考我们之前的代码呃

247
00:09:04,740 --> 00:09:05,940
但是再往下走

248
00:09:07,379 --> 00:09:11,100
就那就是呃可以有各种各样

249
00:09:11,100 --> 00:09:12,539
这个扯来扯去的事情了

250
00:09:12,539 --> 00:09:12,779
好

251
00:09:12,779 --> 00:09:15,610
所以我们看到最初呢

252
00:09:15,610 --> 00:09:18,169
呃我们有一种代码的风格是这样子的

253
00:09:18,169 --> 00:09:21,110
所有的if和else后面都有大括号

254
00:09:21,110 --> 00:09:22,549
然后大括号里面就缩进

255
00:09:22,549 --> 00:09:26,549
但是呢开头的大括号和if else是在同一行的

256
00:09:26,549 --> 00:09:28,500
是在那个韩末的啊

257
00:09:28,500 --> 00:09:29,599
呃

258
00:09:31,200 --> 00:09:33,769
早期之所以要这么做

259
00:09:33,769 --> 00:09:35,779
有一个很简单的理由哈

260
00:09:35,779 --> 00:09:40,500
当年呢呃像像我们刚开始学编程的时候

261
00:09:40,500 --> 00:09:44,490
我们的计算机的屏幕是80字符

262
00:09:44,490 --> 00:09:45,330
25行

263
00:09:45,330 --> 00:09:46,110
也就是说

264
00:09:46,110 --> 00:09:48,940
一瓶最多就让你看25行的代码

265
00:09:48,940 --> 00:09:50,350
那么在这种情况下

266
00:09:50,350 --> 00:09:51,730
我们采用这种写法

267
00:09:51,730 --> 00:09:54,070
显然它占用的行数比较少

268
00:09:54,070 --> 00:09:55,360
因此在同一个屏幕里面

269
00:09:55,360 --> 00:09:58,210
你可以看到更多的代码行

270
00:09:58,210 --> 00:10:03,200
然后有人就说我们宁愿要这样的代码

271
00:10:04,399 --> 00:10:07,570
这样的代码和老早期的这个老代码的

272
00:10:07,570 --> 00:10:08,529
区别就在哪呢

273
00:10:08,529 --> 00:10:11,529
因为早期的代码你看所有的结尾的大括号

274
00:10:11,529 --> 00:10:14,600
它不会和另外一个开头的大括号去对应

275
00:10:14,600 --> 00:10:16,039
而我们把它写成这个样子

276
00:10:16,039 --> 00:10:16,970
结尾的大括号

277
00:10:16,970 --> 00:10:20,318
就可以和开头的大括号一一对应了

278
00:10:20,720 --> 00:10:25,740
所以如果当我们的这个显示器比较大了

279
00:10:25,899 --> 00:10:28,539
你甚至见到我们现在有人在编程的时候

280
00:10:28,539 --> 00:10:32,039
要把那个宽屏的显示器转90度

281
00:10:32,039 --> 00:10:33,179
为什么要转90度

282
00:10:33,179 --> 00:10:36,409
转弯90度以后它有一个很长的屏幕

283
00:10:36,409 --> 00:10:37,370
有个很高的屏幕

284
00:10:37,370 --> 00:10:38,029
高度很高

285
00:10:38,029 --> 00:10:39,578
可以看很多的函数

286
00:10:39,879 --> 00:10:43,019
不过再往后还有人说我们得要这样

287
00:10:43,940 --> 00:10:46,960
我们得要把所有的else和前面的那个衣服的

288
00:10:46,960 --> 00:10:48,850
结尾的大括号再分开

289
00:10:48,850 --> 00:10:50,169
这是为什么呢

290
00:10:50,169 --> 00:10:54,110
我们来看现在的代码编辑器啊

291
00:10:54,110 --> 00:10:55,460
都会有很多帮助的功能

292
00:10:55,460 --> 00:10:56,809
其中有一种功能是这样的

293
00:10:56,809 --> 00:10:58,519
如果我们选择了这几行

294
00:10:58,519 --> 00:11:01,820
我们想在这个if else

295
00:11:01,820 --> 00:11:05,000
if f的这个级别当中把这一段给取消掉

296
00:11:05,000 --> 00:11:08,019
那么我们可以用一个快捷键

297
00:11:08,220 --> 00:11:10,289
它可以帮我们把这四行呢

298
00:11:10,289 --> 00:11:12,240
开头都加上两个斜杠

299
00:11:12,240 --> 00:11:14,559
我们前面知道两个斜杠代表的是注释

300
00:11:14,559 --> 00:11:17,049
所以这四行就从代码当中拿走了

301
00:11:17,049 --> 00:11:18,159
对于编译器来说

302
00:11:18,159 --> 00:11:20,740
他见到的就相当于是这样的东西

303
00:11:21,100 --> 00:11:25,019
那如果我们不是把else单独分开的

304
00:11:25,019 --> 00:11:27,418
而是else和前面的那个大括号连在一起的

305
00:11:27,418 --> 00:11:29,879
当我们想要利用编辑器的这个功能的时候

306
00:11:29,879 --> 00:11:30,779
我们一做

307
00:11:31,799 --> 00:11:34,970
他就把前面那个衣服的结尾的括号

308
00:11:34,970 --> 00:11:35,899
也注释掉了

309
00:11:35,899 --> 00:11:38,599
那么这个时候编辑器看到的是这样的

310
00:11:38,720 --> 00:11:40,220
显然这个时候我们就出现了

311
00:11:40,220 --> 00:11:41,399
大括号的不匹配

312
00:11:42,139 --> 00:11:44,559
那么面对着这么多种的风格

313
00:11:44,559 --> 00:11:45,899
你到底选择什么呢

314
00:11:46,600 --> 00:11:49,559
我希望大家至少做到下面这两条

315
00:11:49,559 --> 00:11:51,960
就是if和else后面加大括号

316
00:11:51,960 --> 00:11:53,899
然后大括号内的语句缩进

317
00:11:53,899 --> 00:11:55,460
至于说更进一步的

318
00:11:55,460 --> 00:11:57,500
你选择开口在哪儿

319
00:11:57,500 --> 00:11:59,399
你选择els要不要分开

320
00:11:59,500 --> 00:12:00,610
没关系

321
00:12:00,610 --> 00:12:02,320
而且我还得告诉你一件事情

322
00:12:02,320 --> 00:12:04,360
将来你如果进大公司工作

323
00:12:04,360 --> 00:12:05,659
通常来说

324
00:12:05,860 --> 00:12:09,259
软件企业会有一些自己的规范要求

325
00:12:09,919 --> 00:12:11,350
他会告诉你该怎么做

326
00:12:11,350 --> 00:12:12,759
那进了企业

327
00:12:12,759 --> 00:12:14,320
你就按照企业要求做就好了


1
00:00:04,459 --> 00:00:07,040
如果我们通过函数的参数

2
00:00:07,040 --> 00:00:09,939
把一个数组传到函数里头去了

3
00:00:10,439 --> 00:00:12,119
那么在这个函数里头

4
00:00:12,119 --> 00:00:14,179
它接收到的是个什么东西呢

5
00:00:14,539 --> 00:00:17,329
我们知道如果我们传一个普通变量

6
00:00:17,329 --> 00:00:19,760
那么参数接收到的是值

7
00:00:19,800 --> 00:00:21,269
如果传一个指针

8
00:00:21,269 --> 00:00:23,940
那么参数参数接收到的也是值

9
00:00:23,940 --> 00:00:26,320
只不过这个时候的值是地址

10
00:00:26,439 --> 00:00:27,579
宿主是什么

11
00:00:28,778 --> 00:00:33,450
到底我们把一个数组作为值传给一个函数

12
00:00:33,450 --> 00:00:34,920
在函数的参数表里面

13
00:00:34,920 --> 00:00:37,560
有一个数组变量去接收那个数组

14
00:00:37,560 --> 00:00:39,098
到底才接收到了什么

15
00:00:39,740 --> 00:00:41,380
我们知道如果是个普通变量

16
00:00:41,380 --> 00:00:43,960
那么我们接收到的值如果是个指针

17
00:00:43,960 --> 00:00:46,479
我们接收到的也是指是指针的值

18
00:00:46,479 --> 00:00:48,130
它代表了外面的那个变量

19
00:00:48,130 --> 00:00:50,240
那么对于一个数组变量

20
00:00:50,240 --> 00:00:53,179
出现在参数表里面的数组参数

21
00:00:53,179 --> 00:00:55,729
它到底接收到数组变量的一个什么东西呢

22
00:00:55,729 --> 00:00:57,060
接到一个什么值呢

23
00:00:57,060 --> 00:00:59,609
我们来做一点探索性的实验

24
00:00:59,609 --> 00:01:01,469
我们拿米max来做这个实验

25
00:01:01,469 --> 00:01:04,140
为什么在明max这个函数里头

26
00:01:04,140 --> 00:01:07,319
我们的这个a我们不能够用size of

27
00:01:07,319 --> 00:01:09,659
来算出它的元素的个数呢

28
00:01:09,659 --> 00:01:11,819
那到底它的size是多少呢

29
00:01:11,819 --> 00:01:14,019
所以我们可以在这里进来的时候

30
00:01:14,019 --> 00:01:22,340
先说在明max里头这个size of a是多少啊

31
00:01:22,340 --> 00:01:24,859
或者说三张a是多少呢

32
00:01:25,019 --> 00:01:28,620
同样的我们需要在调用名max之前

33
00:01:28,620 --> 00:01:31,079
在命里头我们也来看一下

34
00:01:31,079 --> 00:01:33,140
说在main里头呢

35
00:01:33,140 --> 00:01:35,629
这个时候它的size of a是多少

36
00:01:35,629 --> 00:01:37,799
我们看看这两者是不是一样的

37
00:01:42,099 --> 00:01:43,829
我们先不管那个亡灵哈

38
00:01:43,829 --> 00:01:46,709
我们先看到结果是什么

39
00:01:46,709 --> 00:01:47,939
他说在main里面呢

40
00:01:47,939 --> 00:01:49,420
a的大小是64

41
00:01:49,799 --> 00:01:51,659
而在明max里头

42
00:01:51,659 --> 00:01:53,280
a的大小只有四个

43
00:01:53,599 --> 00:01:54,859
四是什么

44
00:01:54,859 --> 00:01:57,420
我现在是以32位架构来编译它的

45
00:01:58,599 --> 00:02:01,799
四刚好和一个指针的大小是一样的

46
00:02:01,799 --> 00:02:03,459
和地址的大小是一样的

47
00:02:03,900 --> 00:02:06,390
然后我们再来看王你是什么

48
00:02:06,390 --> 00:02:07,840
王宁说

49
00:02:08,799 --> 00:02:12,180
size of a refunction parameter

50
00:02:12,399 --> 00:02:17,050
他说对于函数的参数的数组

51
00:02:17,050 --> 00:02:21,460
函数参数当中的数组的size返回的是int

52
00:02:21,460 --> 00:02:22,389
新的size

53
00:02:22,389 --> 00:02:26,099
而不是int数组的size

54
00:02:27,080 --> 00:02:28,060
为什么

55
00:02:28,060 --> 00:02:28,780
换句话说

56
00:02:28,780 --> 00:02:29,710
他告诉我们说

57
00:02:29,710 --> 00:02:32,169
你的函数参数里面的阿瑞

58
00:02:32,169 --> 00:02:35,439
那个数组其实是int型

59
00:02:36,099 --> 00:02:37,349
真的是这样吗

60
00:02:37,349 --> 00:02:39,210
我们可以再看一个事情

61
00:02:39,210 --> 00:02:42,740
如果我们在mean这个地方呢

62
00:02:43,000 --> 00:02:46,870
我们知道我们可以看到这个a的地址

63
00:02:46,870 --> 00:02:47,639
对不对

64
00:02:48,099 --> 00:02:49,780
用百分号p来看

65
00:02:50,019 --> 00:02:52,329
我们可以看a的地址

66
00:02:52,329 --> 00:02:57,519
同样的我们可以在mmax里头看a的地址

67
00:02:57,519 --> 00:02:59,580
现在我们来运行它一下

68
00:03:00,819 --> 00:03:04,349
他说在main里面的a是一零

69
00:03:04,349 --> 00:03:06,659
在明max里头a也是一零

70
00:03:06,659 --> 00:03:07,439
你仔细对一下

71
00:03:07,439 --> 00:03:09,000
每一位都是一模一样的

72
00:03:09,878 --> 00:03:11,240
这说明什么

73
00:03:12,899 --> 00:03:15,679
这说明在明max里头

74
00:03:15,679 --> 00:03:17,718
我的这个a这个数组

75
00:03:17,718 --> 00:03:21,009
其实就是命里面的那个a数组

76
00:03:21,009 --> 00:03:22,330
他们俩是一模一样的

77
00:03:22,330 --> 00:03:23,770
是同一个啊

78
00:03:23,770 --> 00:03:24,610
不是一模一样的问题

79
00:03:24,610 --> 00:03:25,840
他们根本就是同一个

80
00:03:25,840 --> 00:03:26,889
他们不是双胞胎

81
00:03:26,889 --> 00:03:29,349
他们就是那一个人是一个演员

82
00:03:29,349 --> 00:03:30,759
演了两个双胞胎

83
00:03:32,459 --> 00:03:33,599
就是一个人

84
00:03:33,939 --> 00:03:36,759
所以你看如果我们干点坏事啊

85
00:03:36,759 --> 00:03:38,919
如果我在这儿说a的

86
00:03:38,919 --> 00:03:42,199
比如说0=1000

87
00:03:43,998 --> 00:03:47,020
我在明max这个函数里头把这个参数

88
00:03:47,299 --> 00:03:49,068
这个数组给改了

89
00:03:49,068 --> 00:03:50,419
一个值给改了

90
00:03:50,419 --> 00:03:52,740
我们回到命里头

91
00:03:52,740 --> 00:03:54,479
在执行完了明max之后

92
00:03:54,479 --> 00:03:55,919
如果我们试图来输出一下

93
00:03:55,919 --> 00:04:00,389
说现在我的a0 等于多少呢

94
00:04:00,389 --> 00:04:02,120
a0 等于1000

95
00:04:03,959 --> 00:04:08,399
啊所以实际上这个东西是什么

96
00:04:08,399 --> 00:04:10,139
这个东西就是指针

97
00:04:11,919 --> 00:04:14,649
函数参数表里面的数组

98
00:04:14,649 --> 00:04:17,709
为什么我们在里头必须是留一个空的

99
00:04:17,709 --> 00:04:18,428
方括号

100
00:04:18,428 --> 00:04:20,829
为什么在方括号里面写数字也没用

101
00:04:20,829 --> 00:04:24,060
为什么在这个函数里头

102
00:04:24,060 --> 00:04:26,579
你没办法用size of来得到正确的

103
00:04:26,579 --> 00:04:28,500
这个数组的元素个数了

104
00:04:28,500 --> 00:04:31,259
原因就在于它其实是个指针

105
00:04:31,980 --> 00:04:33,319
它只是样子

106
00:04:33,319 --> 00:04:36,040
看上去像一个数组一样

107
00:04:36,658 --> 00:04:41,439
那如果既然它实际上是个指针

108
00:04:41,439 --> 00:04:43,480
我们把它写成指针行不行

109
00:04:43,480 --> 00:04:46,490
我们把这里也给它改成指针

110
00:04:46,490 --> 00:04:47,750
编译还能过吗

111
00:04:47,750 --> 00:04:49,060
我们来试一下

112
00:04:51,699 --> 00:04:53,170
编译通过了

113
00:04:53,170 --> 00:04:54,250
运行还正确吗

114
00:04:54,250 --> 00:04:55,449
我们来试一下

115
00:04:55,449 --> 00:04:57,399
运行很正确

116
00:04:57,399 --> 00:04:58,810
和刚才一模一样

117
00:04:58,810 --> 00:05:01,939
往你都没有了哦

118
00:05:02,839 --> 00:05:04,240
这是指针哦

119
00:05:04,240 --> 00:05:05,709
a是指针哦

120
00:05:05,709 --> 00:05:12,470
可是在这a0 ai ai ai a0 

121
00:05:12,470 --> 00:05:14,899
我们都当作数组一样在用

122
00:05:14,899 --> 00:05:17,538
它可以啊

123
00:05:17,538 --> 00:05:19,420
我们可以这样用啊

124
00:05:20,379 --> 00:05:26,550
所以数组和指针似乎存在某种联系

125
00:05:26,550 --> 00:05:29,310
因此我们说函数参数表中的数组呢

126
00:05:29,310 --> 00:05:30,620
实际上是指针

127
00:05:31,220 --> 00:05:32,740
你对它做32v1 

128
00:05:32,740 --> 00:05:34,660
实际上它就是32int的指针

129
00:05:34,660 --> 00:05:37,819
但是呢对于这样的指组指针

130
00:05:37,819 --> 00:05:39,139
我们可以用数组的运算符

131
00:05:39,139 --> 00:05:41,199
这个方括号运算符来进行运算

132
00:05:42,199 --> 00:05:42,939
因此呢

133
00:05:42,939 --> 00:05:45,699
实际上下面这四种函数原型是等价的

134
00:05:45,699 --> 00:05:47,199
我们说有个int的新a r

135
00:05:47,199 --> 00:05:49,329
和我们说有个int的数组a r

136
00:05:49,329 --> 00:05:50,779
它们是等价的

137
00:05:50,920 --> 00:05:53,620
不是说他们这两种类型是等价的啊

138
00:05:53,620 --> 00:05:55,930
只是说他们在参数表当中出现的话

139
00:05:55,930 --> 00:05:56,949
它们是等价的

140
00:05:56,949 --> 00:05:58,060
作为函数原型

141
00:05:58,060 --> 00:05:59,180
它们是等价的

142
00:05:59,959 --> 00:06:04,230
实际上呢数组变量是特殊的指针

143
00:06:04,230 --> 00:06:06,899
因为数组变量本身就表达地址

144
00:06:06,899 --> 00:06:09,899
这个我们在这个取地址符的时候

145
00:06:09,899 --> 00:06:14,319
我们看到我们去取数组的地址

146
00:06:14,319 --> 00:06:16,089
我们可以不需要加and的符号

147
00:06:16,089 --> 00:06:18,189
直接拿数组的变量的名字

148
00:06:18,189 --> 00:06:19,810
就可以得到数组的地址

149
00:06:19,810 --> 00:06:21,689
所以呢这个数组变量本身

150
00:06:21,689 --> 00:06:22,949
它表达的就是地址

151
00:06:22,949 --> 00:06:26,490
因此我们取地址符不需要用and取地址

152
00:06:26,490 --> 00:06:28,339
但是呢数组的单元

153
00:06:28,339 --> 00:06:30,800
每一个单元表达的是单个的变量

154
00:06:30,800 --> 00:06:31,279
对不对

155
00:06:31,279 --> 00:06:32,420
比如说int a的话

156
00:06:32,420 --> 00:06:34,990
那么a1 a0 a一它就是一个int

157
00:06:34,990 --> 00:06:37,240
因此呢对单个的单元取地址

158
00:06:37,240 --> 00:06:39,550
是需要用and来取符号的

159
00:06:39,550 --> 00:06:42,430
但是呢a的地址就等于a0 的地址

160
00:06:42,430 --> 00:06:44,500
这件事情我们在取地址的时候看到过了

161
00:06:44,500 --> 00:06:47,980
而这个方括号运算符可以对数组做

162
00:06:47,980 --> 00:06:49,839
也可以对指针做

163
00:06:50,980 --> 00:06:52,470
如果我有一个数组

164
00:06:52,470 --> 00:06:53,980
我对他做p0 

165
00:06:54,139 --> 00:06:58,259
它就相当于新号p我们来试一下这件事情

166
00:06:58,259 --> 00:07:01,319
我们不妨呢就在这个代码上面加点东西哈

167
00:07:01,319 --> 00:07:03,870
呃偷懒来直接利用这个代码

168
00:07:03,870 --> 00:07:06,819
我们现在呢有一个int新p

169
00:07:06,819 --> 00:07:09,319
我们让它等于命的地址

170
00:07:09,379 --> 00:07:10,279
所以我们知道

171
00:07:10,279 --> 00:07:12,709
如果我要输出int

172
00:07:12,709 --> 00:07:14,750
我要如果我要输出新p的值

173
00:07:14,750 --> 00:07:15,500
它就是命

174
00:07:15,500 --> 00:07:16,399
所以我们可以看一下

175
00:07:16,399 --> 00:07:20,699
如果我要看新p等于多少

176
00:07:23,040 --> 00:07:24,680
他应该就是命的值

177
00:07:24,680 --> 00:07:31,009
然后我可以说如如果我要看p0 是多少

178
00:07:31,009 --> 00:07:33,079
应该按照刚才的理论

179
00:07:33,079 --> 00:07:34,160
他应该两个相同的值

180
00:07:34,160 --> 00:07:35,300
我们来验证一下

181
00:07:35,740 --> 00:07:37,209
他说cp等于二

182
00:07:37,209 --> 00:07:39,199
p0 也等于二

183
00:07:39,500 --> 00:07:40,970
p0 是什么意思

184
00:07:40,970 --> 00:07:42,079
p0 是说

185
00:07:42,079 --> 00:07:46,279
如果我以为p所指的地方是个数数组的话

186
00:07:46,279 --> 00:07:48,959
那么它的第一个单元

187
00:07:49,218 --> 00:07:51,168
因此实际上是什么呢

188
00:07:51,168 --> 00:07:52,699
我们现在并没有针对数组

189
00:07:52,699 --> 00:07:53,298
对不对

190
00:07:53,298 --> 00:07:55,600
我们有的是一个叫做命的变量

191
00:07:56,079 --> 00:07:59,579
这是命这个变量里面有一个值二

192
00:07:59,639 --> 00:08:00,449
对不对

193
00:08:00,449 --> 00:08:03,660
然后呢我们有一个指针叫做p

194
00:08:03,660 --> 00:08:05,579
这个p呢得到了命的地址

195
00:08:05,579 --> 00:08:07,319
所以p指向了这个二

196
00:08:07,959 --> 00:08:12,059
那么新p当然这就是p这个地址

197
00:08:12,059 --> 00:08:15,110
这个指针所指的那个变量的值就没有问题

198
00:08:15,110 --> 00:08:16,279
p0 是什么呢

199
00:08:16,279 --> 00:08:19,678
是把p所指的那块地方当做是一个数组

200
00:08:19,678 --> 00:08:21,418
现在它是它不是一个数组

201
00:08:21,418 --> 00:08:22,139
它只是一个变量

202
00:08:22,139 --> 00:08:22,619
对不对

203
00:08:22,619 --> 00:08:24,959
但是呢你可以认为说这里有一个数组

204
00:08:24,959 --> 00:08:26,278
这个数组的长度是什么呢

205
00:08:26,278 --> 00:08:30,329
你可以认为说这是一个int命一

206
00:08:30,329 --> 00:08:31,230
也可以这样看

207
00:08:31,230 --> 00:08:31,709
对不对

208
00:08:31,709 --> 00:08:33,149
对于一个int 01来说

209
00:08:33,149 --> 00:08:34,889
它的有效的下标范围是什么

210
00:08:34,889 --> 00:08:37,179
那就只有命临了

211
00:08:37,179 --> 00:08:38,919
当然对于普通的变量命

212
00:08:38,919 --> 00:08:40,059
你不能这样去写啊

213
00:08:40,059 --> 00:08:40,990
这样写是不行的

214
00:08:40,990 --> 00:08:42,399
可是呢对于一个指针变量

215
00:08:42,399 --> 00:08:43,600
你就可以这样写了啊

216
00:08:43,600 --> 00:08:44,659
这样写是不行的

217
00:08:44,659 --> 00:08:46,340
但是呢对于一个指针变量就可以这样写了

218
00:08:46,340 --> 00:08:48,000
你可以说p0 

219
00:08:48,139 --> 00:08:51,019
也就是它所指的那个地址

220
00:08:51,019 --> 00:08:54,120
上面的第一个整数取出来作为p0 

221
00:08:54,220 --> 00:08:55,899
同样的星号

222
00:08:55,899 --> 00:08:58,240
我们知道这个运算符是对指针做的啊

223
00:08:58,240 --> 00:09:01,120
是要取出指针所指的那个变量里头的值

224
00:09:01,120 --> 00:09:02,639
它也可以对数组做

225
00:09:02,679 --> 00:09:04,179
如果我们有那个数组

226
00:09:04,179 --> 00:09:06,458
我们也可以说新a我们来试一下这件事情

227
00:09:06,759 --> 00:09:07,870
在我们这里呢

228
00:09:07,870 --> 00:09:10,299
我们可以再加一个东西说print

229
00:09:10,299 --> 00:09:12,759
我们现在已经知道说a0 是1000

230
00:09:12,759 --> 00:09:13,419
被我们改掉了

231
00:09:13,419 --> 00:09:13,659
对不对

232
00:09:13,659 --> 00:09:17,779
我们来说这个新a等于多少呢

233
00:09:19,159 --> 00:09:21,159
新a你看a是一个数组

234
00:09:21,159 --> 00:09:22,840
但是我也给他给他加星号啊

235
00:09:24,220 --> 00:09:27,500
他会说新a等于1000啊

236
00:09:27,500 --> 00:09:28,340
先a等于1000

237
00:09:28,340 --> 00:09:31,159
所以而且不仅是可以读那个值

238
00:09:31,159 --> 00:09:32,299
我们也可以写那个值啊

239
00:09:32,299 --> 00:09:34,049
反正把它当指针用就可以了

240
00:09:34,049 --> 00:09:38,578
那实际上呢数组变量是const的指针

241
00:09:39,360 --> 00:09:41,570
我们之前在讲数组的时候提到过

242
00:09:41,570 --> 00:09:42,919
你如果有俩数组

243
00:09:42,919 --> 00:09:45,679
你如果说我这另外还有一个数组变量

244
00:09:45,679 --> 00:09:47,649
b这是一个数字变量对吧

245
00:09:47,649 --> 00:09:50,179
你想说b等于a这事儿是不行的

246
00:09:50,440 --> 00:09:53,110
你不能做这样的这样这样这样的一个事情

247
00:09:53,110 --> 00:09:54,879
你甚至在定义的时候也不能说b点

248
00:09:54,879 --> 00:09:57,909
以为数组变量之间是不能做互相扶持的

249
00:09:57,909 --> 00:10:00,980
把它传递到参数哪儿去

250
00:10:00,980 --> 00:10:04,789
实际上做的事情是说我有一个int新

251
00:10:04,789 --> 00:10:08,259
q等于了a这是可以的

252
00:10:09,120 --> 00:10:11,059
b等于a和q等于a

253
00:10:11,059 --> 00:10:12,529
这两行一个可以一个不可以

254
00:10:12,529 --> 00:10:13,730
有什么区别呢

255
00:10:13,730 --> 00:10:19,308
区别就在于实际上我们说的那个int int b

256
00:10:19,308 --> 00:10:21,899
它可以被看作是什么呢

257
00:10:22,240 --> 00:10:27,740
它可以被看作是int新cost

258
00:10:30,259 --> 00:10:34,149
这个cos加在这儿说这个b是一个常数

259
00:10:34,149 --> 00:10:35,559
它不能被改变

260
00:10:35,559 --> 00:10:36,940
你初始化出来了

261
00:10:36,940 --> 00:10:38,679
你把它这个变量创建出来了

262
00:10:38,679 --> 00:10:40,210
它是这个数组

263
00:10:40,210 --> 00:10:42,578
它就不能再去代表别的数组了

264
00:10:42,820 --> 00:10:45,599
所以它是一个常量指针

265
00:10:45,639 --> 00:10:47,379
这就足以解释很多东西了

266
00:10:47,379 --> 00:10:47,889
对不对

267
00:10:47,889 --> 00:10:49,600
一个数组是一个常量指针

268
00:10:49,600 --> 00:10:52,110
所以这个数组变量呢不能被赋值

269
00:10:52,110 --> 00:10:53,159
不能交给

270
00:10:53,159 --> 00:10:55,230
不能再去等于另外一个数组

271
00:10:55,230 --> 00:10:57,019
两个数组之间不能直接做赋值


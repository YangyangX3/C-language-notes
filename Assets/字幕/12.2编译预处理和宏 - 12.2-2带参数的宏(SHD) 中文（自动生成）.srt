1
00:00:04,500 --> 00:00:05,009
红啊

2
00:00:05,009 --> 00:00:07,080
除了可以像这个呃

3
00:00:07,080 --> 00:00:08,759
我们前面看到的简单的啊

4
00:00:08,759 --> 00:00:09,539
有个名字

5
00:00:09,539 --> 00:00:10,980
然后有个值啊

6
00:00:10,980 --> 00:00:12,830
然后编译预处理的时候

7
00:00:12,830 --> 00:00:14,869
能把那个名字替换为那个值

8
00:00:14,869 --> 00:00:16,839
除了可以做这些简单的事情之外

9
00:00:16,939 --> 00:00:20,600
还可以定义像函数那个样子的红

10
00:00:20,759 --> 00:00:25,678
在这个红的名字里头可以用参数啊

11
00:00:25,678 --> 00:00:28,079
比如说我们现在屏幕上

12
00:00:28,079 --> 00:00:31,199
这个我们说define一个叫做cube的东西

13
00:00:31,199 --> 00:00:32,579
cube就是立方对吧

14
00:00:32,579 --> 00:00:34,238
然后呢我们用圆括号

15
00:00:34,238 --> 00:00:37,149
所以这个首先这个第一个单词

16
00:00:37,149 --> 00:00:38,889
也就是我们原来说红的那个名字啊

17
00:00:38,889 --> 00:00:40,710
它就很像一个函数的样子对吧

18
00:00:40,710 --> 00:00:42,960
我们有圆括号表明这是一个函数

19
00:00:42,960 --> 00:00:44,850
圆括号里面呢有一个参数

20
00:00:44,850 --> 00:00:47,340
只不过呢跟c的函数不一样

21
00:00:47,340 --> 00:00:48,420
是这个圆框里面

22
00:00:48,420 --> 00:00:51,420
那个参数呢是没有类型的啊

23
00:00:51,420 --> 00:00:52,320
我们不管类型

24
00:00:52,320 --> 00:00:54,960
我们只是说这里有个有个xx是个参数

25
00:00:54,960 --> 00:00:57,990
将来x会被替换为其他的东西的

26
00:00:57,990 --> 00:01:01,939
然后后面的跟刚才做的那个地方一样啊

27
00:01:01,939 --> 00:01:05,150
第一个空格隔开的第一个东西是一个名字

28
00:01:05,150 --> 00:01:07,060
那么后面呢就是它的值

29
00:01:07,140 --> 00:01:09,359
这个东西将来就会被替换了

30
00:01:10,379 --> 00:01:11,549
会替换成什么样呢

31
00:01:11,549 --> 00:01:12,739
我们来看看

32
00:01:13,260 --> 00:01:15,159
比如我们现在这个程序啊

33
00:01:15,400 --> 00:01:18,609
我们让print f呢去输出cube

34
00:01:18,609 --> 00:01:20,200
如果单纯看到这一行

35
00:01:20,200 --> 00:01:21,609
单纯看到这个地方

36
00:01:21,609 --> 00:01:25,079
那简直就完全就是一个c语言的函数调用

37
00:01:25,079 --> 00:01:25,439
对吧

38
00:01:25,439 --> 00:01:27,060
我们就要用那个cube函数

39
00:01:27,060 --> 00:01:28,709
把五这个参数传给他了

40
00:01:28,709 --> 00:01:32,259
但实际上呢cube是我们这定义那个红

41
00:01:33,000 --> 00:01:33,950
让我们看看

42
00:01:33,950 --> 00:01:35,930
也就是说这里的这个x呢

43
00:01:35,930 --> 00:01:38,359
会被用五来替换掉

44
00:01:38,359 --> 00:01:41,700
而整个cube 5呢会被替换成这个式子

45
00:01:41,939 --> 00:01:42,900
那么也就是说

46
00:01:42,900 --> 00:01:45,599
我们可以认为是说把这个东西拿下来

47
00:01:45,599 --> 00:01:47,430
把它替换掉

48
00:01:47,430 --> 00:01:49,920
然后把所有的x都替换成五

49
00:01:49,920 --> 00:01:52,618
也就是它会被替换成这个样子

50
00:01:52,959 --> 00:01:54,579
是不是真的是这样子呢

51
00:01:54,579 --> 00:01:56,859
我们用刚才的方法看一下

52
00:01:56,859 --> 00:01:58,060
看啊

53
00:01:58,060 --> 00:01:59,829
g c c的时候save tes

54
00:01:59,829 --> 00:02:04,200
然后呢我们来看一下这个唉

55
00:02:04,200 --> 00:02:08,400
这个时候你看就是我们刚才想的那个样子

56
00:02:08,560 --> 00:02:12,409
把整个cube后面东西拷过来

57
00:02:12,409 --> 00:02:13,159
变成这个样子

58
00:02:13,159 --> 00:02:15,379
然后里头的x换成五

59
00:02:15,379 --> 00:02:18,560
那么当然这时候你可以用一个常量五

60
00:02:18,560 --> 00:02:19,520
你也可以用别的东西

61
00:02:19,520 --> 00:02:21,289
比如说如果我们有一个变量i

62
00:02:21,289 --> 00:02:24,180
然后呢我们skin f去读那个i进来

63
00:02:25,899 --> 00:02:27,718
然后我们说我们要cube

64
00:02:27,718 --> 00:02:30,439
这个i肯定也是可以的

65
00:02:30,780 --> 00:02:32,860
这个时候会替换成什么样子呢

66
00:02:35,699 --> 00:02:37,520
啊所有的五变成了i

67
00:02:38,539 --> 00:02:42,599
假如说我们说不是cube i

68
00:02:42,599 --> 00:02:45,120
而是cube i加二行吗

69
00:02:45,120 --> 00:02:46,199
我们看看

70
00:02:47,998 --> 00:02:48,879
编译

71
00:02:49,718 --> 00:02:54,900
最后你看i加二乘以i加二乘以i加二

72
00:02:54,900 --> 00:02:55,979
看上去很完美

73
00:02:55,979 --> 00:02:56,639
对不对

74
00:02:56,639 --> 00:03:00,030
好像这似乎是另外一种定义函数的方式了

75
00:03:00,030 --> 00:03:00,270
对吧

76
00:03:00,270 --> 00:03:02,669
我们不需要真的去写一个函数

77
00:03:02,669 --> 00:03:04,939
哎我们定义这么一个红也可以了

78
00:03:04,939 --> 00:03:07,340
但是在这种红的定义当中啊

79
00:03:07,639 --> 00:03:09,560
初学者很容易犯错误的

80
00:03:09,560 --> 00:03:12,530
比如说我们现在屏幕上的这两行

81
00:03:12,530 --> 00:03:16,150
这两个红是不是错的

82
00:03:16,150 --> 00:03:17,080
如果有错

83
00:03:17,080 --> 00:03:18,180
错在哪儿呢

84
00:03:21,520 --> 00:03:23,120
我们试一下就知道了

85
00:03:23,659 --> 00:03:25,039
为了区别起见呢

86
00:03:25,039 --> 00:03:26,180
我们把第一个叫做一

87
00:03:26,180 --> 00:03:27,259
第二个叫做二啊

88
00:03:27,259 --> 00:03:28,520
这是两个分开的

89
00:03:28,520 --> 00:03:29,810
我们来说这个事情

90
00:03:29,810 --> 00:03:33,020
这个首先呢呃当然他要做的事情

91
00:03:33,020 --> 00:03:36,020
是说要把这个从弧度转换成角度

92
00:03:36,020 --> 00:03:36,800
对吧啊

93
00:03:36,800 --> 00:03:40,129
所以呢是x乘以57.29578等等啊

94
00:03:40,129 --> 00:03:42,830
那我们可以来试一下这个事情啊

95
00:03:42,830 --> 00:03:47,319
我们假如说用print f啊

96
00:03:47,319 --> 00:03:53,879
来输出这个i d这个东东西的值对吧

97
00:03:53,879 --> 00:03:55,259
那么它有两个

98
00:03:55,259 --> 00:03:56,699
所以呢我们来做两个

99
00:03:56,699 --> 00:03:58,979
那如果第一个呢是这样子的啊

100
00:03:58,979 --> 00:04:01,039
我们要做5+2

101
00:04:01,519 --> 00:04:02,359
那就七

102
00:04:02,359 --> 00:04:05,479
我们要算7x57点多少是多少

103
00:04:05,479 --> 00:04:06,139
对不对

104
00:04:06,139 --> 00:04:08,479
第二个呢我们来做一个这样的事情

105
00:04:08,479 --> 00:04:10,219
就是180

106
00:04:11,759 --> 00:04:15,020
180去除以这个呃

107
00:04:15,020 --> 00:04:16,920
比如说二乘以啊

108
00:04:16,920 --> 00:04:19,610
我们这样一乘以这个五七点多少

109
00:04:19,610 --> 00:04:22,129
那么如果大家拿计算器算一下的话

110
00:04:22,129 --> 00:04:23,870
这个是7x57点多少

111
00:04:23,870 --> 00:04:26,279
大概573 15啊

112
00:04:27,100 --> 00:04:30,680
大概呃这个400多的一个值是吧

113
00:04:30,680 --> 00:04:32,240
应该有一个400多的一个值

114
00:04:32,240 --> 00:04:34,959
而这个的话呢是这个180

115
00:04:34,959 --> 00:04:36,790
除以这个57嘛

116
00:04:36,790 --> 00:04:37,329
这是一嘛

117
00:04:37,329 --> 00:04:38,050
1x57嘛

118
00:04:38,050 --> 00:04:40,259
所以大概呃三呃

119
00:04:40,259 --> 00:04:42,089
多一点点的那么一个值是吧

120
00:04:42,089 --> 00:04:42,420
好

121
00:04:42,420 --> 00:04:44,519
那我们来看这个程序编译出来以后

122
00:04:44,519 --> 00:04:46,180
运行的结果是什么呢

123
00:04:49,019 --> 00:04:50,540
第一个是100 19

124
00:04:50,540 --> 00:04:52,920
第二个是1万多

125
00:04:54,379 --> 00:04:56,319
大大超出我们的想象

126
00:04:58,480 --> 00:04:59,360
为什么呢

127
00:05:00,800 --> 00:05:03,430
那我们来看看这两行东西

128
00:05:03,430 --> 00:05:06,310
就是这两行东西啊被展开

129
00:05:06,310 --> 00:05:07,629
被红替换以后

130
00:05:07,629 --> 00:05:09,100
它变成什么样子了呢

131
00:05:09,100 --> 00:05:10,279
别理他

132
00:05:10,379 --> 00:05:12,579
然后呢我们tae来看一下

133
00:05:14,500 --> 00:05:18,329
我们可以对照看一下我们的源代码

134
00:05:18,329 --> 00:05:19,339
你看

135
00:05:20,980 --> 00:05:24,939
第一个一那个rider to deg的一

136
00:05:24,939 --> 00:05:27,399
变成了5+2x5

137
00:05:27,399 --> 00:05:29,180
7.29578

138
00:05:29,519 --> 00:05:32,279
那么实际计算的时候是二乘以这个东西

139
00:05:32,279 --> 00:05:33,089
去加五

140
00:05:33,089 --> 00:05:36,040
而不是五和二加起来以后再去乘它了

141
00:05:36,779 --> 00:05:38,720
而第二个东西变成什么了呢

142
00:05:38,720 --> 00:05:40,399
180除以它是吧

143
00:05:40,399 --> 00:05:43,279
结果呢它变成是180÷1

144
00:05:43,279 --> 00:05:45,959
再去乘以这个东西

145
00:05:45,959 --> 00:05:49,079
本来想要的是180÷57

146
00:05:49,079 --> 00:05:49,589
对不对

147
00:05:49,589 --> 00:05:51,839
现在这样就变成180÷1就180

148
00:05:51,839 --> 00:05:53,660
再去乘以57点多

149
00:05:54,300 --> 00:05:55,699
完全意思反了

150
00:05:56,779 --> 00:06:00,060
那这两行错在哪

151
00:06:00,060 --> 00:06:03,319
或者说正确的该怎么写呢

152
00:06:03,439 --> 00:06:06,259
所以当我们在定义这种带参数的宏

153
00:06:06,259 --> 00:06:07,459
的时候啊

154
00:06:07,459 --> 00:06:09,350
有一个非常重要的基本原则

155
00:06:09,350 --> 00:06:11,699
就是一切都要有括号

156
00:06:11,779 --> 00:06:13,399
一切指的是两个

157
00:06:13,399 --> 00:06:17,300
一个是整个红的值要有括号

158
00:06:17,459 --> 00:06:19,350
你整个红的值没有括号

159
00:06:19,350 --> 00:06:21,029
我们刚才180除下来

160
00:06:21,029 --> 00:06:22,800
它就会先拿左边那个去除了

161
00:06:22,800 --> 00:06:26,000
而不是拿你整个算出来的那个结果去除

162
00:06:26,420 --> 00:06:27,439
第二个呢

163
00:06:27,439 --> 00:06:28,699
每一个值

164
00:06:28,699 --> 00:06:31,959
每一个参数的引用都要有括号

165
00:06:31,959 --> 00:06:33,970
每一个用到参数的地方都要有括号

166
00:06:33,970 --> 00:06:35,920
你就记住这两条非常基本的原则

167
00:06:35,920 --> 00:06:37,410
外面有括号里头

168
00:06:37,410 --> 00:06:39,600
所有的用到参数的地方都要有括号

169
00:06:39,600 --> 00:06:40,819
那就可以做对了

170
00:06:41,379 --> 00:06:43,420
所以刚才的那个right to dig

171
00:06:43,420 --> 00:06:44,899
你应该把它写成这个样子

172
00:06:45,279 --> 00:06:48,550
外面有括号里面x有括号

173
00:06:48,550 --> 00:06:51,220
这样才是正确的带参数的宏

174
00:06:52,319 --> 00:06:55,100
这种带参数的宏呢当然也可以有多个参数

175
00:06:55,100 --> 00:06:58,129
比如说这里屏幕上的这个呃mean a b

176
00:06:58,129 --> 00:06:59,839
这是一个非常非常常见的

177
00:06:59,839 --> 00:07:01,610
这个带参数的宏的例子

178
00:07:01,610 --> 00:07:04,990
我们要来算a和b的最小的那个值

179
00:07:04,990 --> 00:07:06,730
于是呢我们就是a大于b吗

180
00:07:06,730 --> 00:07:07,329
那就是b

181
00:07:07,329 --> 00:07:10,649
否则的话呢就是a对吧

182
00:07:10,649 --> 00:07:12,899
然后外围有括号

183
00:07:12,899 --> 00:07:16,319
里头所有的参数也都有括号

184
00:07:17,379 --> 00:07:19,379
当然这个时候我们前面讲红的时候

185
00:07:19,379 --> 00:07:20,040
我们提到过

186
00:07:20,040 --> 00:07:22,560
你也可以再嵌套组合去使用才能红

187
00:07:22,560 --> 00:07:23,639
这都没问题

188
00:07:25,240 --> 00:07:27,839
还有在这种宏定义的时候

189
00:07:27,839 --> 00:07:31,259
最后千万不要加分号

190
00:07:31,259 --> 00:07:32,399
为什么

191
00:07:32,399 --> 00:07:36,100
因为如果你加了分号

192
00:07:36,100 --> 00:07:38,680
然后你在程序里头用它的时候

193
00:07:38,680 --> 00:07:41,920
你像这样用这个pretty print你

194
00:07:41,920 --> 00:07:44,350
你肯定会不由自主加上这个分号的

195
00:07:44,350 --> 00:07:46,279
如果你把这个分号加上去

196
00:07:46,420 --> 00:07:48,459
就变成实际上最后展开以后

197
00:07:48,459 --> 00:07:50,709
在这个地方它会有两个分号

198
00:07:50,709 --> 00:07:53,620
那么第一个分号表示说这一句的结束

199
00:07:53,620 --> 00:07:56,500
而第二个分号就使得这个els

200
00:07:56,500 --> 00:07:57,790
没地方可接了

201
00:07:57,790 --> 00:08:01,060
因为第二个分号表明说这儿有一个空行

202
00:08:01,060 --> 00:08:04,279
那么这个else和if之间就被分开了

203
00:08:04,879 --> 00:08:06,829
所以在定义这种红的时候

204
00:08:06,829 --> 00:08:08,540
绝对千万记住

205
00:08:08,540 --> 00:08:10,879
绝对不能在结尾加上分号

206
00:08:10,879 --> 00:08:12,600
这不是c的语句

207
00:08:13,399 --> 00:08:16,110
一定要非常清楚有这个概念啊

208
00:08:16,110 --> 00:08:19,589
呃很多教科书并没有去把这句话点出来

209
00:08:19,589 --> 00:08:22,529
并没有说井号开头的编预处理指令

210
00:08:22,529 --> 00:08:23,579
不是c语言

211
00:08:23,579 --> 00:08:26,490
没有人没有人敢说这句话啊

212
00:08:26,490 --> 00:08:27,899
但实际上就是这样子

213
00:08:27,899 --> 00:08:29,040
我们这些井号开头的东西

214
00:08:29,040 --> 00:08:30,910
我们可以用在其他语言呃

215
00:08:30,910 --> 00:08:32,679
汇编语言啊等等

216
00:08:32,679 --> 00:08:34,840
都可以去用这些预处理指令的东西

217
00:08:34,840 --> 00:08:36,458
它不是仅仅给c语言用的

218
00:08:37,980 --> 00:08:40,399
这种带参数的宏呢

219
00:08:40,399 --> 00:08:43,279
大家去看这个呃大型的程序啊

220
00:08:43,279 --> 00:08:46,759
这些代码当中使用的非常普遍的呃

221
00:08:47,899 --> 00:08:49,539
可以起到一些很好的作用

222
00:08:49,539 --> 00:08:52,419
比如说当他去呃代替函数的时候呢

223
00:08:52,419 --> 00:08:55,659
它的运行的效率会比函数来的高

224
00:08:55,720 --> 00:08:57,159
当然因为他到处展开

225
00:08:57,159 --> 00:08:58,419
所以呢它的代码的大小

226
00:08:58,419 --> 00:09:00,460
可能会比还调用函数要来的大

227
00:09:00,460 --> 00:09:04,279
但是呢这是牺牲空间来换取效率的

228
00:09:04,460 --> 00:09:07,190
而且这种红可以做的非常非常复杂

229
00:09:07,190 --> 00:09:09,980
呃我们还有两个这种红的运算符

230
00:09:09,980 --> 00:09:10,700
我们不讲了

231
00:09:10,700 --> 00:09:11,600
一个是一个井号预算

232
00:09:11,600 --> 00:09:12,019
两个井号

233
00:09:12,019 --> 00:09:13,899
大家有兴趣可以自己去看资料

234
00:09:13,940 --> 00:09:15,710
在这两个东西的帮助下

235
00:09:15,710 --> 00:09:17,938
甚至可以用它做出

236
00:09:18,100 --> 00:09:22,099
可以产生新的函数的那种东西来

237
00:09:22,179 --> 00:09:24,279
它可以替你产生函数啊

238
00:09:24,279 --> 00:09:26,200
这个可以做的非常的复杂

239
00:09:26,200 --> 00:09:28,899
呃之所以说它存在新华文化差异的

240
00:09:28,899 --> 00:09:30,759
主要是这个中国人

241
00:09:30,759 --> 00:09:33,649
程序员呢比较少会去使用红

242
00:09:33,649 --> 00:09:36,080
但是呢在这个西方人做的大型程序里面

243
00:09:36,080 --> 00:09:37,740
这些东西是非常常见的

244
00:09:37,980 --> 00:09:41,720
这个算不上严重的文化差异哈

245
00:09:41,720 --> 00:09:45,169
可能只是这个习惯不习惯的一个一个问题

246
00:09:45,169 --> 00:09:48,379
但是呢这个宏有一个很大的缺点

247
00:09:48,379 --> 00:09:50,059
就是这种参数

248
00:09:50,059 --> 00:09:51,710
这种红的这个这个展开

249
00:09:51,710 --> 00:09:53,259
这个参数的使用当中呢

250
00:09:53,259 --> 00:09:55,279
它是没有任何类型检查的

251
00:09:55,279 --> 00:09:56,659
你看我们在定义宏的时候

252
00:09:56,659 --> 00:09:58,460
那个参数都没有任何类型对吧

253
00:09:58,460 --> 00:10:00,080
所以我们在使用它的时候

254
00:10:00,080 --> 00:10:01,820
在传递参数给它的时候也没有

255
00:10:01,820 --> 00:10:02,799
也不存在类型

256
00:10:02,799 --> 00:10:05,529
那么如果存在类型使用上的问题

257
00:10:05,529 --> 00:10:07,369
就没有人替你做检查了

258
00:10:07,369 --> 00:10:09,948
那么c语言在后面呢有一个新的机制

259
00:10:09,948 --> 00:10:11,028
叫做in line啊

260
00:10:11,028 --> 00:10:13,609
呃我们这门课就不不讲这个

261
00:10:13,609 --> 00:10:15,230
in line这部分内容了

262
00:10:15,230 --> 00:10:17,179
大家有兴趣可以自己去看资料

263
00:10:17,179 --> 00:10:20,850
in line的机制可以用来取代这种带参数的宏

264
00:10:20,850 --> 00:10:21,269
呃

265
00:10:21,269 --> 00:10:22,379
它是函数

266
00:10:22,379 --> 00:10:25,029
但是呢他又没有函数调用所有的额外开销

267
00:10:25,029 --> 00:10:27,970
他会显得这个他会帮你去做这个

268
00:10:27,970 --> 00:10:29,299
参数类型的检查啊

269
00:10:30,240 --> 00:10:32,840
所以呢逐渐呢也许这些带参数的宏

270
00:10:32,840 --> 00:10:35,859
会被这种呃音量函数给取代掉

271
00:10:37,200 --> 00:10:39,019
当然我们还有很多其他的编译与

272
00:10:39,019 --> 00:10:39,860
处理指令啊

273
00:10:39,860 --> 00:10:41,539
比如说如何做条件编译这件事情呢

274
00:10:41,539 --> 00:10:42,980
我们在讲大程序结构的时候

275
00:10:42,980 --> 00:10:44,409
我们会提一下

276
00:10:44,409 --> 00:10:47,659
还有比如说呃做error啊等等

277
00:10:47,740 --> 00:10:48,940
其实还有很多

278
00:10:48,940 --> 00:10:52,899
这个我们是呃这个课程的这个时间关系哈

279
00:10:52,899 --> 00:10:54,100
我们就不展开去讲

280
00:10:54,100 --> 00:10:55,480
大家有兴趣可以自己去看


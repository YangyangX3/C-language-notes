1
00:00:04,480 --> 00:00:06,280
那么什么是函数呢

2
00:00:06,280 --> 00:00:08,320
我们已经看了两个函数的例子

3
00:00:08,320 --> 00:00:09,910
虽然我们还没有深入去研究

4
00:00:09,910 --> 00:00:12,140
我们说函数呢是一块代码

5
00:00:12,259 --> 00:00:13,519
就是那一部分代码

6
00:00:13,519 --> 00:00:14,929
你看我们是怎么做函数的

7
00:00:14,929 --> 00:00:19,039
就是在原来的程序里头抽出一部分代码

8
00:00:19,039 --> 00:00:19,730
对不对

9
00:00:19,730 --> 00:00:22,100
有一部分代码有一块代码在那

10
00:00:22,100 --> 00:00:22,879
然后呢

11
00:00:22,879 --> 00:00:27,219
这个函数它能够接收零个或者多个参数

12
00:00:27,219 --> 00:00:32,719
你看我们无论是算数数还是取做这个累加

13
00:00:32,719 --> 00:00:34,878
我们都需要给他一些数字

14
00:00:34,878 --> 00:00:36,168
然后呢给他一些值

15
00:00:36,168 --> 00:00:38,779
然后呢他再根据那些值去做一些计算

16
00:00:38,779 --> 00:00:39,359
对不对

17
00:00:39,359 --> 00:00:40,710
他会去做一件事情

18
00:00:40,710 --> 00:00:41,820
去做一些计算

19
00:00:41,820 --> 00:00:42,780
做一些判断

20
00:00:42,780 --> 00:00:43,950
做一些循环等等

21
00:00:43,950 --> 00:00:45,780
然后这个函数结束以后

22
00:00:45,780 --> 00:00:48,719
它会返回零个或者一个值

23
00:00:48,960 --> 00:00:52,229
我们的做计算不发位置

24
00:00:52,229 --> 00:00:55,880
我们的is frame要返回一个值

25
00:00:55,880 --> 00:00:58,759
告诉我们他是不是这个素素啊

26
00:00:58,759 --> 00:01:01,429
然后我们的这个累加呢是不法绘制的

27
00:01:01,429 --> 00:01:04,700
所以这些就是函数大概的样子啊

28
00:01:04,700 --> 00:01:05,629
它是一块代码

29
00:01:05,629 --> 00:01:06,620
它有个名字

30
00:01:06,620 --> 00:01:08,180
他接受零个或者多个参数

31
00:01:08,180 --> 00:01:08,959
它做一件事情

32
00:01:08,959 --> 00:01:10,939
它返回零个或者一个值

33
00:01:11,620 --> 00:01:13,140
我们可以把函数想象成

34
00:01:13,140 --> 00:01:14,759
既然它叫做函数啊

35
00:01:15,019 --> 00:01:16,519
英文也叫function

36
00:01:16,519 --> 00:01:18,260
你可以把它想象成数学中的函数

37
00:01:18,260 --> 00:01:20,180
我们在数学当中知道说y等于f x

38
00:01:20,180 --> 00:01:21,890
那个fx就是一个函数

39
00:01:21,890 --> 00:01:23,180
x是它的自变量

40
00:01:23,180 --> 00:01:24,549
y是他的结果

41
00:01:24,549 --> 00:01:26,228
y得到了它的结果对吧

42
00:01:26,228 --> 00:01:27,899
f是这个函数的名字

43
00:01:28,260 --> 00:01:29,670
有点像这样子

44
00:01:29,670 --> 00:01:30,480
有点像这样子

45
00:01:30,480 --> 00:01:31,799
当然不完全一样

46
00:01:31,799 --> 00:01:33,450
作为编程来说

47
00:01:33,450 --> 00:01:34,829
在程序设计语言当中

48
00:01:34,829 --> 00:01:36,989
函数有它自己的特殊的性质

49
00:01:36,989 --> 00:01:38,719
有它自己特殊的样子啊

50
00:01:39,180 --> 00:01:41,310
我们看到我们在定义一个函数的时候

51
00:01:41,310 --> 00:01:43,829
比如说我们前面做累加的这个函数

52
00:01:43,829 --> 00:01:47,560
那我们的这个su前面有很多东西是吧

53
00:01:47,560 --> 00:01:49,060
这些东西什么是什么呢

54
00:01:51,040 --> 00:01:54,899
这一块啊这一块叫做函数的头

55
00:01:55,760 --> 00:01:58,000
就是头部啊头部

56
00:01:58,079 --> 00:02:02,010
那么在函数头部后面呢是有一对大括号

57
00:02:02,010 --> 00:02:04,950
这一对大括号里面的东西叫做函数题

58
00:02:04,950 --> 00:02:06,920
这对大括号一定要有的

59
00:02:07,140 --> 00:02:09,150
这个不像if语句

60
00:02:09,150 --> 00:02:10,020
while语句说哦

61
00:02:10,020 --> 00:02:10,800
你后面只有一条

62
00:02:10,800 --> 00:02:12,180
我就我就没有大括号不行

63
00:02:12,180 --> 00:02:13,860
函数的大括号是一定要有的

64
00:02:13,860 --> 00:02:16,759
然后大括号里面的语句是这个函数的body

65
00:02:16,759 --> 00:02:17,750
是他的身体

66
00:02:17,750 --> 00:02:19,219
所以我们就叫做函数题

67
00:02:19,399 --> 00:02:21,618
在这个图里头呢又有很多东西哈

68
00:02:21,618 --> 00:02:23,778
这个sum这个呢是函数的名字

69
00:02:23,778 --> 00:02:24,879
叫做函数名

70
00:02:24,879 --> 00:02:28,050
然后函数名前面的这个void

71
00:02:28,050 --> 00:02:29,939
叫做它的返回类型

72
00:02:29,939 --> 00:02:30,870
void是什么类型

73
00:02:30,870 --> 00:02:33,740
我们之前见过我们讲数据类型有int double

74
00:02:33,740 --> 00:02:35,060
float char等很多

75
00:02:35,060 --> 00:02:36,500
但是我们从来没有提到过void

76
00:02:36,500 --> 00:02:40,129
void就是没有void的意思

77
00:02:40,129 --> 00:02:40,610
就是没有

78
00:02:40,610 --> 00:02:41,990
所以void的这个类型

79
00:02:41,990 --> 00:02:45,759
就是说我这个sum函数呢不返回任何东西

80
00:02:45,759 --> 00:02:46,659
没有结果的啊

81
00:02:46,659 --> 00:02:49,620
我不我不给你任何直接返回的东西的

82
00:02:49,919 --> 00:02:52,199
然后我们看到在函数名的后面

83
00:02:52,199 --> 00:02:54,060
有一对圆括号

84
00:02:54,319 --> 00:02:56,210
这对圆括号非常重要

85
00:02:56,210 --> 00:02:58,699
这类圆括号其实某种意义上说

86
00:02:58,699 --> 00:03:01,639
标志着说这个sam是一个函数

87
00:03:01,639 --> 00:03:03,179
因为在语言当中

88
00:03:03,179 --> 00:03:04,979
其实我们还有很多类似的写法

89
00:03:04,979 --> 00:03:06,149
如果没有语言括号

90
00:03:06,149 --> 00:03:08,360
那some可能表示的是个变量

91
00:03:08,360 --> 00:03:10,099
但是有了圆括号以后

92
00:03:10,099 --> 00:03:13,129
就表明说这个圆括号前面的那个sm

93
00:03:13,129 --> 00:03:14,360
它是一个函数

94
00:03:14,360 --> 00:03:16,460
然后在这个圆框里面是什么呢

95
00:03:16,460 --> 00:03:18,539
这个我们叫做参数表

96
00:03:18,859 --> 00:03:22,218
在参数表里面列出来的是一个个的参数啊

97
00:03:22,218 --> 00:03:24,729
我们后面还会再仔细展开来讲这件事情

98
00:03:24,729 --> 00:03:27,430
参数和参数之间用逗号来分割啊

99
00:03:27,430 --> 00:03:29,169
所以这里有两个参数

100
00:03:29,169 --> 00:03:31,060
一个是int类型的begin

101
00:03:31,060 --> 00:03:32,740
另外一个是int类型的

102
00:03:32,740 --> 00:03:33,379
and

103
00:03:33,459 --> 00:03:34,658
在参数表里面

104
00:03:34,658 --> 00:03:39,699
每一个参数都是一个类型和一个名字的

105
00:03:39,699 --> 00:03:40,778
那么一个pair啊

106
00:03:40,778 --> 00:03:42,340
那么一对东西

107
00:03:42,919 --> 00:03:45,520
所以int的begin和int的and

108
00:03:45,520 --> 00:03:46,810
这是它的参数表

109
00:03:46,810 --> 00:03:49,090
表明说这个函数呢有两个参数

110
00:03:49,090 --> 00:03:50,620
第一个参数是int

111
00:03:50,620 --> 00:03:52,219
第二个参数也是int

112
00:03:52,219 --> 00:03:54,620
当我们要去调用那个函数的时候

113
00:03:54,620 --> 00:03:58,189
我们需要给出函数的名字加上圆括号

114
00:03:58,189 --> 00:04:01,840
圆括号里面呢要给出给这个函数的

115
00:04:01,840 --> 00:04:03,610
传递给他的那些参数

116
00:04:03,610 --> 00:04:07,038
这个函数它的参数表里面有几个参数

117
00:04:07,038 --> 00:04:08,808
你就需要传递给它几个参数

118
00:04:08,808 --> 00:04:10,158
它的参数是什么类型的

119
00:04:10,158 --> 00:04:13,360
你就需要传递给他正确的参数类型

120
00:04:13,819 --> 00:04:17,149
所以这个圆括号和在定义函数的时候一样

121
00:04:17,149 --> 00:04:17,779
非常重要

122
00:04:17,779 --> 00:04:20,548
它起到了表示函数调用的重要作用

123
00:04:20,548 --> 00:04:22,499
就算这个函数是没有参数的

124
00:04:22,499 --> 00:04:24,680
你也需要给他圆括号

125
00:04:24,680 --> 00:04:26,089
如果不加上圆括号

126
00:04:26,089 --> 00:04:28,819
c语言不会认为你在调用那个函数

127
00:04:28,819 --> 00:04:30,500
我们可以试一下这件事情

128
00:04:30,560 --> 00:04:33,199
我们做了一个非常简单的函数切啊

129
00:04:33,199 --> 00:04:35,410
这个函数呢它的参数表示空的

130
00:04:35,410 --> 00:04:37,990
表示说现在这个函数呢不接受任何的参数

131
00:04:37,990 --> 00:04:39,240
所以不需要有参数

132
00:04:39,240 --> 00:04:40,500
它的返回类型是void的

133
00:04:40,500 --> 00:04:42,000
所以呢它也不返回任何东西

134
00:04:42,000 --> 00:04:43,680
然后在cher函数里面只做一件事情

135
00:04:43,680 --> 00:04:44,779
就说出一个cheer

136
00:04:44,879 --> 00:04:47,459
然后呢我们在main里头呢

137
00:04:47,459 --> 00:04:48,540
我们去掉了这个cheer

138
00:04:48,540 --> 00:04:50,040
我们要写成这个样子啊

139
00:04:50,040 --> 00:04:51,180
chair这个函数的名字

140
00:04:51,180 --> 00:04:52,230
然后加上语言括号

141
00:04:52,230 --> 00:04:54,269
这个时候呢如果我们来执行它

142
00:04:54,269 --> 00:04:56,089
那我们就会得到cheer这一行

143
00:04:56,089 --> 00:04:59,209
假如说我没有给出圆括号

144
00:04:59,209 --> 00:05:01,759
我们看看编译会得到什么结果呢

145
00:05:02,860 --> 00:05:05,870
编译给我们的是一个warning

146
00:05:05,870 --> 00:05:06,709
小心哦

147
00:05:06,709 --> 00:05:08,240
他不是给我们一个error

148
00:05:08,240 --> 00:05:09,379
他没有说你错了

149
00:05:09,379 --> 00:05:10,639
他给了你一个警告

150
00:05:10,639 --> 00:05:11,490
说什么呢

151
00:05:11,490 --> 00:05:14,730
这个表达式的结果呢没有被使用

152
00:05:14,730 --> 00:05:15,720
什么表达式呢

153
00:05:15,720 --> 00:05:16,319
却

154
00:05:18,439 --> 00:05:21,699
这件事情我们要到什么时候再把它讲透呢

155
00:05:21,699 --> 00:05:23,610
我们要到讲指针

156
00:05:23,610 --> 00:05:25,110
讲函数指针的时候

157
00:05:25,110 --> 00:05:25,889
再来告诉你

158
00:05:25,889 --> 00:05:27,930
这个chair在这里到底是什么意思

159
00:05:27,930 --> 00:05:28,889
但是我们首先可以看

160
00:05:28,889 --> 00:05:30,819
因为这是往你表示说呃

161
00:05:30,819 --> 00:05:31,540
他给了一个警告

162
00:05:31,540 --> 00:05:33,519
但是呢可执行的程序还是产生了

163
00:05:33,519 --> 00:05:34,240
我们来运行一下

164
00:05:34,240 --> 00:05:37,240
看看能不能得到运行结果呢

165
00:05:39,180 --> 00:05:40,750
没有任何输出

166
00:05:40,750 --> 00:05:41,529
我们可以试一下

167
00:05:41,529 --> 00:05:42,550
如果在这个之后

168
00:05:42,550 --> 00:05:45,100
我们以正确的方式去调用切

169
00:05:45,100 --> 00:05:46,329
我们看看它能不能输出

170
00:05:46,329 --> 00:05:48,730
那一次切还是两次缺

171
00:05:48,730 --> 00:05:50,199
他输出了一次缺

172
00:05:50,199 --> 00:05:52,920
这一次却是后面这个缺输出的

173
00:05:52,920 --> 00:05:56,939
而这一个他没有去做函数调用这件事情

174
00:05:58,319 --> 00:06:00,588
这是初学者很容易犯的一个错误

175
00:06:00,588 --> 00:06:01,639
他觉得说哎

176
00:06:01,639 --> 00:06:03,559
我现在这个确反正不要任何的值

177
00:06:03,559 --> 00:06:07,339
那么我就不给圆括号去调用它

178
00:06:07,538 --> 00:06:08,559
c的编译器呢

179
00:06:08,559 --> 00:06:10,838
给的是个warning程序也编译出来了

180
00:06:10,838 --> 00:06:13,899
但是呢其实这个函数并没有被调用啊

181
00:06:13,899 --> 00:06:15,420
这个写法是另外的意思

182
00:06:15,680 --> 00:06:18,290
那如果说是有参数的

183
00:06:18,290 --> 00:06:21,540
那么我们就需要给出正确的数量和顺序

184
00:06:21,920 --> 00:06:24,800
这些值呢会按照顺序依次用来

185
00:06:24,800 --> 00:06:26,180
初始化函数当中的参数

186
00:06:26,180 --> 00:06:28,579
比如说比如说我们要去做some 35

187
00:06:28,579 --> 00:06:29,420
45

188
00:06:30,139 --> 00:06:30,819
35

189
00:06:30,819 --> 00:06:31,658
逗号45

190
00:06:31,658 --> 00:06:33,399
因此我们去调用sum的时候

191
00:06:33,399 --> 00:06:34,939
给了他两个值

192
00:06:34,978 --> 00:06:38,399
这两个值呢就会对应到我们sum函数当中

193
00:06:38,399 --> 00:06:41,369
的begin和end这两个参数

194
00:06:41,369 --> 00:06:44,860
因此我们在实际在做这件some

195
00:06:44,860 --> 00:06:46,720
3545的时候会发生的事情

196
00:06:46,720 --> 00:06:48,850
就是35会被交给begin

197
00:06:48,850 --> 00:06:51,399
而45呢会被交给

198
00:06:51,399 --> 00:06:53,869
and我们来试一下这个代码

199
00:06:53,869 --> 00:06:57,740
现在我们来看这个函数是怎么被执行的啊

200
00:06:58,019 --> 00:07:00,240
在我们这个呃main里头呢

201
00:07:00,240 --> 00:07:02,850
我们会去三次去调用这个some

202
00:07:02,850 --> 00:07:05,939
那每次呢我们会给它不同的值

203
00:07:06,740 --> 00:07:08,680
那么我们在第一次调用的地方呢

204
00:07:08,680 --> 00:07:09,730
我们设一个断点

205
00:07:09,730 --> 00:07:14,139
这个断点我们知道说在运行到这个之前啊

206
00:07:14,139 --> 00:07:15,189
我们会停下来

207
00:07:15,189 --> 00:07:16,899
那么我们来调试一下

208
00:07:19,279 --> 00:07:21,019
现在呢我们停在这儿了啊

209
00:07:21,019 --> 00:07:21,980
停在这

210
00:07:21,980 --> 00:07:23,660
那么在这个之前呢

211
00:07:23,660 --> 00:07:26,660
我们都是用下一步去走到程序的下一步

212
00:07:26,660 --> 00:07:29,279
如果我们现在还是用下一步的话

213
00:07:29,478 --> 00:07:31,369
那么我们就看到说呢

214
00:07:31,369 --> 00:07:33,798
这个函数好像根本就没进去一样

215
00:07:33,798 --> 00:07:35,658
我们直接就到下一行了啊

216
00:07:35,658 --> 00:07:38,358
但实际上呢如果我们检查一下它的输出呢

217
00:07:38,358 --> 00:07:39,500
我们会发现说

218
00:07:41,439 --> 00:07:44,339
它已经输出了一到十的和是55

219
00:07:44,339 --> 00:07:47,879
也就是说这个sum函数第一次的运行

220
00:07:47,879 --> 00:07:49,120
已经做过了

221
00:07:49,899 --> 00:07:51,629
我们的下一步呢

222
00:07:51,629 --> 00:07:56,100
会让他走到这个当前这个呃地方的下面

223
00:07:56,100 --> 00:07:57,408
一行语句去

224
00:07:57,408 --> 00:07:59,028
所以呢它并不会呃

225
00:07:59,028 --> 00:08:01,218
带我们进到这个函数的调用里头

226
00:08:01,218 --> 00:08:02,569
我们想要进去呢

227
00:08:02,569 --> 00:08:05,209
我们要用下面这个按钮单步进入啊

228
00:08:05,209 --> 00:08:07,009
也就是f8 那个快捷键

229
00:08:07,009 --> 00:08:09,158
我们现在来单步进入

230
00:08:09,158 --> 00:08:10,658
现在我们在这个地方

231
00:08:10,658 --> 00:08:13,389
接下去呢我们要去做sam的20 30

232
00:08:13,389 --> 00:08:15,620
我们看我们弹幕进入会是什么结果

233
00:08:16,079 --> 00:08:19,379
现在我们就跳到了sum函数里头了

234
00:08:19,379 --> 00:08:23,639
你看我们的程序从原来刚才在第16行啊

235
00:08:23,639 --> 00:08:25,560
我们做了单步进入以后

236
00:08:25,560 --> 00:08:28,290
程序呢就离开了这个may

237
00:08:28,290 --> 00:08:31,139
就进入到了我们写的这个sum函数里头

238
00:08:31,139 --> 00:08:33,818
并且呢直接到了sum函数的第一句

239
00:08:33,818 --> 00:08:36,519
在这个时候我们可以看一下我们的begin

240
00:08:38,198 --> 00:08:39,859
它的值是20

241
00:08:39,960 --> 00:08:42,570
这个20就是我们在这儿写的这个20

242
00:08:42,570 --> 00:08:45,509
我们把20这个值给了begin

243
00:08:45,509 --> 00:08:47,039
那么e n d是什么呢

244
00:08:47,039 --> 00:08:49,710
30这个30就是我们在这儿的这个值

245
00:08:49,710 --> 00:08:52,610
所以我们以这个方式去调用一个函数

246
00:08:52,610 --> 00:08:56,090
他就会把我们写在这个圆括号里面的

247
00:08:56,090 --> 00:08:57,039
那些值

248
00:08:57,240 --> 00:09:02,230
相应的交给函数的参数表里面的那些参数

249
00:09:02,230 --> 00:09:05,259
然后这两个参数在函数里面起什么作用呢

250
00:09:05,259 --> 00:09:07,068
你看我们下一步的时候

251
00:09:07,068 --> 00:09:08,389
我们要做个for循环

252
00:09:08,389 --> 00:09:09,708
i从begin到end

253
00:09:09,708 --> 00:09:12,370
那么再下一步我们看到i的值

254
00:09:12,370 --> 00:09:14,409
一开始就是20

255
00:09:14,409 --> 00:09:15,639
就是begin的那个值

256
00:09:15,639 --> 00:09:18,820
所以函函数的参数表里面的参数

257
00:09:18,820 --> 00:09:21,620
在函数里头就像变量一样

258
00:09:21,620 --> 00:09:23,899
你可以去直接使用这些参数

259
00:09:23,899 --> 00:09:25,009
可以获得那些值

260
00:09:25,009 --> 00:09:26,179
而这些参数呢

261
00:09:26,179 --> 00:09:28,539
在调用的时候会得到相应的值

262
00:09:28,539 --> 00:09:30,039
好现在我们在一个循环里头

263
00:09:30,039 --> 00:09:32,259
我们不想循环那么多遍啊

264
00:09:32,259 --> 00:09:34,490
我们可以直接在这儿设一个断点

265
00:09:34,490 --> 00:09:36,179
然后让它继续下去

266
00:09:39,419 --> 00:09:42,799
现在呢我们在这个函数的最后一行了

267
00:09:42,799 --> 00:09:45,500
那么接下去我们就应该要离开这个函数

268
00:09:45,500 --> 00:09:46,039
对不对

269
00:09:46,039 --> 00:09:47,859
所以我们看下一步会到哪里

270
00:09:48,360 --> 00:09:49,799
下一步他就到了

271
00:09:49,799 --> 00:09:51,539
我们刚才是在第16行啊

272
00:09:51,539 --> 00:09:52,139
从这里进去的

273
00:09:52,139 --> 00:09:53,879
下一步呢他就到了第17行

274
00:09:53,879 --> 00:09:55,620
现在第17行还没有做

275
00:09:55,620 --> 00:09:57,779
我们可以再单独进去一下

276
00:09:57,779 --> 00:10:00,059
我们又进入到了这个sum函数

277
00:10:00,059 --> 00:10:02,340
现在的begin呢就变成35

278
00:10:02,340 --> 00:10:03,870
而and变成45了

279
00:10:03,870 --> 00:10:07,519
这是我们在这里给他的这两个值

280
00:10:07,519 --> 00:10:08,690
35和45

281
00:10:08,690 --> 00:10:12,019
现在它的begin和end变成35和45了

282
00:10:12,019 --> 00:10:16,789
然后他要来做35和45的那个求和

283
00:10:16,789 --> 00:10:17,929
完了以后

284
00:10:17,929 --> 00:10:18,740
最后

285
00:10:22,779 --> 00:10:24,429
当他要回来的时候

286
00:10:24,429 --> 00:10:27,039
他会回到这个sm的下一行

287
00:10:27,039 --> 00:10:28,690
也就是这个return这里

288
00:10:28,690 --> 00:10:33,860
所以我们看到这些值会按照顺序依次的

289
00:10:33,860 --> 00:10:37,379
用来初始化参数表当中的这些参数啊

290
00:10:37,799 --> 00:10:39,419
然后我们的这两个值

291
00:10:39,419 --> 00:10:42,120
35和45就会被传递到sum里头去

292
00:10:42,120 --> 00:10:43,980
那么sam的这一次的运行

293
00:10:43,980 --> 00:10:46,220
就会用35和45来给我们做计算

294
00:10:46,220 --> 00:10:48,320
上一次的运行会用20和30

295
00:10:48,320 --> 00:10:49,458
来给我们做计算

296
00:10:50,840 --> 00:10:54,698
而且函数是知道每一次是哪里调用

297
00:10:54,698 --> 00:10:56,678
它会返回到正确的地方

298
00:10:56,678 --> 00:10:57,999
第一次做sam的时候

299
00:10:57,999 --> 00:11:00,059
他会回到第二个sum那里

300
00:11:00,059 --> 00:11:00,899
第二次做sam

301
00:11:00,899 --> 00:11:02,159
他回到第三个sam内

302
00:11:02,159 --> 00:11:03,840
而第三次做sam的时候

303
00:11:03,840 --> 00:11:06,198
他就会给我们回到return那里

304
00:11:07,240 --> 00:11:09,090
函数有手段

305
00:11:09,090 --> 00:11:11,700
他能够知道是从哪里调用它

306
00:11:11,700 --> 00:11:14,860
然后会回到调用它的下面那个地方去


1
00:00:04,280 --> 00:00:05,179
我们再来看这个函数

2
00:00:05,179 --> 00:00:09,759
叫做s t r c a t c a t的意思是好吧

3
00:00:09,759 --> 00:00:11,740
不是那个猫的city哈

4
00:00:11,740 --> 00:00:12,880
它后面还有一些字母的

5
00:00:12,880 --> 00:00:14,380
它意思是做连接

6
00:00:14,458 --> 00:00:17,399
所以这个c函数呢是把s2 

7
00:00:17,399 --> 00:00:19,618
拷贝到s一的后面去

8
00:00:19,618 --> 00:00:21,699
接成一个长的字符串

9
00:00:22,559 --> 00:00:25,280
我们看看实际上他做的心是这样的

10
00:00:25,280 --> 00:00:29,780
如果呢我现在说s r c里头呢有些东西

11
00:00:29,780 --> 00:00:32,320
比如说叫做w r l d

12
00:00:32,939 --> 00:00:37,130
然后呢我的dc里面呢已经有一些东西了

13
00:00:37,130 --> 00:00:39,058
比如说叫做hello

14
00:00:40,100 --> 00:00:42,549
当然最后是个反斜杠铃

15
00:00:42,549 --> 00:00:44,079
当然d s t一定

16
00:00:44,079 --> 00:00:46,649
这个数组本身还有一些空间

17
00:00:46,649 --> 00:00:48,390
还能够容纳一些地方

18
00:00:48,390 --> 00:00:48,990
然后呢

19
00:00:48,990 --> 00:00:49,829
我们要做的事情

20
00:00:49,829 --> 00:00:53,329
无非是把这个w写到零这里来

21
00:00:53,329 --> 00:00:56,119
把这个o写到他后面那个地方去

22
00:00:56,119 --> 00:00:57,289
所以这是w了

23
00:00:57,289 --> 00:01:00,840
这是o r l d e

24
00:01:00,840 --> 00:01:02,918
然后最后当然还得填上这个零

25
00:01:02,979 --> 00:01:05,019
这叫做连接

26
00:01:05,019 --> 00:01:08,728
换句话说其实连接还是一种拷贝

27
00:01:08,728 --> 00:01:09,418
对不对

28
00:01:09,418 --> 00:01:12,629
只不过拷贝呢不是从d s t的零开始

29
00:01:12,629 --> 00:01:14,429
不是从d s t的零

30
00:01:14,429 --> 00:01:15,808
而是从什么地方开始呢

31
00:01:15,808 --> 00:01:21,900
是从d s t的s e r l e的d s t再减

32
00:01:23,040 --> 00:01:23,959
要不要减一

33
00:01:24,780 --> 00:01:28,739
这是012345

34
00:01:28,900 --> 00:01:31,239
他的l e n s t l e就是零

35
00:01:31,239 --> 00:01:33,340
就是12345

36
00:01:33,340 --> 00:01:34,359
所以不减一

37
00:01:34,359 --> 00:01:36,239
就是从这个位置开始

38
00:01:37,900 --> 00:01:40,500
等于那个src的零

39
00:01:42,599 --> 00:01:47,920
o所以如果要我们自己写c要怎么写

40
00:01:47,920 --> 00:01:53,500
其实在我们刚才看的cpy和c d函数

41
00:01:53,500 --> 00:01:55,730
都是存在危险的函数

42
00:01:55,730 --> 00:01:57,349
他都可能出现安全问题

43
00:01:57,349 --> 00:01:59,989
这个安全问题就是如果那个d s t

44
00:01:59,989 --> 00:02:02,569
如果你要拷贝或者要连接的那个地方

45
00:02:02,569 --> 00:02:06,118
没有足够的空间会怎么样

46
00:02:06,459 --> 00:02:07,840
我们自己写过那个代码

47
00:02:07,840 --> 00:02:09,400
就知道我们那个代码里面

48
00:02:09,400 --> 00:02:11,319
因为你没有任何办法知道

49
00:02:11,319 --> 00:02:13,240
那个d s t的空间是多少

50
00:02:13,240 --> 00:02:15,689
所以我们是盲目的往里面填东西的

51
00:02:15,689 --> 00:02:17,199
越界了也不知道

52
00:02:17,659 --> 00:02:18,680
写到别人那儿去

53
00:02:18,680 --> 00:02:19,490
也不知道

54
00:02:19,490 --> 00:02:22,460
所以这两个函数是不安全的

55
00:02:22,460 --> 00:02:27,519
我给大家的建议是尽可能的不要去使用它

56
00:02:27,519 --> 00:02:32,780
那用什么我们有安全的版本

57
00:02:32,780 --> 00:02:34,490
这个安全的版本很有意思

58
00:02:34,490 --> 00:02:36,560
在中间多了一个n

59
00:02:36,759 --> 00:02:38,770
在中间多了一个n

60
00:02:38,770 --> 00:02:40,719
在参数表里面多了一个

61
00:02:40,719 --> 00:02:42,490
参数表里面多了一个n

62
00:02:42,490 --> 00:02:44,289
这个n的意思是说

63
00:02:44,289 --> 00:02:45,400
对于拷贝来说

64
00:02:45,400 --> 00:02:49,539
你能够考过去最多多少个字符

65
00:02:50,938 --> 00:02:52,429
对于c来说

66
00:02:52,429 --> 00:02:55,900
你能够c e t连上多少字符

67
00:02:57,879 --> 00:03:01,039
也就是说我们可以通过这个方式

68
00:03:01,039 --> 00:03:03,830
告诉这两个安全版本的函数

69
00:03:03,830 --> 00:03:07,039
你最多只能考过去这么多东西

70
00:03:07,039 --> 00:03:09,800
如果多了怎么办掐掉

71
00:03:09,800 --> 00:03:11,840
因此它是安全的

72
00:03:11,840 --> 00:03:12,979
不会越界

73
00:03:13,998 --> 00:03:16,998
那对于c n p比较

74
00:03:16,998 --> 00:03:18,799
我们也有一个带n的版本

75
00:03:18,799 --> 00:03:20,838
不过这个戴安的版本的作用呢

76
00:03:20,838 --> 00:03:23,599
并不是说呃为了安全

77
00:03:23,879 --> 00:03:26,400
它的作用是说有的时候我们想做这样的事

78
00:03:26,400 --> 00:03:26,580
情

79
00:03:26,580 --> 00:03:28,860
比如说我们想判断一个字符串

80
00:03:28,860 --> 00:03:31,439
开头三个字母是不是a b c

81
00:03:31,439 --> 00:03:33,240
我不需要比较后面的东西

82
00:03:33,240 --> 00:03:34,439
他可能a b c后面还有d e f

83
00:03:34,439 --> 00:03:35,310
我不在乎

84
00:03:35,310 --> 00:03:38,069
我只要看前三个是不是a b c

85
00:03:38,069 --> 00:03:39,649
我们就可以用这个方式

86
00:03:39,649 --> 00:03:40,938
我们在这儿写上三

87
00:03:40,938 --> 00:03:43,580
我们就只让他判断前三个


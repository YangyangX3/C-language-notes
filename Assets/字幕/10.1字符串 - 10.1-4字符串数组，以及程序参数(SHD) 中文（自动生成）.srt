1
00:00:04,360 --> 00:00:05,860
还有一个小细节的问题

2
00:00:05,860 --> 00:00:08,179
就是字符串数组

3
00:00:08,179 --> 00:00:13,820
如果你想写一个数组去表达很多个字符串

4
00:00:13,820 --> 00:00:15,359
你该怎么写呢

5
00:00:15,599 --> 00:00:17,519
恰星星a是什么意思

6
00:00:19,379 --> 00:00:22,199
恰星星a的意思是说a是一个指针

7
00:00:22,660 --> 00:00:25,149
这个指针指向另一个指针

8
00:00:25,149 --> 00:00:29,460
而那个指针指向一个字符或者一个字符串

9
00:00:30,440 --> 00:00:32,799
所以它不是我们要的字符串数组

10
00:00:33,479 --> 00:00:34,700
tra方括号

11
00:00:34,700 --> 00:00:35,000
方括号

12
00:00:35,000 --> 00:00:36,109
这是什么呢

13
00:00:36,109 --> 00:00:38,899
这个东西的意思是说没错

14
00:00:38,899 --> 00:00:42,679
a是一个二维数组的这个变量

15
00:00:42,679 --> 00:00:45,740
可是呢在二维数组定义当中

16
00:00:45,740 --> 00:00:47,418
我们在数组那儿讲过

17
00:00:47,439 --> 00:00:51,700
第二位一定是要有确切的大小的

18
00:00:51,700 --> 00:00:52,479
否则编译通

19
00:00:52,479 --> 00:00:54,009
不过我们可以试一下这个事情

20
00:00:54,009 --> 00:00:55,659
如果我们写出这样的代码

21
00:00:55,659 --> 00:00:57,310
我们的编译的结果会说

22
00:00:57,310 --> 00:01:02,990
这个数组呢没有这个啊完备的这个类型啊

23
00:01:02,990 --> 00:01:04,730
实际上呢他希望的是

24
00:01:04,730 --> 00:01:07,259
你在这儿要给出一个具体的值

25
00:01:07,260 --> 00:01:08,909
这样编译才能过

26
00:01:08,909 --> 00:01:10,439
可是这样写是什么意思呢

27
00:01:10,439 --> 00:01:12,579
是说a是一个数组

28
00:01:12,659 --> 00:01:15,239
a这个数组里面的每一个单元

29
00:01:15,239 --> 00:01:16,349
是一个什么呢

30
00:01:16,349 --> 00:01:19,679
是一个tra 10

31
00:01:20,140 --> 00:01:25,459
也就是说a0 相当于一个trash

32
00:01:26,840 --> 00:01:28,569
用这种方式写的时候

33
00:01:28,569 --> 00:01:32,418
你需要确定每一个这当中

34
00:01:32,418 --> 00:01:34,549
每一个字符的字符串的长度

35
00:01:34,549 --> 00:01:36,579
所以如果你后面有个word

36
00:01:36,819 --> 00:01:38,019
当然这没有关系

37
00:01:38,019 --> 00:01:42,609
可是如果你后面会出现比较长的东西

38
00:01:42,609 --> 00:01:43,959
就会有问题

39
00:01:43,959 --> 00:01:46,000
如果我们写出这样的代码来

40
00:01:48,400 --> 00:01:49,890
我们的编译器比较厉害

41
00:01:49,890 --> 00:01:52,560
他发现说这个东西太长了

42
00:01:52,560 --> 00:01:55,140
这个字符串超过我们说的这个十了

43
00:01:57,079 --> 00:01:58,659
我们还有另外一种写法

44
00:01:58,659 --> 00:01:59,620
是这样的

45
00:01:59,620 --> 00:02:01,060
我们把这个拿掉

46
00:02:01,060 --> 00:02:02,640
在这儿加个型号

47
00:02:04,560 --> 00:02:06,920
这个是可以的

48
00:02:07,879 --> 00:02:09,219
有了这个之后

49
00:02:09,219 --> 00:02:10,300
a0 是什么

50
00:02:10,300 --> 00:02:15,780
其实a0 相当于差行

51
00:02:17,419 --> 00:02:19,659
所以这种字符串到底是什么意思呢

52
00:02:19,659 --> 00:02:21,849
这种数字符串数组到底什么意思呢

53
00:02:21,849 --> 00:02:25,960
对于那种tra

54
00:02:26,998 --> 00:02:28,459
十这样的东西来说

55
00:02:28,459 --> 00:02:33,558
他的意思是说我有一个很大的矩形

56
00:02:34,579 --> 00:02:37,719
我的每一个这是a0 

57
00:02:38,639 --> 00:02:40,219
他有十个字符

58
00:02:40,219 --> 00:02:41,150
这是a1 

59
00:02:41,150 --> 00:02:42,719
它也有十个字符

60
00:02:42,799 --> 00:02:45,438
当然实际在里面放了可能没用完

61
00:02:45,438 --> 00:02:46,758
比如说这是word

62
00:02:46,758 --> 00:02:48,378
然后他到这儿为止了

63
00:02:48,378 --> 00:02:49,539
这是hello

64
00:02:49,579 --> 00:02:50,778
他到这儿为止了

65
00:02:50,778 --> 00:02:51,618
这是礼仪

66
00:02:51,618 --> 00:02:52,879
它到这儿为止了

67
00:02:53,500 --> 00:02:58,280
而另外一种形式是说我是char c a

68
00:02:58,500 --> 00:03:00,180
那他的意思是说呢

69
00:03:00,180 --> 00:03:02,840
它的每一个都比较小

70
00:03:04,319 --> 00:03:05,580
这是a0 

71
00:03:06,218 --> 00:03:07,438
这时候a0 是什么呢

72
00:03:07,438 --> 00:03:08,218
a0 是个指针

73
00:03:08,218 --> 00:03:10,408
它指向外面某处

74
00:03:10,408 --> 00:03:13,719
有一个比如说写着hello的那么一个东西

75
00:03:14,019 --> 00:03:16,179
a一指向外面某处

76
00:03:16,179 --> 00:03:18,968
另外有个地方写着word那么一个东西

77
00:03:18,968 --> 00:03:21,038
然后剩下还有什么

78
00:03:21,038 --> 00:03:23,039
比如说写着里的那么一个东西

79
00:03:24,058 --> 00:03:26,919
这两种形式是不一样的

80
00:03:28,240 --> 00:03:29,669
他们是不相等的

81
00:03:29,669 --> 00:03:31,199
所以看完字符串数组

82
00:03:31,199 --> 00:03:35,430
你还记不记得我们曾经在讲到switch case的时候

83
00:03:35,430 --> 00:03:36,719
我们看过这样一个例子

84
00:03:36,719 --> 00:03:37,419
代码

85
00:03:37,838 --> 00:03:41,079
我们要根据输入的那个月份的数字

86
00:03:41,079 --> 00:03:43,960
来输出相应的代表月份的英文单词

87
00:03:43,960 --> 00:03:45,729
我们当时用switch case做的

88
00:03:45,729 --> 00:03:46,840
我们当时留了一句话

89
00:03:46,840 --> 00:03:49,340
说今后可以用数组来做

90
00:03:49,379 --> 00:03:52,860
你想想现在我们学了字符串数组

91
00:03:52,860 --> 00:03:56,879
怎么用字符串数组来做出这样的来代替

92
00:03:56,879 --> 00:03:58,199
这样的switch case

93
00:03:58,599 --> 00:04:01,300
我们需要有一个数组

94
00:04:01,319 --> 00:04:05,159
它的每一个单元是一个字符串

95
00:04:05,159 --> 00:04:08,979
它的下标代表了这里的月份的数字

96
00:04:09,500 --> 00:04:10,819
我们试试看

97
00:04:10,819 --> 00:04:13,000
在讨论区把它给做出来

98
00:04:14,039 --> 00:04:14,719
其实啊

99
00:04:14,719 --> 00:04:16,459
这个字符串数组

100
00:04:16,459 --> 00:04:19,129
还有一个有意思的应用的地方啊

101
00:04:19,129 --> 00:04:21,259
就是这个main函数的参数

102
00:04:21,500 --> 00:04:23,480
我们之前的最开始的时候

103
00:04:23,480 --> 00:04:26,040
我们说啊那边函数圆括号里都是空的了

104
00:04:26,060 --> 00:04:27,500
后来呢讲到函数的时候

105
00:04:27,500 --> 00:04:28,040
我们说啊

106
00:04:28,040 --> 00:04:30,560
另外函数呢原框里面你不妨放个boy的

107
00:04:30,560 --> 00:04:32,600
或者说你最好放个boy啊

108
00:04:32,600 --> 00:04:33,449
没参数嘛

109
00:04:33,449 --> 00:04:35,189
然后现在我们要告诉你说

110
00:04:35,189 --> 00:04:39,759
其实呢那个幂函数的参数表呢不是空的

111
00:04:39,759 --> 00:04:40,959
是有东西的

112
00:04:40,959 --> 00:04:42,220
是有两个参数

113
00:04:42,220 --> 00:04:43,360
一个是一个整数

114
00:04:43,360 --> 00:04:47,300
第二个呢是个字符串数组

115
00:04:47,658 --> 00:04:48,978
为什么要有个整数呢

116
00:04:48,978 --> 00:04:50,649
这个整数是告诉我们说

117
00:04:50,649 --> 00:04:53,410
后面那个数组到底有多少个字符串的对吧

118
00:04:53,410 --> 00:04:55,209
我们知道c语言的字符串啊

119
00:04:55,209 --> 00:04:56,170
c语言的数组啊

120
00:04:56,170 --> 00:04:58,149
没法自己告诉你这个数字有多大

121
00:04:58,149 --> 00:05:00,579
所以我们必须有另外一个变量告诉我们说

122
00:05:00,579 --> 00:05:03,100
另外一个参数来告诉我们说这东西有多大

123
00:05:03,100 --> 00:05:06,279
然后这些字符串这个这是一个数组对吧

124
00:05:06,279 --> 00:05:07,889
这些字符串是什么呢

125
00:05:07,889 --> 00:05:09,810
我们来写一个程序来试一下

126
00:05:09,810 --> 00:05:10,230
非常简单

127
00:05:10,230 --> 00:05:13,959
我们就让他输出所有的这个数组里面

128
00:05:13,959 --> 00:05:14,740
所有的字符串

129
00:05:14,740 --> 00:05:16,980
我们就可以看到它到底是什么啊

130
00:05:16,980 --> 00:05:17,939
我们程序非常简单

131
00:05:17,939 --> 00:05:19,319
我们就做个循环for循环

132
00:05:19,319 --> 00:05:20,579
我们遍历一下这个数组

133
00:05:20,579 --> 00:05:22,170
你说你有a r g c个嘛

134
00:05:22,170 --> 00:05:23,579
那我们从零开始对吧

135
00:05:23,579 --> 00:05:26,939
然后呢我们输出每一个说第零个是什么

136
00:05:26,939 --> 00:05:28,228
第一个是什么

137
00:05:28,228 --> 00:05:30,158
然后我们来试一下这个程序

138
00:05:30,158 --> 00:05:32,720
我们先简单的就只是运行它

139
00:05:32,879 --> 00:05:35,939
我们看到他说他只有一个对吧

140
00:05:35,939 --> 00:05:38,699
第二个呢就是我们刚才说的那个命令

141
00:05:38,699 --> 00:05:40,079
a a.out

142
00:05:40,079 --> 00:05:42,139
当前目录下的a.out

143
00:05:42,218 --> 00:05:44,559
如果我们执行的时候带点东西

144
00:05:44,559 --> 00:05:45,379
123

145
00:05:45,759 --> 00:05:47,199
他会说现在有两个了

146
00:05:47,199 --> 00:05:49,060
第一个呢还是那个a.out

147
00:05:49,060 --> 00:05:51,158
第二个呢就是你的那个123

148
00:05:51,158 --> 00:05:53,709
在你执行这个程序的时候

149
00:05:53,709 --> 00:05:56,528
你可以在它的后面跟上点东西

150
00:05:56,528 --> 00:05:57,850
跟上点东西

151
00:05:57,850 --> 00:06:01,269
这些东西就会被我们的a r g c

152
00:06:01,269 --> 00:06:03,250
a r g v所读到

153
00:06:03,250 --> 00:06:04,420
我们的main函数

154
00:06:04,420 --> 00:06:06,889
可以读到你执行这个程序的时候

155
00:06:06,889 --> 00:06:07,970
在命令行的

156
00:06:07,970 --> 00:06:10,699
在他的这个名字的后面所跟上的东西

157
00:06:10,699 --> 00:06:13,670
而它的第一个参数a r g b的零

158
00:06:13,670 --> 00:06:15,470
就是你执行的时候

159
00:06:15,470 --> 00:06:17,860
所输入的那个命令的名字

160
00:06:18,759 --> 00:06:21,959
或者说你输入的那个可执行程序的名字

161
00:06:22,060 --> 00:06:24,699
为什么他还要告诉你可执行程序呢

162
00:06:24,699 --> 00:06:26,199
我反正我编译出来就是这个吗

163
00:06:26,199 --> 00:06:26,959
为什么

164
00:06:27,038 --> 00:06:30,069
因为在unix我们还有更复杂的东西

165
00:06:30,069 --> 00:06:33,788
比如说我们可以说我们认为呢

166
00:06:33,788 --> 00:06:39,189
我们把a.out呢叫做m这个事情做完以后

167
00:06:39,189 --> 00:06:40,720
如果我们去看mi

168
00:06:40,720 --> 00:06:43,180
在unix他说mi是一个符号链接

169
00:06:43,180 --> 00:06:45,329
这个链接指向的是a.out

170
00:06:45,329 --> 00:06:47,279
现在如果我们执行my

171
00:06:49,139 --> 00:06:51,798
他就会告诉我们说你是执行的my

172
00:06:51,798 --> 00:06:54,079
而不是执行的a.out

173
00:06:54,339 --> 00:06:57,279
因此我们需要在程序里面能够知道

174
00:06:57,279 --> 00:07:00,459
究竟你是怎么来运行我这个程序的啊

175
00:07:00,459 --> 00:07:03,399
你通过哪一种方式直接运行这个程序

176
00:07:03,399 --> 00:07:04,939
还是通过某个链接等等

177
00:07:05,158 --> 00:07:08,060
然后也许我可以做些其他的事情

178
00:07:09,300 --> 00:07:11,480
我们这个课里头我不能说太多

179
00:07:11,480 --> 00:07:14,300
我建议大家去搜一下buy box

180
00:07:14,740 --> 00:07:16,600
看看别的box是怎么做的

181
00:07:16,600 --> 00:07:18,639
你就会理解这种事情

182
00:07:18,639 --> 00:07:20,829
为什么在unix会这么有用

183
00:07:20,829 --> 00:07:22,569
在windows它是不是没有用的

184
00:07:22,569 --> 00:07:25,990
当然在windows很少有人说我我要运行一个程序

185
00:07:25,990 --> 00:07:29,350
是在命令行敲入那个程序的名字来运行的

186
00:07:29,350 --> 00:07:32,180
可是如果你做一个快捷方式

187
00:07:32,180 --> 00:07:35,360
你在快捷方式里面也可以指定给这个

188
00:07:35,360 --> 00:07:36,829
可执行程序的那些参数

189
00:07:36,829 --> 00:07:38,759
于是它也是有意义的


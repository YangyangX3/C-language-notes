1
00:00:04,299 --> 00:00:06,250
看了这么多基础的运算啊

2
00:00:06,250 --> 00:00:11,900
安慰的与安慰的或取反一位有什么用

3
00:00:12,359 --> 00:00:13,679
有有有什么

4
00:00:13,679 --> 00:00:16,199
我们在现在的这个知识基础上

5
00:00:16,199 --> 00:00:17,399
可以理解这些东西啊

6
00:00:17,399 --> 00:00:19,658
因为确实就是这些运算

7
00:00:19,658 --> 00:00:20,978
都是用来做底层程序

8
00:00:20,978 --> 00:00:22,589
用来操纵硬件的时候用的

9
00:00:22,589 --> 00:00:24,390
我们看看看两个小例子

10
00:00:24,390 --> 00:00:27,640
一个例子我们要输出一个数的二进制

11
00:00:27,800 --> 00:00:29,960
我们知道怎么去输出一个数的十进

12
00:00:29,960 --> 00:00:30,920
16进制是吧

13
00:00:30,920 --> 00:00:33,079
呃百分和x就输出16进制了

14
00:00:33,079 --> 00:00:34,579
百分o输出八进制了

15
00:00:34,579 --> 00:00:36,710
输出二进制呢没有现成的

16
00:00:36,710 --> 00:00:38,450
所以我们可以写这样一个程序哈

17
00:00:38,450 --> 00:00:39,170
这个程序很有意思

18
00:00:39,170 --> 00:00:39,590
它是这样的

19
00:00:39,590 --> 00:00:44,320
你看我们的读入一个整数啊

20
00:00:44,320 --> 00:00:45,189
这是个int

21
00:00:45,189 --> 00:00:48,100
然后我们做了一个unsigned int的东西

22
00:00:48,100 --> 00:00:49,018
叫做mask

23
00:00:49,840 --> 00:00:52,590
当unsigned和变量名称之间

24
00:00:52,590 --> 00:00:53,759
省略一个int的时候

25
00:00:53,759 --> 00:00:56,109
编译技能理解你在做on sigint啊

26
00:00:56,109 --> 00:00:58,990
我们让它等于eu左移31

27
00:00:58,990 --> 00:00:59,799
这是什么意思

28
00:00:59,799 --> 00:01:00,820
一是什么

29
00:01:00,820 --> 00:01:02,350
一就是一了

30
00:01:02,350 --> 00:01:05,259
就是只有最低位为一的那个数对吧

31
00:01:05,439 --> 00:01:08,019
you呢表示说这是一个unsigned的书

32
00:01:08,019 --> 00:01:09,879
然后我们把它往左移31

33
00:01:09,879 --> 00:01:12,760
跪31个比特啊

34
00:01:12,760 --> 00:01:13,959
往左移三是一个比特

35
00:01:13,959 --> 00:01:15,760
所以往左一三是一个比特

36
00:01:15,760 --> 00:01:18,400
其实他就是那个0x800000 

37
00:01:18,400 --> 00:01:19,750
那个东西对吧

38
00:01:19,750 --> 00:01:21,549
就最高位为一的那个东西啊

39
00:01:21,549 --> 00:01:24,010
然后我们做了个for循环

40
00:01:24,010 --> 00:01:25,599
初始就不用做了

41
00:01:25,599 --> 00:01:28,840
条件是mask循环的每一轮

42
00:01:28,840 --> 00:01:31,390
这个mask要往右移一位

43
00:01:31,390 --> 00:01:32,799
这个mask是on散的

44
00:01:32,799 --> 00:01:33,700
所以往右移的时候

45
00:01:33,700 --> 00:01:36,179
那个高位的一不会被保持的

46
00:01:36,280 --> 00:01:37,239
会移过去的

47
00:01:37,239 --> 00:01:39,579
所以每次往右移一位

48
00:01:39,599 --> 00:01:40,140
好吧

49
00:01:40,140 --> 00:01:41,250
这事儿其实是什么呢

50
00:01:41,250 --> 00:01:45,480
我们一开始是1000万

51
00:01:45,480 --> 00:01:46,319
当然后面还有很多零

52
00:01:46,319 --> 00:01:48,459
我们省略了循环

53
00:01:48,459 --> 00:01:49,480
第一轮是这样的循环

54
00:01:49,480 --> 00:01:52,359
第二轮呢它就变成01000000

55
00:01:52,359 --> 00:01:55,980
第三轮呢变成00100000

56
00:01:55,980 --> 00:01:58,200
换句话说他始终只有一个一

57
00:01:58,200 --> 00:02:01,459
然后这个一呢再从左到右这么移过去

58
00:02:01,459 --> 00:02:03,799
当32个比特都走完以后

59
00:02:03,799 --> 00:02:05,030
它就会变成全零了

60
00:02:05,030 --> 00:02:06,519
那时候循环就结束了

61
00:02:06,519 --> 00:02:08,050
那么在循环的每一轮呢

62
00:02:08,050 --> 00:02:10,599
我们拿那个数字和这个mask

63
00:02:10,599 --> 00:02:12,759
去取一下鱼曲线

64
00:02:12,759 --> 00:02:13,759
于以后

65
00:02:14,199 --> 00:02:16,810
如果结果还是大于零的

66
00:02:16,810 --> 00:02:18,819
那么我们就输出个一

67
00:02:18,819 --> 00:02:20,289
否则输出个零

68
00:02:20,289 --> 00:02:21,360
什么意思呢

69
00:02:24,520 --> 00:02:26,819
假如我们现在正好在这个位置上面

70
00:02:26,819 --> 00:02:31,379
我们那个number呢是11010010

71
00:02:31,379 --> 00:02:33,210
这个东西取于以后

72
00:02:33,210 --> 00:02:35,580
就相当于别的v我都不看了

73
00:02:35,580 --> 00:02:37,860
我就看这个一所在的这个比特

74
00:02:37,860 --> 00:02:38,810
你是零还是一

75
00:02:38,810 --> 00:02:39,710
你如果是零

76
00:02:39,710 --> 00:02:41,569
那么整个结果就是零

77
00:02:41,569 --> 00:02:42,169
对不对

78
00:02:42,169 --> 00:02:43,430
你如果这个比特是一

79
00:02:43,430 --> 00:02:45,650
比如说我这个数字是number是1111的

80
00:02:45,650 --> 00:02:47,159
那么这一位就是一

81
00:02:47,159 --> 00:02:48,479
但这一位是一

82
00:02:48,479 --> 00:02:49,319
这个比特是一

83
00:02:49,319 --> 00:02:51,000
对应于这个数字到底是多少

84
00:02:51,000 --> 00:02:51,780
我现在不care

85
00:02:51,780 --> 00:02:52,680
我们不关心他

86
00:02:52,680 --> 00:02:55,069
反正他不是零了

87
00:02:55,069 --> 00:02:55,909
不是零

88
00:02:55,909 --> 00:02:58,439
ok那我们就在那一位上输出个一

89
00:02:59,438 --> 00:03:01,618
所以这为什么叫做mask

90
00:03:01,618 --> 00:03:06,539
这个东西就是用来逐一的去看你这个number的

91
00:03:06,539 --> 00:03:09,659
每一个比特是零还是一的那个比特是一

92
00:03:09,659 --> 00:03:10,620
我就输出一

93
00:03:10,620 --> 00:03:11,789
那个比特是零

94
00:03:11,789 --> 00:03:13,159
我就输出零

95
00:03:13,838 --> 00:03:16,109
最后就能够输出对应二进制的东西

96
00:03:16,109 --> 00:03:17,549
我们来试一下这个程序

97
00:03:17,549 --> 00:03:19,498
我们让number啊

98
00:03:19,498 --> 00:03:22,099
比如说嗯我们想要个12345

99
00:03:22,439 --> 00:03:25,199
我们先看看12345变成二进制

100
00:03:25,199 --> 00:03:26,500
是什么样子是吧

101
00:03:27,778 --> 00:03:30,438
这是它变成二进制的样子啊

102
00:03:30,438 --> 00:03:32,419
这123451下子接受不了

103
00:03:32,419 --> 00:03:39,319
我们来看0x a a a a a a a a是啥

104
00:03:40,278 --> 00:03:43,300
就是间隔的1010101010

105
00:03:43,300 --> 00:03:45,520
然后我们再来试这个零

106
00:03:45,520 --> 00:03:48,430
x55555555 啊

107
00:03:48,430 --> 00:03:49,150
八个五

108
00:03:49,150 --> 00:03:50,080
这是啥呢

109
00:03:50,080 --> 00:03:51,680
0101010

110
00:03:52,099 --> 00:03:53,900
所以这个程序就很有意思

111
00:03:53,900 --> 00:03:56,419
可以帮我们看到这些二进制的这个数的

112
00:03:56,419 --> 00:03:58,180
二进制对应的是什么啊

113
00:03:58,219 --> 00:03:59,419
还有一件事情呢

114
00:03:59,419 --> 00:04:02,680
就是当我们在做单片机的程序的时候

115
00:04:02,680 --> 00:04:04,000
我们经常会遇到这样的事情

116
00:04:04,000 --> 00:04:06,039
就是那个器件手册里头呢

117
00:04:06,039 --> 00:04:07,000
告诉你说

118
00:04:07,000 --> 00:04:11,319
哎我有某个这个s f r特殊功能寄存器呃

119
00:04:11,859 --> 00:04:13,538
他可能给你这样一张表啊

120
00:04:13,538 --> 00:04:16,329
他说这个特殊功能寄存器里面呢这个比特

121
00:04:16,329 --> 00:04:19,329
第二个比特是停止位选择啊

122
00:04:19,329 --> 00:04:19,990
零表示什么

123
00:04:19,990 --> 00:04:20,829
一表示什么

124
00:04:20,829 --> 00:04:25,160
第三个比特呢是这个呃校验选择啊

125
00:04:25,160 --> 00:04:26,240
校验室能啊

126
00:04:26,240 --> 00:04:27,829
零表示什么仪表是什么

127
00:04:27,829 --> 00:04:31,360
那么我要怎么去对这个寄存器做操作

128
00:04:31,360 --> 00:04:33,819
我们如果已经把这个寄存器的地址啊

129
00:04:33,819 --> 00:04:35,300
已经做成了一个符号

130
00:04:35,300 --> 00:04:37,519
然后我可以直接去访问怎么做操作

131
00:04:37,519 --> 00:04:40,569
能够把这个二这个比特置为一

132
00:04:40,569 --> 00:04:42,658
或者把三这个比特置为零呢

133
00:04:42,658 --> 00:04:44,668
我们常用的操作就是这样子的

134
00:04:44,668 --> 00:04:46,769
我们去定义两个符号

135
00:04:46,769 --> 00:04:49,850
一个叫做s b s表示这里的stop slg

136
00:04:49,850 --> 00:04:53,029
那么它呢是等于eu往左移二

137
00:04:53,029 --> 00:04:55,129
因为这是在第二位上面

138
00:04:55,129 --> 00:04:57,279
所以我们说它是1u往左移二

139
00:04:57,279 --> 00:04:59,560
然后pe啊

140
00:04:59,560 --> 00:05:00,759
pride enable

141
00:05:00,759 --> 00:05:03,269
它呢是eu往左移三

142
00:05:03,269 --> 00:05:05,310
这样呢我们就定义了这两个常量

143
00:05:05,310 --> 00:05:06,449
然后怎么玩它呢

144
00:05:06,449 --> 00:05:10,139
你看如果我想让这两个比特都为一

145
00:05:10,139 --> 00:05:12,209
我就说这个u c l c r

146
00:05:12,209 --> 00:05:13,889
这个u c l c r这个变量啊

147
00:05:13,889 --> 00:05:18,288
这个寄存器或上了sbs或p1 

148
00:05:18,288 --> 00:05:22,319
就是这两个比特都要唯一啊

149
00:05:22,319 --> 00:05:24,060
因为1u往左移

150
00:05:24,060 --> 00:05:25,439
二呢就是100

151
00:05:25,439 --> 00:05:26,220
对吧啊

152
00:05:26,220 --> 00:05:27,420
我们把这段抄过去

153
00:05:27,420 --> 00:05:30,649
我们来在这个这个这个呃黑板上

154
00:05:30,649 --> 00:05:32,000
看一下它到底是什么样子

155
00:05:32,000 --> 00:05:34,339
一左一二是什么呢

156
00:05:34,339 --> 00:05:39,028
100后面留俩零一左一三是什么呢

157
00:05:39,028 --> 00:05:40,408
1000

158
00:05:42,298 --> 00:05:44,240
而这是p e

159
00:05:44,420 --> 00:05:48,300
然后我们那个变量我们不如叫做油吧

160
00:05:48,300 --> 00:05:52,500
由获了s b s获了这个p什么意思呢

161
00:05:52,500 --> 00:05:54,149
就是不管你原来是什么

162
00:05:54,149 --> 00:05:57,720
我就让你的后面四个

163
00:05:57,720 --> 00:05:59,490
后面的中间这两个比特

164
00:05:59,490 --> 00:06:00,990
这是这是零比特

165
00:06:00,990 --> 00:06:01,529
一比特

166
00:06:01,529 --> 00:06:02,069
二比特

167
00:06:02,069 --> 00:06:04,470
三比特232个比特保持位移

168
00:06:04,470 --> 00:06:06,209
原来你其他东西我都不动啊

169
00:06:06,209 --> 00:06:07,680
我只是让你这两个为一

170
00:06:07,680 --> 00:06:10,339
如果我想清掉某个比特

171
00:06:10,339 --> 00:06:14,360
我就可以说you and比如说not sbs

172
00:06:15,279 --> 00:06:18,360
那么not s b s s b s是这个对吧

173
00:06:18,360 --> 00:06:22,199
那么它的取反就相当于是零啊

174
00:06:22,620 --> 00:06:24,480
相当于是1011

175
00:06:24,480 --> 00:06:26,220
但是其他所有都是一对吧

176
00:06:26,220 --> 00:06:29,579
那么然后呢再去做个鱼

177
00:06:29,579 --> 00:06:31,709
不管你原来有什么这个零

178
00:06:31,709 --> 00:06:34,620
就会把这个比特给清掉

179
00:06:34,620 --> 00:06:38,480
就会把2号对应的那个比特给清掉

180
00:06:38,480 --> 00:06:41,709
于是呢sbs就被清除为零了

181
00:06:41,709 --> 00:06:44,529
如果我要you and not pee

182
00:06:44,529 --> 00:06:45,730
当然也是一样的效果

183
00:06:45,730 --> 00:06:47,199
就会使得

184
00:06:49,500 --> 00:06:53,040
这个比特变成了零啊

185
00:06:53,040 --> 00:06:54,269
这是note p一对吧

186
00:06:54,269 --> 00:06:56,519
然后呢就会使得这个比特别成零啊

187
00:06:56,519 --> 00:06:58,110
所以我们用

188
00:06:58,110 --> 00:06:59,399
所以我们用这样的方法呢

189
00:06:59,399 --> 00:07:01,870
就可以去控制这个呃

190
00:07:01,870 --> 00:07:04,029
单片机的这个特殊功能寄存器

191
00:07:04,029 --> 00:07:06,180
我们要让某些比特为零

192
00:07:06,180 --> 00:07:07,230
某些比特为一

193
00:07:07,230 --> 00:07:08,579
我们就可以这样子去写了

194
00:07:08,579 --> 00:07:10,800
用或使得某些比特为一用

195
00:07:10,800 --> 00:07:12,459
and使得某些比特为零

196
00:07:12,459 --> 00:07:14,350
然后因为这里的每一个数

197
00:07:14,350 --> 00:07:16,180
只有一个比特上为一

198
00:07:16,180 --> 00:07:17,379
所以它们可以被霍起来

199
00:07:17,379 --> 00:07:20,180
表示说这两个比特我要同时做操作好


1
00:00:04,360 --> 00:00:06,610
我们前面的几个例子啊

2
00:00:06,610 --> 00:00:09,240
无论是is prime还是这个some

3
00:00:09,660 --> 00:00:11,310
我们都是这样写的

4
00:00:11,310 --> 00:00:13,650
我们这个命啊在下面

5
00:00:13,650 --> 00:00:18,210
然后把这个自己写的这个函数呢写在前面

6
00:00:18,210 --> 00:00:19,320
写在上面

7
00:00:19,320 --> 00:00:20,969
之所以要这样写

8
00:00:20,969 --> 00:00:24,278
是因为c的编译器

9
00:00:24,278 --> 00:00:27,109
你想我们的程序是要由编译器

10
00:00:27,109 --> 00:00:28,969
把你的源代码读进去

11
00:00:28,969 --> 00:00:30,710
编译产生可执行的东西

12
00:00:30,710 --> 00:00:31,309
对不对

13
00:00:31,309 --> 00:00:33,200
那c的这个编译器呢

14
00:00:33,200 --> 00:00:36,310
它会按照你书写的那个顺序

15
00:00:36,310 --> 00:00:40,479
逐行的自上而下的来分析你的代码

16
00:00:41,200 --> 00:00:44,520
那么当他看到这一段的时候

17
00:00:44,520 --> 00:00:45,630
当他看到说哦

18
00:00:45,630 --> 00:00:47,670
你定了一个自己的函数叫做some

19
00:00:47,670 --> 00:00:49,890
ok那他会记下来说好

20
00:00:49,890 --> 00:00:50,640
那我知道了

21
00:00:50,640 --> 00:00:52,060
我们有一个sum函数

22
00:00:52,060 --> 00:00:54,729
这个sum函数呢长成这个样子啊

23
00:00:54,729 --> 00:00:56,320
它没有返回类型

24
00:00:56,320 --> 00:00:57,310
它叫做some

25
00:00:57,310 --> 00:00:58,390
它有两个参数

26
00:00:58,390 --> 00:00:59,679
每个参数都是int

27
00:01:00,740 --> 00:01:01,780
他就知道了

28
00:01:01,780 --> 00:01:02,679
知道了之后

29
00:01:02,679 --> 00:01:05,179
到了下面你去调用sum的时候

30
00:01:05,299 --> 00:01:06,769
他就会说哦

31
00:01:06,769 --> 00:01:09,170
现在呢你要去用调用sum了

32
00:01:09,170 --> 00:01:12,140
那你用的是叫做sm的函数

33
00:01:12,140 --> 00:01:14,180
这个函数呢我刚刚遇到过啊

34
00:01:14,180 --> 00:01:15,590
他在那儿出现过

35
00:01:15,590 --> 00:01:16,939
这个函数呢要两个int

36
00:01:16,939 --> 00:01:18,759
你给了两个int很好

37
00:01:18,759 --> 00:01:19,599
没问题

38
00:01:19,599 --> 00:01:21,668
这个函数不返回任何东西

39
00:01:21,668 --> 00:01:24,579
你也没有把这个函数的返回结果

40
00:01:24,579 --> 00:01:25,359
去交给任何人

41
00:01:25,359 --> 00:01:26,560
很好做的很对

42
00:01:26,560 --> 00:01:27,939
于是他就认为

43
00:01:27,939 --> 00:01:31,239
你对sum函数的这个调用是正确的

44
00:01:31,579 --> 00:01:34,700
也就是说在他看到some 10的时候

45
00:01:34,700 --> 00:01:36,200
他需要知道some样子

46
00:01:36,200 --> 00:01:38,049
他需要知道some长什么样子

47
00:01:38,049 --> 00:01:39,340
所谓长什么样子

48
00:01:39,340 --> 00:01:42,099
就是这个sum呢要几个参数

49
00:01:42,099 --> 00:01:44,290
每个参数它的类型是什么

50
00:01:44,290 --> 00:01:46,759
然后这个sum函数要返回什么类型

51
00:01:46,799 --> 00:01:49,079
如果你不把三个some放在上面

52
00:01:49,079 --> 00:01:50,159
他不就不知道了吗

53
00:01:50,159 --> 00:01:52,109
他看到sam哪来的sm

54
00:01:52,109 --> 00:01:53,079
我不认识呀

55
00:01:53,079 --> 00:01:55,359
你你这sam现在你给了一个一

56
00:01:55,359 --> 00:01:56,859
给了这个十到底对不对

57
00:01:56,859 --> 00:01:59,000
而且那sam能不能接受你这俩数

58
00:01:59,000 --> 00:02:01,118
他不知道对吧

59
00:02:01,840 --> 00:02:05,640
所以他必须要在前头看到过这个项目

60
00:02:05,640 --> 00:02:06,989
它才能够检查说

61
00:02:06,989 --> 00:02:09,599
你对这个sum的调用是不是对的

62
00:02:09,859 --> 00:02:11,219
如果不知道

63
00:02:12,199 --> 00:02:12,939
如果不知道

64
00:02:12,939 --> 00:02:14,620
也就是说我们把药调到函数放到下面了

65
00:02:14,620 --> 00:02:15,039
会怎么样呢

66
00:02:15,039 --> 00:02:15,639
我们来试一下

67
00:02:15,639 --> 00:02:17,020
干线好

68
00:02:17,020 --> 00:02:20,979
你看我们现在呢把这个sm给它移下来

69
00:02:21,219 --> 00:02:22,599
移到面的下面

70
00:02:22,599 --> 00:02:25,500
我们看看编译

71
00:02:26,438 --> 00:02:28,348
他给了亡灵

72
00:02:28,348 --> 00:02:30,599
甚至还给了error

73
00:02:30,679 --> 00:02:33,859
不过我得说你在自己的编译器上试的时候

74
00:02:33,859 --> 00:02:37,278
不一定能看到和我一模一样的结果呃

75
00:02:37,278 --> 00:02:38,239
我之前讲过很多次

76
00:02:38,239 --> 00:02:39,859
我现在用的是l l v m

77
00:02:39,859 --> 00:02:43,188
它相对来说对c语言的这些东西的检查

78
00:02:43,188 --> 00:02:44,159
比较严格

79
00:02:44,159 --> 00:02:46,199
也可能你用的那个编译器

80
00:02:46,199 --> 00:02:49,110
没有给出那么严格的一个检查的结果

81
00:02:49,110 --> 00:02:52,000
他说的他说呢这个王女士说

82
00:02:53,199 --> 00:02:55,329
他说呢在c9 里面

83
00:02:55,329 --> 00:02:58,868
这个sum函数的这个隐含的声明是无效的

84
00:02:58,868 --> 00:02:59,829
为什么是隐含的声明

85
00:02:59,829 --> 00:03:01,209
就是在第六行

86
00:03:01,209 --> 00:03:02,288
第六行是哪一行呢

87
00:03:02,288 --> 00:03:05,139
是这一行这一行哪哪有函数

88
00:03:05,139 --> 00:03:06,789
这一行我们不就在用函数吗

89
00:03:06,789 --> 00:03:07,300
没错啊

90
00:03:07,300 --> 00:03:08,139
你在用函数

91
00:03:08,139 --> 00:03:10,990
然后c的编译器不知道这函数长什么样呀

92
00:03:10,990 --> 00:03:13,819
所以在c99 以前

93
00:03:13,819 --> 00:03:17,199
c的编译器呢就会猜说哦

94
00:03:17,199 --> 00:03:18,580
你有你有个函数是吧

95
00:03:18,580 --> 00:03:20,319
你你没告诉我这函数长什么样

96
00:03:20,319 --> 00:03:23,800
那我就假设呢认为这有一个sum函数

97
00:03:23,800 --> 00:03:25,500
它呢要俩int

98
00:03:26,159 --> 00:03:28,110
它它就假设是这样子啊

99
00:03:28,110 --> 00:03:31,560
并且呢这个函数它还返回int

100
00:03:31,739 --> 00:03:35,248
他认为他猜测这函数是这样子的

101
00:03:35,248 --> 00:03:36,778
所以呢在这儿他给个王宁

102
00:03:36,778 --> 00:03:37,438
这是一个警告

103
00:03:37,438 --> 00:03:40,558
说这种做法在c9 就已经无效了

104
00:03:40,558 --> 00:03:43,288
但是呢他仍然能帮你编译下去

105
00:03:43,288 --> 00:03:46,490
他按照传统的老版本的c的编译器的想法

106
00:03:46,490 --> 00:03:47,360
猜测说啊

107
00:03:47,360 --> 00:03:48,289
你这个是这样子的

108
00:03:48,289 --> 00:03:49,969
可是到了第13行

109
00:03:49,969 --> 00:03:51,110
你看第13行

110
00:03:51,110 --> 00:03:54,058
在这真的sum函数遇到了

111
00:03:54,058 --> 00:03:56,489
他说conflicting types

112
00:03:56,489 --> 00:04:01,360
他说这个sm的这个函数的这个类型啊

113
00:04:01,859 --> 00:04:03,028
冲突了

114
00:04:03,028 --> 00:04:04,019
为什么冲突呢

115
00:04:04,019 --> 00:04:06,568
因为现在我们在这儿非常明确的说

116
00:04:06,568 --> 00:04:07,939
some是void

117
00:04:08,299 --> 00:04:11,748
而他猜的他猜说some是int

118
00:04:11,748 --> 00:04:15,620
所以他猜的这个函数的类型

119
00:04:15,620 --> 00:04:17,629
和你实际给的这个函数的类型

120
00:04:17,629 --> 00:04:19,610
或者说他猜的函数的样子

121
00:04:19,610 --> 00:04:23,720
和你实际给的函数的样子是不匹配的啊

122
00:04:23,720 --> 00:04:26,848
因此他就给了一个error啊

123
00:04:26,848 --> 00:04:30,478
我还是得说在有些地方有

124
00:04:30,478 --> 00:04:33,560
在有些编译器也许你不会得到这个error

125
00:04:33,899 --> 00:04:37,920
这和你编译器厂家他怎么怎么想

126
00:04:37,920 --> 00:04:39,120
这件事情怎么做

127
00:04:39,120 --> 00:04:42,120
他执行c99 标准的力度的大小

128
00:04:42,120 --> 00:04:43,290
是有关系的

129
00:04:43,290 --> 00:04:46,910
然后他还说previous implicit decouraging his hero

130
00:04:46,910 --> 00:04:50,040
之前猜测的那个声明呢

131
00:04:50,040 --> 00:04:50,970
在第六行

132
00:04:50,970 --> 00:04:53,009
它根据第六行的猜了一个结果

133
00:04:53,009 --> 00:04:55,050
然后跟你现在第13行的那个

134
00:04:55,050 --> 00:04:57,339
实际的三函数的定义是不一样的

135
00:04:57,779 --> 00:04:59,699
所以给了一个error

136
00:04:59,699 --> 00:05:03,579
我们程序就没有能够编译出来啊

137
00:05:03,579 --> 00:05:05,319
甚至根本就没有能够编译出来

138
00:05:07,959 --> 00:05:10,680
ok那怎么办

139
00:05:12,600 --> 00:05:15,800
当然你如果回到刚才的那个路子

140
00:05:15,800 --> 00:05:18,800
说我把所有的我自己才我自己做的函数

141
00:05:18,800 --> 00:05:20,569
定义的函数全部放在in的前面

142
00:05:20,569 --> 00:05:21,379
肯定是可以的

143
00:05:21,379 --> 00:05:22,209
没有问题

144
00:05:22,209 --> 00:05:24,129
但是有的时候呃

145
00:05:24,129 --> 00:05:25,029
这样不好看

146
00:05:25,029 --> 00:05:27,920
因为我们进了这个程序

147
00:05:27,920 --> 00:05:29,300
我们总希望一看到

148
00:05:29,300 --> 00:05:30,800
一下子就看到这个命是怎么样的

149
00:05:30,800 --> 00:05:33,500
我们下次想想知道这到底是怎么干活的

150
00:05:33,500 --> 00:05:34,819
然后我们再去看细节

151
00:05:34,819 --> 00:05:36,819
说那个sam到底是怎么算的

152
00:05:37,019 --> 00:05:40,709
我我们希望我们的程序能够摆成这个样子

153
00:05:40,709 --> 00:05:42,000
把main放在最上面

154
00:05:42,000 --> 00:05:42,569
然后呢

155
00:05:42,569 --> 00:05:44,639
他要用到的所有的我们自己定义的函数

156
00:05:44,639 --> 00:05:45,240
放在最下面

157
00:05:45,240 --> 00:05:46,379
放在main下面

158
00:05:46,379 --> 00:05:47,420
依次放在哪

159
00:05:48,779 --> 00:05:51,350
所以我们需要做这样一件事情

160
00:05:51,350 --> 00:05:53,139
我们把这个函数的

161
00:05:53,259 --> 00:05:56,860
我们前面说这一行是这个函数的头

162
00:05:56,860 --> 00:06:00,500
我们把这个函数的头呢拷贝到main的前面去

163
00:06:00,500 --> 00:06:01,370
粘贴一下

164
00:06:01,370 --> 00:06:02,939
后面加上分号

165
00:06:04,279 --> 00:06:06,910
我们没有把整个函数搬到前面去

166
00:06:06,910 --> 00:06:09,970
我们只是把函数的头搬到前面去了

167
00:06:09,970 --> 00:06:11,680
然后加了一个分号

168
00:06:11,680 --> 00:06:13,319
现在我们再来编译它

169
00:06:13,579 --> 00:06:16,019
ok没有任何问题

170
00:06:17,620 --> 00:06:22,420
这一行叫做函数的原型声明

171
00:06:23,319 --> 00:06:26,519
这一行14行到22行

172
00:06:26,519 --> 00:06:29,278
这是函数的定义

173
00:06:29,278 --> 00:06:31,560
这是声明

174
00:06:32,038 --> 00:06:38,149
而这个地方是定义声明

175
00:06:38,149 --> 00:06:40,339
不是函数声明

176
00:06:40,339 --> 00:06:41,660
只是告诉编译器说

177
00:06:41,660 --> 00:06:44,029
你看some是一个函数

178
00:06:44,029 --> 00:06:46,069
它呢长得像这个样子

179
00:06:46,069 --> 00:06:47,209
名字叫some

180
00:06:47,209 --> 00:06:49,180
有两个int作为参数

181
00:06:49,279 --> 00:06:50,420
没有返回类型

182
00:06:51,920 --> 00:06:53,240
有了这句声明之后

183
00:06:53,240 --> 00:06:55,699
编译期呢就记住了就知道了哦

184
00:06:55,699 --> 00:06:57,500
some sum是长这个样子的

185
00:06:57,500 --> 00:06:59,389
然后下面遇到这一行的时候

186
00:06:59,389 --> 00:07:00,620
他就不是自己去猜了

187
00:07:00,620 --> 00:07:02,730
他不去猜是不是俩int

188
00:07:02,730 --> 00:07:04,529
一个返回也是int

189
00:07:04,529 --> 00:07:06,810
因为前面的声明已经告诉他了

190
00:07:06,810 --> 00:07:09,800
ok所以它就会根据声明来决定

191
00:07:09,800 --> 00:07:12,519
来判断你对上的调用是不是正确的

192
00:07:12,899 --> 00:07:15,360
到了这一行你去定义项目的时候

193
00:07:15,360 --> 00:07:17,939
他还会再来判断一遍

194
00:07:17,939 --> 00:07:22,139
说你的定义和声明是不是一致的

195
00:07:22,139 --> 00:07:25,889
你看假如说我们现在在这把void换成int

196
00:07:25,889 --> 00:07:27,449
把void换成int之后

197
00:07:27,449 --> 00:07:28,379
这是我们的声明

198
00:07:28,379 --> 00:07:29,399
这是我们的定义

199
00:07:29,399 --> 00:07:30,930
我们编译会有什么结果呢

200
00:07:30,930 --> 00:07:31,980
他会说

201
00:07:33,819 --> 00:07:34,918
内心冲突了

202
00:07:34,918 --> 00:07:35,879
在第14行

203
00:07:35,879 --> 00:07:37,588
现在这是第14 14行了

204
00:07:37,588 --> 00:07:39,778
说我们的定义呢是void

205
00:07:39,778 --> 00:07:41,600
而之前的声明呢

206
00:07:41,819 --> 00:07:45,939
你看到了这个词decoration

207
00:07:45,939 --> 00:07:47,050
之前的声明说

208
00:07:47,050 --> 00:07:50,019
在第三行的声明说这是int

209
00:07:50,019 --> 00:07:52,490
这个int和这个void不匹配

210
00:07:52,490 --> 00:07:55,730
所以声明不仅仅是用来让别人一起检查

211
00:07:55,730 --> 00:07:57,350
你对这个函数调用是不是对的

212
00:07:57,350 --> 00:07:59,790
也会用来让编译器检查

213
00:07:59,790 --> 00:08:02,370
你对函数的定义和声明是不是一致的

214
00:08:02,370 --> 00:08:04,800
因为你想你想编译器在之前

215
00:08:05,259 --> 00:08:07,300
每一个你对函数的调用

216
00:08:07,300 --> 00:08:09,399
都用这个声明去检查了

217
00:08:09,399 --> 00:08:11,560
如果结果发现说这个声明和定义

218
00:08:11,560 --> 00:08:12,800
是不一致的

219
00:08:13,480 --> 00:08:15,540
那前面的检查都是白费的

220
00:08:15,540 --> 00:08:17,879
所以他也要确保说

221
00:08:17,879 --> 00:08:21,160
你对他的定义和声明是符合的

222
00:08:21,160 --> 00:08:25,740
所以函数原型就是我们把函数的头取出来

223
00:08:25,740 --> 00:08:29,759
然后呢加上分号就构成了函数的圆形

224
00:08:31,040 --> 00:08:33,479
所以这是函数的原型

225
00:08:33,500 --> 00:08:35,120
函数原型的目的就是告诉编译器

226
00:08:35,120 --> 00:08:36,200
实函数长什么样子啊

227
00:08:36,200 --> 00:08:37,490
告诉编译器它的名称

228
00:08:37,490 --> 00:08:39,799
它的参数包括它的参数的数量

229
00:08:39,799 --> 00:08:40,580
参数的类型

230
00:08:40,580 --> 00:08:42,620
然后呢它的返回类型

231
00:08:43,360 --> 00:08:45,419
实际的函数头在下面

232
00:08:45,419 --> 00:08:47,279
后面还会有大括号的啊

233
00:08:47,279 --> 00:08:48,179
没有分号结尾

234
00:08:48,179 --> 00:08:49,259
有分号结尾的话

235
00:08:49,259 --> 00:08:51,120
那它就是一个函数原型了

236
00:08:52,559 --> 00:08:54,139
然后当我们去调用

237
00:08:54,139 --> 00:08:54,860
比如这里的max

238
00:08:54,860 --> 00:08:56,179
当我们去调用这个max的时候

239
00:08:56,179 --> 00:08:58,730
它会根据原型来判断你给他的

240
00:08:58,730 --> 00:09:00,049
对不对啊

241
00:09:00,049 --> 00:09:01,820
实际上在这里还会发生一件事情

242
00:09:01,820 --> 00:09:03,679
我们在第六周里面讲过

243
00:09:03,679 --> 00:09:06,860
因为现在这个两个变量a和b都是double

244
00:09:06,860 --> 00:09:08,570
我们给的两个是整数

245
00:09:08,570 --> 00:09:09,929
所以会发生什么

246
00:09:09,929 --> 00:09:11,429
我们在第六周提到过

247
00:09:11,429 --> 00:09:14,860
会发生自动类型转换

248
00:09:14,860 --> 00:09:17,799
它会把12变成double交给a

249
00:09:17,799 --> 00:09:19,990
有的时候我们看有些比较旧的教科书

250
00:09:19,990 --> 00:09:23,789
我们会看到旧的编程习惯呢会这样子来写

251
00:09:23,789 --> 00:09:26,820
既然我们是在main里面要去用这个sum函数

252
00:09:26,820 --> 00:09:29,039
那旧版本呢会说好

253
00:09:29,039 --> 00:09:30,979
那我们把这个东西呢放在这

254
00:09:31,700 --> 00:09:35,649
在这个函数里面会要用到的所有的函数

255
00:09:35,649 --> 00:09:38,220
它的声明写在函数的头上

256
00:09:38,220 --> 00:09:40,559
在这个函数里面如果要用到一些变量

257
00:09:40,559 --> 00:09:43,470
这些变量的定义也要写在函数的最头上

258
00:09:43,470 --> 00:09:45,809
这是旧版本的c

259
00:09:45,809 --> 00:09:48,539
那现在呢我们一般不这么做

260
00:09:48,539 --> 00:09:52,860
现现在呢我们一般习惯于函数的原型声明

261
00:09:52,860 --> 00:09:55,230
要写在函数的外面

262
00:09:55,230 --> 00:09:57,350
写在函数的前面

263
00:09:57,350 --> 00:09:58,820
而不写在函数的里面

264
00:09:58,820 --> 00:10:00,409
另外还有一个细节是

265
00:10:00,409 --> 00:10:01,490
函数的原型里面

266
00:10:01,490 --> 00:10:03,559
是可以不写它参数的名字的

267
00:10:03,559 --> 00:10:04,990
我们可以试一下这件事情

268
00:10:04,990 --> 00:10:07,359
我们在这个圆形声明里头

269
00:10:08,220 --> 00:10:11,690
in把begin和end都拿掉了

270
00:10:11,690 --> 00:10:14,919
现在我们来编译没有任何问题

271
00:10:14,919 --> 00:10:15,669
为什么

272
00:10:15,669 --> 00:10:17,500
因为对于原型声明来说

273
00:10:17,500 --> 00:10:21,100
他要告诉编译器的是说这个some有两个参数

274
00:10:21,100 --> 00:10:22,000
第一个是int

275
00:10:22,000 --> 00:10:23,039
第二个也是int

276
00:10:23,100 --> 00:10:26,919
至于说第一个int叫做a还是b

277
00:10:26,919 --> 00:10:28,600
第二个int叫做a还是b

278
00:10:28,600 --> 00:10:29,919
是叫做begin还是and

279
00:10:29,919 --> 00:10:31,450
没有任何关系

280
00:10:31,450 --> 00:10:34,480
即使我们现在写下来是a b和实际的begin

281
00:10:34,480 --> 00:10:35,559
and不一致

282
00:10:36,460 --> 00:10:37,860
也没有关系

283
00:10:37,860 --> 00:10:39,720
因为编译器做检查的时候

284
00:10:39,720 --> 00:10:40,980
不会检查参数的名称

285
00:10:40,980 --> 00:10:43,620
它只是检查参数的类型

286
00:10:43,620 --> 00:10:47,759
但是我们通常会把这些东西好好的留着

287
00:10:47,759 --> 00:10:49,830
和函数的头部完全一样

288
00:10:49,830 --> 00:10:53,039
这是因为对于人类读者来说

289
00:10:53,039 --> 00:10:54,840
你把它写成和函数一样

290
00:10:54,840 --> 00:10:56,039
写成begin和end

291
00:10:56,039 --> 00:10:59,539
这两个单词对人类是有意义的

292
00:10:59,539 --> 00:11:00,620
对编译器没有意义

293
00:11:00,620 --> 00:11:01,580
对机器没有意义

294
00:11:01,580 --> 00:11:02,899
但是对人是有益的

295
00:11:02,899 --> 00:11:04,159
所以我们会把它留成这个样子


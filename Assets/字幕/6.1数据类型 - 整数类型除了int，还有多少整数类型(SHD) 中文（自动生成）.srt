1
00:00:04,379 --> 00:00:06,540
有了size of这个工具之后

2
00:00:06,900 --> 00:00:09,179
我们可以用size来看一下

3
00:00:09,179 --> 00:00:11,070
我们现在手上的这些类型

4
00:00:11,070 --> 00:00:13,699
我们首先来看我们的整数是怎么回事

5
00:00:13,878 --> 00:00:15,019
我们写了一个程序

6
00:00:15,019 --> 00:00:15,978
让它输出

7
00:00:15,978 --> 00:00:20,149
我们现在已经知道的这五种整数的大小

8
00:00:20,149 --> 00:00:21,309
tra short

9
00:00:21,309 --> 00:00:23,350
int long和long long

10
00:00:23,350 --> 00:00:25,519
我们来看看这个结果会是怎么样子的

11
00:00:25,519 --> 00:00:26,960
我很久没在控制台底下来

12
00:00:26,960 --> 00:00:28,219
边运行我们的程序了

13
00:00:28,219 --> 00:00:31,640
我们说gcc test.c我们用钢o来说

14
00:00:31,640 --> 00:00:34,659
我们要输出的那个可清文件名叫做test

15
00:00:35,100 --> 00:00:37,338
现在我们来执行一下test

16
00:00:37,899 --> 00:00:41,619
他告诉我们说child的大小是一个字节

17
00:00:41,619 --> 00:00:43,240
short是两个字节

18
00:00:43,240 --> 00:00:44,439
int 4个字节

19
00:00:44,439 --> 00:00:47,378
long和long long都是八个字节

20
00:00:48,039 --> 00:00:49,649
我们再编译一下

21
00:00:49,649 --> 00:00:51,719
这次呢我们加上另外一个选项

22
00:00:51,719 --> 00:00:53,279
说杠m32 

23
00:00:53,700 --> 00:00:56,009
然后我们再来执行他一下

24
00:00:56,009 --> 00:00:58,740
他说现在呢我们的char是一个字节

25
00:00:58,740 --> 00:00:59,700
short是两个字节

26
00:00:59,700 --> 00:01:00,840
int是四个字节

27
00:01:00,840 --> 00:01:03,250
而around变成了四个字节

28
00:01:03,250 --> 00:01:05,340
long long仍然是八个字节

29
00:01:05,340 --> 00:01:07,230
杠m32 的意思是说

30
00:01:07,230 --> 00:01:08,760
我这次编译的时候

31
00:01:08,760 --> 00:01:11,280
要当做32位的机器来编译

32
00:01:11,280 --> 00:01:13,700
我现在的这台电脑是64位的

33
00:01:13,780 --> 00:01:15,400
那如果我不加杠m32 

34
00:01:15,400 --> 00:01:16,239
它是64位的

35
00:01:16,239 --> 00:01:17,739
然后他给了我这样的结果

36
00:01:17,739 --> 00:01:19,599
但是我现在用的编译器是什么呢

37
00:01:19,599 --> 00:01:20,859
我们看一下版本

38
00:01:23,500 --> 00:01:27,480
我现在的编译器是l l v m l l v m

39
00:01:27,480 --> 00:01:31,769
所以你可以在自己的这个编译器里面

40
00:01:31,769 --> 00:01:33,840
你比如说你用d e v c加加一样

41
00:01:33,840 --> 00:01:35,400
可以把我们的这个程序来试一下

42
00:01:35,400 --> 00:01:38,019
然后看看在你现在的这个环境底下

43
00:01:38,019 --> 00:01:40,480
每一个类型的大小是多少

44
00:01:40,480 --> 00:01:42,459
然后我们可以在讨论区里面来讨论一下

45
00:01:42,459 --> 00:01:43,329
这件事情

46
00:01:43,329 --> 00:01:45,909
我们看到我们的这些整数啊

47
00:01:47,230 --> 00:01:49,730
它的这个大小

48
00:01:49,730 --> 00:01:51,650
它的size是什么样的呢

49
00:01:51,650 --> 00:01:53,180
一个char是一个字节

50
00:01:53,180 --> 00:01:55,099
字节是一个单位呃

51
00:01:55,099 --> 00:01:56,810
表示在内存当中的大小

52
00:01:56,810 --> 00:01:58,519
一个字节是八个比特

53
00:01:58,519 --> 00:02:01,039
也就是八个二进制的位

54
00:02:01,219 --> 00:02:02,959
一个shot是两个字节

55
00:02:02,959 --> 00:02:04,790
但是我们看到int和long

56
00:02:04,790 --> 00:02:08,360
它的大小好像和我的编译器的选项有关

57
00:02:08,360 --> 00:02:09,800
你们在自己的编译器上试过

58
00:02:09,800 --> 00:02:14,128
也会发现int和long和你的计算机有关

59
00:02:14,128 --> 00:02:15,680
和你用的编译器有关

60
00:02:15,680 --> 00:02:18,199
int呢是要表达计算机的字长的

61
00:02:18,199 --> 00:02:21,319
而long long呢应该有固定的八个比特

62
00:02:21,319 --> 00:02:23,360
而int和long这两个字

63
00:02:23,360 --> 00:02:25,909
这两种类型呢有一点点的不确定

64
00:02:25,909 --> 00:02:28,460
他们和计算机有关

65
00:02:28,460 --> 00:02:30,379
但是呢实际上它也和编译器有关

66
00:02:30,379 --> 00:02:32,300
你看到在我的这台计算机上

67
00:02:32,300 --> 00:02:33,479
还是同一台计算机

68
00:02:33,479 --> 00:02:35,219
我给了编译器不同的选项

69
00:02:35,219 --> 00:02:38,280
结果呢它就会编译出不同大小的int

70
00:02:38,280 --> 00:02:39,449
不同大小的long

71
00:02:39,449 --> 00:02:41,370
什么叫做计算机的字长呢

72
00:02:41,370 --> 00:02:43,229
我们知道在我们的计算机里面啊

73
00:02:43,229 --> 00:02:48,039
呃我们有一个大大的东西叫做cpu

74
00:02:48,039 --> 00:02:50,879
然后呢在cpu的外面

75
00:02:50,879 --> 00:02:52,939
我们还会有另外一个东西

76
00:02:52,939 --> 00:02:55,219
就是我们的内存

77
00:02:55,219 --> 00:03:00,719
在cpu和内存中间有一种东西叫做总线

78
00:03:00,719 --> 00:03:02,370
那么在cpu里面呢

79
00:03:02,370 --> 00:03:05,750
还有另外一种东西叫做寄存器

80
00:03:05,750 --> 00:03:09,800
当我们在说一台计算机的字长的时候

81
00:03:09,800 --> 00:03:12,769
我们指的是说这台计算机里面

82
00:03:12,769 --> 00:03:15,639
这个寄存器是多少宽的

83
00:03:15,639 --> 00:03:19,030
也就是说这个寄存器呢是几个比特的

84
00:03:19,030 --> 00:03:21,550
比如说当我们说它是32个比特的

85
00:03:21,550 --> 00:03:25,110
那我们指的是说这个东西是32个比特

86
00:03:25,110 --> 00:03:27,090
每一个寄存器可以表达

87
00:03:27,090 --> 00:03:28,469
32个比特的数据

88
00:03:28,469 --> 00:03:31,840
我们同时也是在说这个当中呢

89
00:03:31,840 --> 00:03:35,550
我们在cpu和ram之间传递数据的时候

90
00:03:35,550 --> 00:03:38,969
他的每一次的传递是32个比特

91
00:03:38,969 --> 00:03:39,599
也就是说

92
00:03:39,599 --> 00:03:42,840
当我要从内存中取数据到cpu里面去

93
00:03:42,840 --> 00:03:46,000
那我每一次呢就会取过去32个比特

94
00:03:46,118 --> 00:03:48,338
我在cpu里的寄存器呢

95
00:03:48,338 --> 00:03:49,959
每一个寄存器可以表达的

96
00:03:49,959 --> 00:03:51,579
也是32个比特

97
00:03:51,579 --> 00:03:52,598
当然除了32

98
00:03:52,598 --> 00:03:55,960
我们现在更常见的可能是64个比特

99
00:03:56,639 --> 00:03:58,939
这就是在我们计算机里头发生的事情

100
00:03:58,939 --> 00:04:00,919
我们把这个32比特或者60匹的

101
00:04:00,919 --> 00:04:01,699
叫做一个字长

102
00:04:01,699 --> 00:04:05,069
是因为它的寄存器一次可以处理的数据

103
00:04:05,069 --> 00:04:06,569
就是32个比特

104
00:04:06,569 --> 00:04:08,849
它的总线上面一次可以传输的数据

105
00:04:08,849 --> 00:04:10,259
就是32个比特

106
00:04:10,259 --> 00:04:14,289
那这个字长就会在c语言当中呢反映为int

107
00:04:14,289 --> 00:04:15,129
也就是说

108
00:04:15,129 --> 00:04:18,680
int想要表达的就是一个寄存器的大小

109
00:04:18,680 --> 00:04:21,079
所以为什么在不同的平台上面

110
00:04:21,079 --> 00:04:22,250
在不同的cpu上面

111
00:04:22,250 --> 00:04:24,279
int会变得不一样大

112
00:04:24,360 --> 00:04:28,379
这是和呃这个int的地位是相关的

113
00:04:28,379 --> 00:04:31,870
而其他的整数想要表达的是和int不同的

114
00:04:31,870 --> 00:04:33,819
那么他们呢可以有固定的大小


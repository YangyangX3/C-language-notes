1
00:00:04,400 --> 00:00:06,679
现在呢我们再来做这样一个计算啊

2
00:00:06,679 --> 00:00:08,359
我们想要用一角

3
00:00:08,359 --> 00:00:10,130
两角和五角的硬币呢

4
00:00:10,130 --> 00:00:12,460
去凑出十元以下的金额

5
00:00:12,859 --> 00:00:14,779
那么这样的题呢

6
00:00:14,779 --> 00:00:17,780
这个计算机其实是最擅长的

7
00:00:17,780 --> 00:00:19,519
因为就是枚举嘛

8
00:00:19,519 --> 00:00:21,079
就是一个个列举嘛

9
00:00:21,079 --> 00:00:22,519
把所有的可能性都列出来嘛

10
00:00:22,519 --> 00:00:23,059
对不对

11
00:00:23,059 --> 00:00:26,120
因此呢我们需要怎么做这个程序呢

12
00:00:26,120 --> 00:00:29,120
我们需要去试说我一颗一角的

13
00:00:29,120 --> 00:00:29,809
两颗一角的

14
00:00:29,809 --> 00:00:30,410
三颗一角的

15
00:00:30,410 --> 00:00:33,079
四颗一角的凑上一颗两角的

16
00:00:33,079 --> 00:00:33,619
两颗两角的

17
00:00:33,619 --> 00:00:34,340
三颗两角的

18
00:00:34,340 --> 00:00:35,359
凑上一克两角

19
00:00:35,359 --> 00:00:35,899
一颗五角的

20
00:00:35,899 --> 00:00:36,770
两个两角的

21
00:00:36,770 --> 00:00:37,520
两颗五角的

22
00:00:37,520 --> 00:00:40,659
三颗五角的这么多种组合

23
00:00:40,659 --> 00:00:43,869
看它组合起来是不是我们要的那个值

24
00:00:43,869 --> 00:00:44,560
对不对

25
00:00:44,560 --> 00:00:47,299
因此我们需要有三个循环

26
00:00:47,299 --> 00:00:48,859
我们代码可以写成这个样子

27
00:00:48,859 --> 00:00:51,350
我们代码可以说我们有one two

28
00:00:51,350 --> 00:00:53,359
five代表一角两角

29
00:00:53,359 --> 00:00:53,840
三角啊

30
00:00:53,840 --> 00:00:54,859
一角两角和五角啊

31
00:00:54,859 --> 00:00:57,500
然后我们再读进来那个x我们做个for循环

32
00:00:57,500 --> 00:01:00,250
when等于一到x乘以十

33
00:01:00,250 --> 00:01:01,600
因为如果是两块

34
00:01:01,600 --> 00:01:04,510
那么最多我可以用20个一角的

35
00:01:04,510 --> 00:01:05,198
对不对

36
00:01:05,198 --> 00:01:07,388
那么在他的里头呢

37
00:01:07,388 --> 00:01:11,420
我们还要再对兔对两角做个便利

38
00:01:11,420 --> 00:01:13,219
那么我们来尝试所有的两角

39
00:01:13,219 --> 00:01:17,198
一个两角到x乘以10÷2对吧

40
00:01:17,198 --> 00:01:18,278
如果是两块

41
00:01:18,278 --> 00:01:19,778
那么两角最多是十个

42
00:01:19,778 --> 00:01:21,819
所以就是怎么算出来的啊

43
00:01:21,819 --> 00:01:23,799
所以这样有三重for循环

44
00:01:23,799 --> 00:01:27,759
在这里面我们有个如果呢when加two乘以二

45
00:01:27,759 --> 00:01:29,978
加上five乘以f等于x乘十了

46
00:01:29,978 --> 00:01:32,679
那我们就说可以用这个测的好

47
00:01:32,679 --> 00:01:34,209
我们可以先试一下这个程序

48
00:01:34,209 --> 00:01:34,930
方便起见

49
00:01:34,930 --> 00:01:36,189
我们先让x等于二

50
00:01:36,189 --> 00:01:37,780
我们来算两块钱的事情是吧

51
00:01:37,780 --> 00:01:40,379
好它给了我们很多种

52
00:01:40,379 --> 00:01:43,439
可能是比如说啊一个一角加两个两角

53
00:01:43,439 --> 00:01:44,959
加三个五角得到两块

54
00:01:47,099 --> 00:01:50,120
如果现在我们想对程序做一个修改

55
00:01:50,120 --> 00:01:54,569
我们希望啊一旦他算出一个结果来

56
00:01:54,569 --> 00:01:56,140
就不要再算下去了

57
00:01:56,140 --> 00:01:58,959
我们有一种排列组合的方法就够了

58
00:01:58,959 --> 00:02:01,540
我们有一种可以把三种硬币去组合

59
00:02:01,540 --> 00:02:02,739
出那么几块钱的组

60
00:02:02,739 --> 00:02:02,859
合

61
00:02:02,859 --> 00:02:04,030
出这个两块钱就够了

62
00:02:04,030 --> 00:02:05,259
这时候怎么做呢

63
00:02:06,239 --> 00:02:09,379
那么当然我们有break或者continue

64
00:02:09,379 --> 00:02:09,979
对不对

65
00:02:09,979 --> 00:02:11,599
因此我们首先会想到的是说

66
00:02:11,599 --> 00:02:12,639
我们能不能这样

67
00:02:12,639 --> 00:02:15,400
我们在这儿当他发现了一种情况以后

68
00:02:15,400 --> 00:02:17,099
我们就加上一个break

69
00:02:18,899 --> 00:02:22,248
break马跳出嘛行不行呢

70
00:02:22,248 --> 00:02:24,300
我们先执行一下看啊

71
00:02:26,419 --> 00:02:29,229
还是给了我们很多个结果

72
00:02:29,229 --> 00:02:33,099
为什么我们第八个跟踪一下

73
00:02:33,099 --> 00:02:34,780
看到底发生了什么

74
00:02:34,780 --> 00:02:36,639
我们在设设设个断点

75
00:02:36,639 --> 00:02:39,960
然后呢我们来跟踪运行

76
00:02:41,099 --> 00:02:43,050
现在呢我们在这儿是吧

77
00:02:43,050 --> 00:02:47,500
那么我们下一步下一步下一步

78
00:02:47,500 --> 00:02:49,419
现在这个肯定是不行的是吧

79
00:02:49,419 --> 00:02:51,099
我们就在这个file

80
00:02:51,099 --> 00:02:53,860
这个循环里面走了好几步呃

81
00:02:53,860 --> 00:02:54,819
都还不行

82
00:02:58,360 --> 00:03:00,120
终于我们有一个方案可行了

83
00:03:01,199 --> 00:03:02,639
现在我们到了break

84
00:03:02,639 --> 00:03:05,460
这break说我要离开这个循环

85
00:03:05,460 --> 00:03:05,819
对不对

86
00:03:05,819 --> 00:03:06,810
那他去哪儿呢

87
00:03:06,810 --> 00:03:08,430
我们看一下他去哪了

88
00:03:08,430 --> 00:03:09,639
下一步

89
00:03:11,300 --> 00:03:13,960
他没有离开这三重循环

90
00:03:14,099 --> 00:03:16,500
这个break只让他离开了

91
00:03:16,500 --> 00:03:18,870
他所在的最内层的那个循环

92
00:03:18,870 --> 00:03:21,819
这个for循环到了这个地方

93
00:03:21,838 --> 00:03:23,399
离开了这个for循环

94
00:03:23,399 --> 00:03:26,818
于是还要继续中间这一层的循环的

95
00:03:26,818 --> 00:03:30,899
下一轮我们的break和continue啊

96
00:03:30,899 --> 00:03:34,240
都只能对它所在的那一层循环去做

97
00:03:34,838 --> 00:03:36,989
他不能对更远的循环去做

98
00:03:36,989 --> 00:03:39,219
他不能一下子跳出所有的循环

99
00:03:39,439 --> 00:03:40,460
所以你要怎么样

100
00:03:40,460 --> 00:03:42,020
能够让它跳出所有的循环呢

101
00:03:43,879 --> 00:03:45,139
有一个办法是这样的

102
00:03:45,618 --> 00:03:46,878
我们现在知道说

103
00:03:46,878 --> 00:03:48,348
如果我在这做了break

104
00:03:48,348 --> 00:03:51,699
它就会跳到这个for循环的后面

105
00:03:51,739 --> 00:03:54,498
所以如果我在这儿还有一个break

106
00:03:54,498 --> 00:03:56,718
它就能够跳到这个for循环的后面

107
00:03:56,718 --> 00:03:58,579
然后如果我在这儿还有一个break

108
00:03:58,579 --> 00:04:01,300
它就能够跳出所有的三重循环

109
00:04:02,379 --> 00:04:05,099
但是我不能直接就这么简单的在这放break

110
00:04:05,099 --> 00:04:06,569
因为如果在这放个break

111
00:04:06,569 --> 00:04:07,169
意味着

112
00:04:07,169 --> 00:04:11,159
无论我以什么样的情况离开这个for循环

113
00:04:11,299 --> 00:04:15,679
那么这个break都会让他跳出外面的这一层

114
00:04:15,679 --> 00:04:16,600
for循环

115
00:04:17,319 --> 00:04:17,999
对不对

116
00:04:17,999 --> 00:04:19,978
所以应该是在某种条件下

117
00:04:19,978 --> 00:04:21,538
当这个break发生的时候

118
00:04:21,538 --> 00:04:22,949
这个break才会发生

119
00:04:22,949 --> 00:04:24,589
下面这个break才会发生

120
00:04:24,589 --> 00:04:25,910
那么怎么能够做到

121
00:04:25,910 --> 00:04:29,540
当某种条件下去做那件事情呢

122
00:04:31,160 --> 00:04:32,230
if什么呢

123
00:04:32,230 --> 00:04:35,170
好所以我们需要再来点东西

124
00:04:35,170 --> 00:04:36,850
我们需要在这里呢

125
00:04:36,850 --> 00:04:38,680
有另外一个变量叫做exit

126
00:04:38,680 --> 00:04:40,240
它一开始等于零

127
00:04:40,339 --> 00:04:42,620
然后当这个break要做之前

128
00:04:42,620 --> 00:04:43,699
我们先做一件事情

129
00:04:43,699 --> 00:04:45,060
说exit等于一

130
00:04:45,240 --> 00:04:46,620
等到了这个地方呢

131
00:04:46,620 --> 00:04:47,639
我们就来做个判断

132
00:04:47,639 --> 00:04:50,100
说如果exit的话

133
00:04:50,100 --> 00:04:51,810
那我们就break

134
00:04:51,810 --> 00:04:53,740
同样的在这儿也是这样

135
00:04:54,660 --> 00:04:56,480
如果exit

136
00:04:58,879 --> 00:04:59,360
的话

137
00:04:59,360 --> 00:05:02,930
那我们就break这个exit

138
00:05:02,930 --> 00:05:05,660
就相当于exit等于等于一啊

139
00:05:05,660 --> 00:05:07,399
相当于exit等于等于一

140
00:05:08,100 --> 00:05:09,620
因为if的判断是说

141
00:05:09,620 --> 00:05:10,670
如果他不是零

142
00:05:10,670 --> 00:05:12,500
他就是满足条件的是吧

143
00:05:12,500 --> 00:05:14,540
所以我们可以也可以调皮的写成

144
00:05:14,540 --> 00:05:16,329
那个exit的那个样子啊

145
00:05:16,329 --> 00:05:18,490
我们来试一下这个代码能不能正确的

146
00:05:18,490 --> 00:05:21,970
让我们在找到第一个数以后就退出了

147
00:05:21,970 --> 00:05:23,779
我们同样的来debug一下

148
00:05:23,779 --> 00:05:26,639
我呢把断点射到里面来啊

149
00:05:26,939 --> 00:05:27,899
断点再到这儿

150
00:05:27,899 --> 00:05:29,339
也就是说他停下来的时候

151
00:05:29,339 --> 00:05:31,319
就已经找到一个解决方案了

152
00:05:35,079 --> 00:05:36,298
现在我们停在这儿了

153
00:05:36,298 --> 00:05:37,709
他已经找到一个解决方案了

154
00:05:37,709 --> 00:05:39,360
接下来我们要做下一步

155
00:05:39,639 --> 00:05:41,860
下一步使得exit变成一了

156
00:05:41,860 --> 00:05:44,720
然后我们break break以后跳到这儿来了

157
00:05:44,839 --> 00:05:46,160
这个时候我们来判断一下

158
00:05:46,160 --> 00:05:47,600
如果exist是一的话

159
00:05:47,600 --> 00:05:48,500
我们继续break

160
00:05:48,500 --> 00:05:49,790
于是跳到这儿来了

161
00:05:49,790 --> 00:05:52,399
这时候再判断exit等于我们再继续break

162
00:05:52,399 --> 00:05:55,439
于是我们终于出来了好

163
00:05:55,439 --> 00:05:57,839
所以这是我们常用的一种手段

164
00:05:58,180 --> 00:05:59,920
这个呢我们叫做接力break

165
00:05:59,920 --> 00:06:02,408
你看我们需要有个变量来表达这件事情

166
00:06:02,408 --> 00:06:03,428
当我们要break的时候

167
00:06:03,428 --> 00:06:04,569
我让那个变量等于一

168
00:06:04,569 --> 00:06:06,369
然后在循环外面判断它是不是等于一

169
00:06:06,369 --> 00:06:07,418
我们在接力break

170
00:06:07,418 --> 00:06:09,560
在接力break最后才能跳出来

171
00:06:10,639 --> 00:06:12,999
这是传统教科书上的手段

172
00:06:12,999 --> 00:06:14,759
我们还有另外一种手段

173
00:06:15,800 --> 00:06:18,100
我们有一个好朋友叫做go to

174
00:06:18,420 --> 00:06:21,540
我们可以直接在这个需要离开

175
00:06:21,540 --> 00:06:24,579
整个循环的地方放一个狗头语句

176
00:06:24,680 --> 00:06:25,939
go to语句是这样子的

177
00:06:25,939 --> 00:06:28,519
构图后面要有一个标号

178
00:06:28,579 --> 00:06:31,160
这个标号呢是你在程序里面自己设的

179
00:06:31,160 --> 00:06:32,930
那你自己写的一个

180
00:06:32,930 --> 00:06:34,339
比如这个叫做out的标号

181
00:06:34,339 --> 00:06:35,810
后面以冒号结尾

182
00:06:35,810 --> 00:06:38,399
他的意思就是说这是一个地方

183
00:06:38,639 --> 00:06:42,180
go to呢要跳到out所指的那个地方去

184
00:06:42,180 --> 00:06:45,189
所以一旦在循环里面条件满足

185
00:06:45,189 --> 00:06:46,869
我们就做这个构图

186
00:06:46,869 --> 00:06:49,329
让他从这里直接跳到奥特那里去

187
00:06:49,329 --> 00:06:50,379
我们来试一下

188
00:06:50,980 --> 00:06:51,600
现在呢

189
00:06:51,600 --> 00:06:54,300
我们把程序改造成了用go to的方式啊

190
00:06:54,300 --> 00:06:55,740
我们来调试运行一下

191
00:06:57,060 --> 00:06:59,000
他到了这儿找到了一个结果

192
00:06:59,000 --> 00:07:03,019
然后呢我们下一步他做完print以后

193
00:07:03,019 --> 00:07:03,259
先

194
00:07:03,259 --> 00:07:04,519
现在我们要去做go to了

195
00:07:04,519 --> 00:07:05,819
go to的下一步

196
00:07:06,319 --> 00:07:08,870
就直接让他离开了所有的循环

197
00:07:08,870 --> 00:07:11,540
跳到了o u t所指的那个地方

198
00:07:11,540 --> 00:07:12,819
于是我们到了这

199
00:07:14,240 --> 00:07:17,920
所以go to其实特别适合于这种场景

200
00:07:17,920 --> 00:07:21,730
就是我们要在多重循环嵌套的循环的内层

201
00:07:21,730 --> 00:07:23,439
跳到最外面去的时候

202
00:07:23,439 --> 00:07:26,040
我们是可以去使用高通的

203
00:07:27,560 --> 00:07:30,970
有的这个教材呢会比较害怕

204
00:07:30,970 --> 00:07:32,589
教大家用go to啊

205
00:07:32,589 --> 00:07:34,949
因为go to在历史上有个不好的名声

206
00:07:34,949 --> 00:07:37,980
觉得这个沟通的破坏了程序的结构性

207
00:07:37,980 --> 00:07:39,449
你可以到处沟通到这里

208
00:07:39,449 --> 00:07:40,199
沟通到那里

209
00:07:40,199 --> 00:07:43,199
但实际上go to在某些场合

210
00:07:43,199 --> 00:07:44,430
他其实特别有用的

211
00:07:44,430 --> 00:07:46,480
当然我还是建议大家呢

212
00:07:46,480 --> 00:07:49,029
只在我们现在讲的这种场合使用构图

213
00:07:49,029 --> 00:07:52,120
也就是只在当你有多重的循环

214
00:07:52,120 --> 00:07:54,730
你需要从最内层跳到最外面的时候

215
00:07:54,730 --> 00:07:55,930
用go to来跳

216
00:07:55,930 --> 00:07:57,009
其他的地方

217
00:07:57,009 --> 00:07:58,480
不要去使用这个构图


1
00:00:05,280 --> 00:00:06,440
非常相似的

2
00:00:06,440 --> 00:00:09,500
我们还有另外一种东西叫做union union的

3
00:00:09,500 --> 00:00:12,199
所有的地方表面看起来和jr是完全一样的

4
00:00:12,199 --> 00:00:15,419
比如说我们会说union in lt

5
00:00:15,419 --> 00:00:17,579
那么这里头有一个int

6
00:00:17,579 --> 00:00:18,390
有一个char

7
00:00:18,390 --> 00:00:20,379
然后呢我们定义了两个变量

8
00:00:20,379 --> 00:00:21,699
那么我们就可以说啊

9
00:00:21,699 --> 00:00:24,570
这个呃e l t one的i呢等于四

10
00:00:24,570 --> 00:00:27,089
我们说l t to the c a等于a

11
00:00:27,089 --> 00:00:29,429
我们也可以说t to的i呢

12
00:00:29,429 --> 00:00:31,260
等于什么什么什么啊

13
00:00:31,260 --> 00:00:32,539
0x带的beef

14
00:00:34,000 --> 00:00:36,810
但是它和rap不一样的是

15
00:00:36,810 --> 00:00:37,799
对于rap来说

16
00:00:37,799 --> 00:00:38,820
如果这是一个rap

17
00:00:38,820 --> 00:00:40,738
那么这个rap有俩成员

18
00:00:40,738 --> 00:00:43,618
这两个成员的值是截然分开的

19
00:00:43,618 --> 00:00:46,840
他随时都可以使用其中的任何一个

20
00:00:46,840 --> 00:00:48,399
但是对于u来说

21
00:00:48,399 --> 00:00:50,950
实际上这两个成员

22
00:00:50,950 --> 00:00:53,539
他们占据了相同的内存空间

23
00:00:53,539 --> 00:00:55,640
但他如果有三个四个都一样

24
00:00:55,640 --> 00:00:58,250
他的任何的这个成员变量

25
00:00:58,250 --> 00:01:01,280
所占据的空间只有一份

26
00:01:01,280 --> 00:01:02,840
所以叫做联合

27
00:01:06,579 --> 00:01:07,769
怎么使用啊

28
00:01:07,769 --> 00:01:09,689
你用了我还能用吗

29
00:01:09,689 --> 00:01:13,719
不能你你通过它的i填进去了一个值

30
00:01:13,719 --> 00:01:15,859
这个值就填到哪儿去了

31
00:01:17,900 --> 00:01:19,219
这个值就填到那儿去了

32
00:01:19,219 --> 00:01:21,500
可是你再通过它的i填一个值的时候

33
00:01:21,500 --> 00:01:24,980
就把前面c里面的那个值给冲掉了

34
00:01:24,980 --> 00:01:26,540
那c还有值吗

35
00:01:26,540 --> 00:01:28,980
还有值哦

36
00:01:28,980 --> 00:01:30,510
天哪这到底是什么意思

37
00:01:30,510 --> 00:01:33,329
其实对于游泳来说

38
00:01:33,329 --> 00:01:35,879
我们经常用游泳的一个场合

39
00:01:35,879 --> 00:01:38,370
是这个这个程序什么意思呢

40
00:01:38,370 --> 00:01:39,870
你看我们做了一个union

41
00:01:39,870 --> 00:01:40,980
我们用上了

42
00:01:40,980 --> 00:01:42,540
刚刚讲了他的def啊

43
00:01:42,540 --> 00:01:45,039
我们说这里头有一个int i

44
00:01:45,039 --> 00:01:47,289
还有一个c h a r的数组

45
00:01:47,289 --> 00:01:48,489
这个数组多大的

46
00:01:48,489 --> 00:01:49,579
size of int

47
00:01:49,780 --> 00:01:51,340
我不能一定说四对吧

48
00:01:51,340 --> 00:01:52,900
因为不同的平台可能不一样

49
00:01:52,900 --> 00:01:55,420
所以我就用size of int来说

50
00:01:55,420 --> 00:01:56,799
我有那么一个数组

51
00:01:56,799 --> 00:02:00,049
因此实际上这个unit里头是怎么回事呢

52
00:02:00,049 --> 00:02:02,750
在这个叫做c h i的uno里头呢

53
00:02:02,750 --> 00:02:05,420
假如说我们现在to the size是四的话

54
00:02:05,420 --> 00:02:09,960
那它有一共就四个变量啊

55
00:02:09,960 --> 00:02:11,300
四个字节在里头啊

56
00:02:11,379 --> 00:02:14,289
这个四个字节可以被看作是i

57
00:02:14,289 --> 00:02:17,289
也可以被看作是一个c h的数组

58
00:02:17,289 --> 00:02:19,199
所以这是它的零一

59
00:02:21,520 --> 00:02:25,800
于是如果我们说c h i的i等于

60
00:02:25,800 --> 00:02:28,280
比如说1234的话

61
00:02:29,520 --> 00:02:32,300
那它就会往这个地方写下去

62
00:02:32,300 --> 00:02:35,639
1234所代表的那个16进制的数

63
00:02:35,639 --> 00:02:38,159
ok我们把把这个数给找出来

64
00:02:38,159 --> 00:02:39,000
到底是多少

65
00:02:39,000 --> 00:02:40,919
我们用下计算器来帮忙

66
00:02:40,919 --> 00:02:44,899
我们说这个1234告诉我

67
00:02:44,899 --> 00:02:46,278
16进制是多少

68
00:02:46,278 --> 00:02:47,979
04d2 

69
00:02:50,219 --> 00:02:55,209
ok这个东西是0x的04d2 

70
00:02:55,209 --> 00:02:59,229
所以他的这四个字节里面必定放着零四

71
00:02:59,229 --> 00:03:00,479
第二的某种形式

72
00:03:01,718 --> 00:03:04,699
比方说也许我们可以想象说

73
00:03:04,699 --> 00:03:05,960
因为04d2 嘛

74
00:03:05,960 --> 00:03:07,520
所以这个i放进去

75
00:03:07,520 --> 00:03:09,500
那么零四在这儿是吧

76
00:03:09,500 --> 00:03:11,300
第二在这儿我们可以想象

77
00:03:11,300 --> 00:03:13,139
它大概是这样子啊

78
00:03:13,299 --> 00:03:18,979
完了以后这是i如果我们去看c h0 

79
00:03:18,979 --> 00:03:21,258
我们现在是不是应该得到零零

80
00:03:21,258 --> 00:03:22,549
c h1 

81
00:03:22,549 --> 00:03:24,468
我们现在是不是应该得到零零

82
00:03:24,468 --> 00:03:28,199
而c h2 他是不是又就是零四了

83
00:03:28,938 --> 00:03:29,739
对不对

84
00:03:29,739 --> 00:03:31,598
因此我们这个程序在干什么呢

85
00:03:31,598 --> 00:03:33,848
我们程序做的事情就是这样子

86
00:03:33,848 --> 00:03:37,460
我们往c h i的i里面写了1234

87
00:03:37,699 --> 00:03:38,479
然后呢

88
00:03:38,479 --> 00:03:40,789
我们遍历这个这个c h的数组

89
00:03:40,789 --> 00:03:42,080
同样我们不知道是多少嘛

90
00:03:42,080 --> 00:03:43,819
所以我们便利size of int

91
00:03:43,819 --> 00:03:48,159
然后呢我们就让它输出这个以字符串

92
00:03:48,159 --> 00:03:51,639
以字符来表达的这个这个这个这个字节啊

93
00:03:51,639 --> 00:03:52,840
当然我们输出的时候呢

94
00:03:52,840 --> 00:03:54,719
用了比较多的修饰符

95
00:03:54,719 --> 00:03:58,039
这部分呢我们在file在文件这部分会展开讲

96
00:03:58,039 --> 00:03:59,060
大概的意思就是说

97
00:03:59,060 --> 00:04:00,889
我们希望它输出的是个16进制

98
00:04:00,889 --> 00:04:02,900
并且告诉他这就是一个字节

99
00:04:02,900 --> 00:04:04,280
你你别给我做扩展了

100
00:04:04,280 --> 00:04:09,400
然后呢这是显示为两个16进制字

101
00:04:09,400 --> 00:04:11,379
16进制数字的那么一个方式啊

102
00:04:11,379 --> 00:04:12,849
如果钱都不足零呢

103
00:04:12,849 --> 00:04:13,840
要补个零

104
00:04:13,840 --> 00:04:14,379
不到十

105
00:04:14,379 --> 00:04:15,219
不到一零的话

106
00:04:15,219 --> 00:04:16,120
要补个零啊

107
00:04:16,120 --> 00:04:16,980
就这个意思

108
00:04:16,980 --> 00:04:18,689
那这个1234

109
00:04:18,689 --> 00:04:20,250
他会给我们说出什么结果呢

110
00:04:20,250 --> 00:04:21,420
我们来看一下

111
00:04:22,119 --> 00:04:24,238
这是1234的结果

112
00:04:24,238 --> 00:04:27,119
等一下好像跟我们看到的有点点不一样

113
00:04:27,119 --> 00:04:31,680
我们刚才看到说计算器告诉我们这是零四

114
00:04:31,680 --> 00:04:33,750
第二我们的程序告诉我们

115
00:04:33,750 --> 00:04:37,740
在这个c h的数组里面放的是d204 

116
00:04:37,740 --> 00:04:39,180
0000

117
00:04:39,218 --> 00:04:40,658
这是啥

118
00:04:40,658 --> 00:04:43,988
也就是说这个计算机告诉我们说

119
00:04:43,988 --> 00:04:47,379
这里头放的不是我们想象的那个零四第二

120
00:04:47,379 --> 00:04:49,000
而是这么放的

121
00:04:49,800 --> 00:04:54,019
第204万

122
00:04:54,019 --> 00:04:55,910
你看跟我们想象的怎么样

123
00:04:55,910 --> 00:04:58,069
刚好是这样子

124
00:04:58,069 --> 00:05:00,199
这样子这样子这样子交叉了一下

125
00:05:00,199 --> 00:05:04,750
两头对调了一下呃

126
00:05:04,750 --> 00:05:06,819
看到这个结果是正常的

127
00:05:06,819 --> 00:05:09,339
我相信你在你的计算机上

128
00:05:09,339 --> 00:05:10,180
在你的操作系统

129
00:05:10,180 --> 00:05:10,779
在你的平台上

130
00:05:10,779 --> 00:05:12,800
你不应该看到其他的结果

131
00:05:13,180 --> 00:05:16,040
只有一种可能你看到其他的结果

132
00:05:17,680 --> 00:05:19,620
我我我不相信有有有人

133
00:05:19,620 --> 00:05:22,470
有有机会接触这样的呃机器哈

134
00:05:22,470 --> 00:05:25,079
因为我们现在用的这个呃c8 

135
00:05:25,079 --> 00:05:27,800
这个这个cpu呢是叫做x86 的cpu

136
00:05:27,800 --> 00:05:29,600
这件事情呢在计算机里头呢

137
00:05:29,600 --> 00:05:30,920
我们叫做大小端

138
00:05:30,920 --> 00:05:33,019
我们现在的x86 的cpu呢

139
00:05:33,019 --> 00:05:36,980
是一种小端的机器啊

140
00:05:36,980 --> 00:05:38,779
小端我们过去呃

141
00:05:38,779 --> 00:05:41,120
计算机界的术语呢叫做低位在前

142
00:05:41,120 --> 00:05:44,408
就是一个数放在内存里头的时候

143
00:05:44,408 --> 00:05:46,749
他要把d的东西放在前面啊

144
00:05:46,749 --> 00:05:50,519
我们我们这是一个实际上它的1234在

145
00:05:50,519 --> 00:05:51,779
在这个16进制来说

146
00:05:51,779 --> 00:05:54,439
它是000004

147
00:05:54,439 --> 00:05:55,579
第二对吧

148
00:05:55,579 --> 00:05:56,360
那这是第一位

149
00:05:56,360 --> 00:05:57,740
所以我们要把它放到前头去

150
00:05:57,740 --> 00:05:58,519
它就变成d2 

151
00:05:58,519 --> 00:05:58,939
在前面

152
00:05:58,939 --> 00:05:59,810
然后是零四

153
00:05:59,810 --> 00:06:00,560
然后是零零

154
00:06:00,560 --> 00:06:01,310
然后是零零

155
00:06:01,310 --> 00:06:03,240
这叫做低位在前

156
00:06:03,579 --> 00:06:06,579
那么这个x86 这种cpu呢

157
00:06:06,579 --> 00:06:08,120
就是定位在前的啊

158
00:06:08,120 --> 00:06:09,079
所以它就是小段的

159
00:06:09,079 --> 00:06:10,759
所以它里头的在内存当中

160
00:06:10,759 --> 00:06:12,920
你的整数其实是以这种方式存放的

161
00:06:12,920 --> 00:06:16,389
而不是我们所知道的那种所想象的那种啊

162
00:06:16,389 --> 00:06:19,079
000004d2 那种方式在放着啊

163
00:06:19,079 --> 00:06:21,899
这件事情呢其实跟咱没什么关系啊

164
00:06:21,899 --> 00:06:23,250
我只是顺便在这儿说

165
00:06:23,250 --> 00:06:25,079
我们通常用uu呢

166
00:06:25,079 --> 00:06:27,918
这是一个非常常见的用永久的场合

167
00:06:27,918 --> 00:06:30,978
就是我可以通过这种方式得到一个整数

168
00:06:30,978 --> 00:06:32,589
内部的各个字节

169
00:06:32,589 --> 00:06:36,040
同样的我也可以通过这个方式得到一个double

170
00:06:36,040 --> 00:06:36,850
内部的字节

171
00:06:36,850 --> 00:06:38,500
得到一个float内部的字节

172
00:06:38,500 --> 00:06:40,759
这是一个很有趣的工具

173
00:06:40,759 --> 00:06:42,319
我我们会有一些用处

174
00:06:42,319 --> 00:06:44,759
比如说当我们要做文件操作的时候

175
00:06:44,759 --> 00:06:47,220
当我们要把一个整数以二进制的形式写到

176
00:06:47,220 --> 00:06:47,579
数

177
00:06:47,579 --> 00:06:49,129
写到一个文件里头去的时候

178
00:06:49,129 --> 00:06:51,350
这就是我们可以用来做读写的

179
00:06:51,350 --> 00:06:52,879
一个中间的媒介


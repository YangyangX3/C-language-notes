1
00:00:04,480 --> 00:00:06,040
我们还有一种特殊的运算符

2
00:00:06,040 --> 00:00:07,059
叫做条件运算符

3
00:00:07,059 --> 00:00:08,259
这个运算符长得像这个样子

4
00:00:08,259 --> 00:00:11,000
比如说count等于count大于20

5
00:00:11,000 --> 00:00:12,410
问号cd减十

6
00:00:12,410 --> 00:00:14,060
冒号count加十

7
00:00:14,119 --> 00:00:17,480
这里呢这个运算符里面有两个符号

8
00:00:17,480 --> 00:00:18,559
一个是问号

9
00:00:18,559 --> 00:00:19,609
一个是冒号

10
00:00:19,609 --> 00:00:22,359
问号前面的是条件问号

11
00:00:22,359 --> 00:00:24,399
后面的是条件满足时候的值

12
00:00:24,399 --> 00:00:27,320
冒号后面的是条件不满足时候的值

13
00:00:27,320 --> 00:00:30,620
所以它就相当于如果cut大于20的话

14
00:00:30,620 --> 00:00:32,299
那么count等于t减十

15
00:00:32,299 --> 00:00:34,959
else count等于cd加十

16
00:00:35,500 --> 00:00:40,779
这又是一个编程语言早期遗留下来的东西

17
00:00:42,259 --> 00:00:45,219
表面上看起来你把这么一个f else语句

18
00:00:45,219 --> 00:00:47,259
写成这么一个条件运算符的句子

19
00:00:47,259 --> 00:00:50,079
简单了很多对吧

20
00:00:50,079 --> 00:00:52,659
但是呢在复杂的情况下

21
00:00:52,659 --> 00:00:54,539
会给你带来很大的麻烦

22
00:00:54,679 --> 00:00:57,679
这种条件运算符它的优先级它比腐殖高

23
00:00:57,679 --> 00:00:59,990
但是比其他所有的运算都要来得低啊

24
00:00:59,990 --> 00:01:02,090
所以你看我们来理解一下这里的式子哈

25
00:01:02,090 --> 00:01:03,530
如果m小于n的话

26
00:01:03,530 --> 00:01:04,879
那么结果就是x

27
00:01:04,879 --> 00:01:06,780
否则的话结果是a大于五

28
00:01:07,200 --> 00:01:09,959
如果a加加的结果大于等于一

29
00:01:09,959 --> 00:01:13,019
并且b减减的结果大于二的话

30
00:01:13,019 --> 00:01:14,280
那么结果是a

31
00:01:14,280 --> 00:01:15,519
否则的话是b

32
00:01:15,719 --> 00:01:18,799
如果a等于三乘以a

33
00:01:18,799 --> 00:01:20,959
x等于三乘以a大于五的话

34
00:01:20,959 --> 00:01:21,859
那么结果是五

35
00:01:21,859 --> 00:01:23,060
否则的话是20

36
00:01:23,060 --> 00:01:25,340
这里你看我们还要把这种负值运算组合

37
00:01:25,340 --> 00:01:26,810
在表达式里头

38
00:01:26,810 --> 00:01:29,599
更加增加了整个表达式的复杂性

39
00:01:30,459 --> 00:01:32,760
如果我们条件表达式还出现了嵌套

40
00:01:32,760 --> 00:01:34,680
比如说如果看到大于20的话

41
00:01:34,680 --> 00:01:36,000
如果看的还小于50的话

42
00:01:36,000 --> 00:01:36,780
那么是看到减十

43
00:01:36,780 --> 00:01:37,840
否则它是count减五

44
00:01:37,840 --> 00:01:39,519
否则的话是这个地方的

45
00:01:39,519 --> 00:01:40,959
否则的话是我们再来判断

46
00:01:40,959 --> 00:01:42,060
看看是否小于十呢

47
00:01:42,060 --> 00:01:42,599
如果是的话

48
00:01:42,599 --> 00:01:43,200
是看到加时

49
00:01:43,200 --> 00:01:44,480
否则倒是看得加五

50
00:01:45,700 --> 00:01:49,399
你看我读的都读的气都快喘不过来了

51
00:01:50,159 --> 00:01:52,159
你让懂你程序的人

52
00:01:52,159 --> 00:01:53,659
怎么能够一眼看明白

53
00:01:53,659 --> 00:01:55,359
你的程序到底想干什么呢

54
00:01:55,599 --> 00:01:59,859
我们的条件运算符呢是自右向左结合的

55
00:01:59,859 --> 00:02:01,060
也就是说啊

56
00:02:01,060 --> 00:02:04,890
我我我们在理解这个东西怎么计算的时候

57
00:02:04,890 --> 00:02:07,920
要把它所有的分支部分都算明白

58
00:02:07,920 --> 00:02:10,819
然后再回到总总的这个地方去

59
00:02:10,979 --> 00:02:13,318
所以总的来说一句话

60
00:02:13,318 --> 00:02:13,679
就是

61
00:02:13,679 --> 00:02:16,719
我们不希望你去使用嵌套的条件表达式

62
00:02:16,899 --> 00:02:18,699
它使得你的程序太复杂

63
00:02:18,699 --> 00:02:22,340
他使得别人来理解你的程序太困难了

64
00:02:23,159 --> 00:02:26,819
最后我们还有一种非常有意思的运算

65
00:02:27,299 --> 00:02:28,709
叫做逗号

66
00:02:28,709 --> 00:02:32,560
逗号在c语言里面是一个运算符

67
00:02:32,979 --> 00:02:34,960
它用来连接两个表达式

68
00:02:34,960 --> 00:02:37,840
然后用它右边的表达式的值作为它的结果

69
00:02:37,840 --> 00:02:39,199
我们来看这什么意思

70
00:02:39,199 --> 00:02:41,360
如果我把它写成说3+4的话

71
00:02:41,360 --> 00:02:41,840
5+6

72
00:02:41,840 --> 00:02:43,520
因为我们说个逗号的优先级

73
00:02:43,520 --> 00:02:45,710
是所有的运算符当中最低的

74
00:02:45,710 --> 00:02:47,270
低过这个幅值

75
00:02:47,270 --> 00:02:48,590
所以你看如果我们编译的时候

76
00:02:48,590 --> 00:02:52,239
他会说王宁说这个表达式的结果没有用到

77
00:02:52,239 --> 00:02:53,258
哪个表达式的5+6

78
00:02:53,258 --> 00:02:54,158
为什么会这么理解

79
00:02:54,158 --> 00:02:59,169
是因为3+4被赋给了i

80
00:02:59,169 --> 00:03:02,120
这是一个表达式

81
00:03:02,699 --> 00:03:05,629
赋值的优先级比逗号还要来得高

82
00:03:05,629 --> 00:03:08,030
所以它会先算

83
00:03:08,030 --> 00:03:08,990
算完以后

84
00:03:08,990 --> 00:03:10,699
我们再去算5+6

85
00:03:10,699 --> 00:03:13,310
这个5+6的结果没有交给任何人

86
00:03:13,310 --> 00:03:15,710
这个表达式的结果没有用到

87
00:03:15,710 --> 00:03:17,000
所以在这个时候

88
00:03:17,000 --> 00:03:19,430
如果我们一定要看一下这个i的结果

89
00:03:19,430 --> 00:03:20,719
它是七

90
00:03:20,819 --> 00:03:22,889
因为3+4在这儿

91
00:03:22,889 --> 00:03:25,199
现在如果我在这儿加一对括号

92
00:03:26,158 --> 00:03:27,719
加了一堆括号以后

93
00:03:27,719 --> 00:03:28,680
我在编译

94
00:03:28,680 --> 00:03:30,960
它会说还是说表达式结果没有用到

95
00:03:30,960 --> 00:03:32,699
但他说的是3+4没有用到

96
00:03:32,699 --> 00:03:33,180
为什么呢

97
00:03:33,180 --> 00:03:35,780
因为这个时候这是一个表达式

98
00:03:36,039 --> 00:03:37,180
有有有括号了

99
00:03:37,180 --> 00:03:37,479
对不对

100
00:03:37,479 --> 00:03:38,409
它的优先级

101
00:03:38,409 --> 00:03:39,789
括号提升了它的优先级

102
00:03:39,789 --> 00:03:41,800
所以这是一对它的这是一个表达式

103
00:03:41,800 --> 00:03:43,719
这个表达式里面结果是什么呢

104
00:03:43,719 --> 00:03:46,629
我们看一下运行的结果是11

105
00:03:46,629 --> 00:03:49,000
也就是说这个表达式的结果

106
00:03:49,079 --> 00:03:52,288
逗号表达式的结果是逗号后面那个东西

107
00:03:52,288 --> 00:03:53,818
5+6的结果

108
00:03:53,818 --> 00:03:57,299
作为整个这个逗号表达的结果去付给了i

109
00:03:57,299 --> 00:03:58,520
于是我们得到了11

110
00:03:59,379 --> 00:04:02,219
你可能会说这种逗号表达是有什么用啊

111
00:04:02,219 --> 00:04:04,300
主要是在for当中使用

112
00:04:05,020 --> 00:04:06,689
我们主要是在这个地方使用

113
00:04:06,689 --> 00:04:08,460
你看在for的这个地方

114
00:04:08,460 --> 00:04:11,280
我们知道它分成了用分号分成了三块区域

115
00:04:11,280 --> 00:04:13,000
每一块区域里面是一个表达式

116
00:04:13,000 --> 00:04:16,788
如果你在这个里面想要放多个计算的时候

117
00:04:16,788 --> 00:04:18,048
你就可以用逗号了

118
00:04:18,048 --> 00:04:20,119
你看我们这个for是说i等于零

119
00:04:20,119 --> 00:04:20,939
j等于十

120
00:04:20,939 --> 00:04:22,319
i小于j

121
00:04:22,319 --> 00:04:24,600
每一轮的i加加减减减

122
00:04:24,600 --> 00:04:26,259
这里都是逗号

123
00:04:27,180 --> 00:04:28,220
目前来说

124
00:04:28,220 --> 00:04:31,720
逗号表达式基本上就只有这一个用处


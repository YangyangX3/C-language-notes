1
00:00:04,280 --> 00:00:06,320
如果对于一个本地变量

2
00:00:06,320 --> 00:00:09,050
你在这个本地变量的类型前面

3
00:00:09,050 --> 00:00:11,480
加上一个新的关键词叫做study

4
00:00:12,138 --> 00:00:12,919
这个时候呢

5
00:00:12,919 --> 00:00:15,259
这个本地变量就成为一种新的本地变量

6
00:00:15,259 --> 00:00:17,300
我们叫它静态本地变量

7
00:00:17,500 --> 00:00:20,140
这种静态本地变量有一个非常有意思的

8
00:00:20,140 --> 00:00:22,239
非常奇特的这个特性啊

9
00:00:22,239 --> 00:00:24,879
你每次离开这个函数以后

10
00:00:24,879 --> 00:00:27,059
这个静态本地变量它还存在

11
00:00:27,359 --> 00:00:30,600
本来我们说本地变量的这个生存期

12
00:00:30,600 --> 00:00:32,399
就是在这个函数里头对吧

13
00:00:32,399 --> 00:00:33,780
进去的时候才有

14
00:00:33,780 --> 00:00:35,350
离开的时候就没有了

15
00:00:35,350 --> 00:00:37,570
可是呢你加上static关键词以后

16
00:00:37,570 --> 00:00:39,859
它就变成静态本地变量

17
00:00:40,340 --> 00:00:42,229
你每次离开他还在那

18
00:00:42,229 --> 00:00:43,670
你下次再进去呢

19
00:00:43,670 --> 00:00:47,098
他是上一次离开时候的那个值

20
00:00:47,420 --> 00:00:49,460
而不是每次都要重新做初始化

21
00:00:49,460 --> 00:00:50,840
它的初始化只做一次的

22
00:00:51,920 --> 00:00:53,359
我们来试一下这件事情

23
00:00:53,500 --> 00:00:56,619
我们在这个f里头呢放一个本地变量啊

24
00:00:56,619 --> 00:00:57,399
我们不要叫g2 了

25
00:00:57,399 --> 00:00:58,539
就叫or好了

26
00:00:58,539 --> 00:01:00,399
然后呢当然这也得改改啊

27
00:01:00,399 --> 00:01:01,960
我们不是输出g2 的阵容

28
00:01:01,960 --> 00:01:03,280
输出二的值啊

29
00:01:03,280 --> 00:01:05,439
然后呢这是or的值

30
00:01:05,439 --> 00:01:07,109
这是报纸

31
00:01:07,109 --> 00:01:07,829
在main里面呢

32
00:01:07,829 --> 00:01:09,150
我们不需要去看吉奥了啊

33
00:01:09,150 --> 00:01:11,010
其实说这个这个只要存不存在

34
00:01:11,010 --> 00:01:11,849
都跟我们没关系了啊

35
00:01:11,849 --> 00:01:14,340
我们就是在main里面去掉三次f

36
00:01:14,340 --> 00:01:15,420
当然我们可以先这样

37
00:01:15,420 --> 00:01:19,480
我们先试呢这个程序是不是static的

38
00:01:19,500 --> 00:01:21,120
就是就是普通的本地变量

39
00:01:21,120 --> 00:01:22,799
那我们知道作为本地变量来说

40
00:01:22,799 --> 00:01:24,599
进这个f有这个二了

41
00:01:24,599 --> 00:01:26,099
离开这个f最高就不存在了

42
00:01:26,099 --> 00:01:27,989
每次掉2f每次都有个新的哦

43
00:01:27,989 --> 00:01:30,180
那个新号呢都会被重新初始化为一

44
00:01:30,180 --> 00:01:30,599
对不对

45
00:01:30,599 --> 00:01:32,000
所以如果是这样子的话呢

46
00:01:32,000 --> 00:01:35,459
我们看到三次f调用的or等于一

47
00:01:35,459 --> 00:01:36,989
做过一次加法等于三

48
00:01:36,989 --> 00:01:37,620
又等于一

49
00:01:37,620 --> 00:01:38,099
又等于三

50
00:01:38,099 --> 00:01:38,700
又等于一

51
00:01:38,700 --> 00:01:39,599
又等于三

52
00:01:39,920 --> 00:01:41,900
这是普通的本地变量

53
00:01:41,900 --> 00:01:46,060
现在我们在它前面加上s t a t i c study

54
00:01:46,060 --> 00:01:47,799
我们说它是个静态本地变量了

55
00:01:47,799 --> 00:01:50,120
那局面会有什么样的变化呢

56
00:01:50,120 --> 00:01:53,150
他的执行说第一次进去的时候

57
00:01:53,150 --> 00:01:54,620
它被初始化为一了

58
00:01:54,620 --> 00:01:56,039
因为这是第一次进f

59
00:01:56,180 --> 00:01:58,640
然后呢加二以后它变成三了

60
00:01:58,640 --> 00:02:00,590
当第二次再进去的时候

61
00:02:00,590 --> 00:02:02,799
f变成三了

62
00:02:02,799 --> 00:02:05,980
这是上次离开时候保留下来的那个值

63
00:02:05,980 --> 00:02:08,590
它没有被重新初始化为一啊

64
00:02:08,590 --> 00:02:09,949
然后加二以后15

65
00:02:09,949 --> 00:02:11,449
第三次再进去的时候

66
00:02:11,449 --> 00:02:12,250
它是五

67
00:02:12,250 --> 00:02:14,289
他没有去做这个等于一的

68
00:02:14,289 --> 00:02:15,189
这个初始化的动作

69
00:02:15,189 --> 00:02:17,550
这个初始化的动作只做了一次

70
00:02:17,550 --> 00:02:19,770
然后结束的时候它是五

71
00:02:19,770 --> 00:02:22,139
我们可以想见第四次如果再掉f的时候

72
00:02:22,139 --> 00:02:25,879
它先会告诉我说这个or呢是七

73
00:02:26,819 --> 00:02:28,849
这就是静态本地变量

74
00:02:28,849 --> 00:02:34,258
这个静态本地变量呢它实际上是全局变量

75
00:02:36,118 --> 00:02:37,199
为什么这么说呢

76
00:02:37,719 --> 00:02:39,240
我们做一个小实验

77
00:02:39,618 --> 00:02:41,748
我们在这儿有这个全局变量及哦

78
00:02:41,748 --> 00:02:43,938
啊我们在这儿有这个静态本地变量哦

79
00:02:43,938 --> 00:02:46,758
我们现在呢在这儿让他做一个输出

80
00:02:46,758 --> 00:02:47,819
输出什么呢

81
00:02:48,580 --> 00:02:57,199
我们想要看一下说这个and jor在哪啊

82
00:02:57,199 --> 00:03:00,650
也就是说这个g2 的这个地址是多少

83
00:03:00,650 --> 00:03:03,599
那么这是一个输出

84
00:03:03,599 --> 00:03:04,919
第二个输出呢

85
00:03:04,919 --> 00:03:07,759
我们让它输出说这个or的地址是多少

86
00:03:11,740 --> 00:03:13,860
我们把or的地址给输出一下

87
00:03:13,860 --> 00:03:15,629
然后顺便我们可以这样啊

88
00:03:15,629 --> 00:03:17,819
我们这儿呢再搞一个普通的全局变量

89
00:03:17,819 --> 00:03:18,419
是吧啊

90
00:03:18,419 --> 00:03:19,560
普通的本地变量啊

91
00:03:19,560 --> 00:03:21,659
比如说这个k等于零

92
00:03:21,659 --> 00:03:22,919
我们可以再让他输出一下

93
00:03:22,919 --> 00:03:24,800
说这个k的地址等于多少

94
00:03:28,639 --> 00:03:29,919
我们让他对对齐

95
00:03:29,919 --> 00:03:32,139
这样的我们看的时候可以比较一下啊

96
00:03:32,419 --> 00:03:34,879
呃那命里面我们可以稍微简单一点

97
00:03:34,879 --> 00:03:37,240
我们不需要那么多的调用的f

98
00:03:37,379 --> 00:03:38,939
我们给它加上一些换行哈

99
00:03:38,939 --> 00:03:41,849
要不然啊这个结果看起来不清楚好

100
00:03:41,849 --> 00:03:42,599
我们来运行一下

101
00:03:42,599 --> 00:03:43,780
看看结果怎么样

102
00:03:43,959 --> 00:03:46,688
我们看到说你看挺有意思哈

103
00:03:46,688 --> 00:03:50,030
这个吉奥和奥一个是0c

104
00:03:50,030 --> 00:03:51,319
一个是幺零

105
00:03:51,319 --> 00:03:54,519
16进制的0c和幺零之间差多少呢

106
00:03:54,519 --> 00:03:55,419
如果想不起来

107
00:03:55,419 --> 00:03:56,949
我们还是通用计算器好了

108
00:03:56,949 --> 00:03:58,058
我们要来算一下

109
00:03:58,058 --> 00:04:04,998
16进制的一零减去c等于四

110
00:04:04,998 --> 00:04:07,759
也就是十进制的四四是什么

111
00:04:07,939 --> 00:04:09,319
这是int型的变量

112
00:04:09,319 --> 00:04:10,370
一个int就是四

113
00:04:10,370 --> 00:04:13,900
所以你看g2 和or是紧挨在一块的

114
00:04:14,539 --> 00:04:15,319
对不对

115
00:04:15,319 --> 00:04:17,269
只要在前面后面是哪个哦

116
00:04:17,269 --> 00:04:18,600
他们俩放在一起

117
00:04:19,600 --> 00:04:21,240
然后k在哪

118
00:04:21,240 --> 00:04:26,339
你看bf fc什么什么什么这些很小诶

119
00:04:26,339 --> 00:04:27,810
前头还有000

120
00:04:27,810 --> 00:04:29,379
这个很大诶

121
00:04:30,540 --> 00:04:32,389
这是本地变量

122
00:04:32,389 --> 00:04:33,980
这是静态本地变量

123
00:04:33,980 --> 00:04:36,050
它们俩根本就不在一块儿

124
00:04:36,050 --> 00:04:38,579
如果你这还有另外一个本地变量

125
00:04:39,259 --> 00:04:40,899
你自己可以去做一下这件事情

126
00:04:40,899 --> 00:04:42,939
你可以看到本地变量都放在一堆的

127
00:04:42,939 --> 00:04:45,350
他们的地址差不多前后排在一块

128
00:04:45,350 --> 00:04:47,930
而全局变量都放在另外一对

129
00:04:47,930 --> 00:04:51,290
这个变量表面上叫做静态本地变量

130
00:04:51,290 --> 00:04:53,420
但是我们一打开它的地址

131
00:04:53,800 --> 00:04:55,269
我们马上就明白了

132
00:04:55,269 --> 00:04:56,949
他哪里是什么本地变量

133
00:04:56,949 --> 00:04:59,589
它明明就是挂着本地变量名头的

134
00:04:59,589 --> 00:05:01,149
那么一个全局变量

135
00:05:01,149 --> 00:05:03,009
所以从刚才的实验我们已经看到

136
00:05:03,009 --> 00:05:05,350
静态本地变量实际上就是全局变量

137
00:05:05,350 --> 00:05:06,500
它们放在一起的

138
00:05:07,240 --> 00:05:10,560
它的生存期和全局变量一样

139
00:05:10,560 --> 00:05:12,899
是和函数无关的

140
00:05:13,060 --> 00:05:16,509
这就解释了为什么它能够在函数结束以后

141
00:05:16,509 --> 00:05:17,560
依然存在

142
00:05:17,560 --> 00:05:19,329
依然保持着原来的值

143
00:05:19,329 --> 00:05:21,699
因为它根本就是全局变量

144
00:05:21,860 --> 00:05:26,060
但是它被放在函数里头了

145
00:05:26,500 --> 00:05:28,959
所以作为放在函数里头的变量

146
00:05:28,959 --> 00:05:30,310
定义的函数里头的变量

147
00:05:30,310 --> 00:05:33,100
它具有和本地变量一样的东西什么的

148
00:05:33,100 --> 00:05:37,269
就是作用域作为静态变量

149
00:05:37,269 --> 00:05:40,408
它有全局的生存期

150
00:05:40,408 --> 00:05:42,238
作为本地变量

151
00:05:42,238 --> 00:05:44,968
它有本地的作用域

152
00:05:44,968 --> 00:05:47,220
只在这个函数里头可以访问它

153
00:05:47,220 --> 00:05:49,709
但是它是全局的

154
00:05:49,709 --> 00:05:52,829
所以它的生存期和作用域是分开的

155
00:05:52,829 --> 00:05:53,670
不一致的

156
00:05:53,670 --> 00:05:56,560
全局变量有全局的作用与全局的生存期

157
00:05:56,560 --> 00:05:59,199
本地变量有本地的作用与本地的生存期

158
00:05:59,199 --> 00:06:03,139
而静态本地变量是全局生存期

159
00:06:03,139 --> 00:06:04,459
本地作用域

160
00:06:04,459 --> 00:06:06,300
这就是它特殊的地方

